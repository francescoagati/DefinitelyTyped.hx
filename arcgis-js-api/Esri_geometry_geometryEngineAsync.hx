extern class Esri_geometry_geometryEngineAsyncTopLevel {
	static var geometryEngineAsync : { @:overload(function(geometry:Array<Geometry>, distance:Float, ?unit:Float, ?unionResults:Bool):Dynamic { })
	@:overload(function(geometry:Geometry, distance:Float, ?unit:Float, ?unionResults:Bool):Dynamic { })
	@:overload(function(geometry:Array<Geometry>, distance:Array<Float>, ?unit:Float, ?unionResults:Bool):Dynamic { })
	function buffer(geometry:Geometry, distance:Array<Float>, ?unit:Float, ?unionResults:Bool):Dynamic; function clip(geometry:Geometry, envelope:Extent):Dynamic; function contains(geometry1:Geometry, geometry2:Geometry):Dynamic; @:overload(function(geometry:Array<Geometry>, ?merge:Bool):Dynamic { })
	function convexHull(geometry:Geometry, ?merge:Bool):Dynamic; function crosses(geometry1:Geometry, geometry2:Geometry):Dynamic; function cut(geometry:Geometry, cutter:Polyline):Dynamic; function densify(geometry:Geometry, maxSegmentLength:Float, ?maxSegmentLengthUnit:Float):Dynamic; @:overload(function(geometry:Array<Geometry>, subtractor:Geometry):Dynamic { })
	function difference(geometry:Geometry, subtractor:Geometry):Dynamic; function disjoint(geometry1:Geometry, geometry2:Geometry):Dynamic; function distance(geometry1:Geometry, geometry2:Geometry, ?distanceUnit:Float):Dynamic; function equals(geometry1:Geometry, geometry2:Geometry):Dynamic; function extendedSpatialReferenceInfo(spatialReference:SpatialReference):Dynamic; function flipHorizontal(geometry:Geometry, ?flipOrigin:Point):Dynamic; function flipVertical(geometry:Geometry, ?flipOrigin:Point):Dynamic; function generalize(geometry:Geometry, maxDeviation:Float, ?removeDegenerateParts:Bool, ?maxDeviationUnit:Float):Dynamic; function geodesicArea(geometry:Geometry, ?unit:Float):Dynamic; @:overload(function(geometry:Array<Geometry>, distance:Float, ?unit:Float, ?unionResults:Bool):Dynamic { })
	@:overload(function(geometry:Geometry, distance:Float, ?unit:Float, ?unionResults:Bool):Dynamic { })
	@:overload(function(geometry:Array<Geometry>, distance:Array<Float>, ?unit:Float, ?unionResults:Bool):Dynamic { })
	function geodesicBuffer(geometry:Geometry, distance:Array<Float>, ?unit:Float, ?unionResults:Bool):Dynamic; function geodesicLength(geometry:Geometry, ?unit:Float):Dynamic; @:overload(function(geometry:Array<Geometry>, intersector:Geometry):Dynamic { })
	function intersect(geometry:Geometry, intersector:Geometry):Dynamic; function intersects(geometry1:Geometry, geometry2:Geometry):Dynamic; function isSimple(geometry:Geometry):Dynamic; function nearestCoordinate(geometry:Geometry, inputPoint:Point):Dynamic; function nearestVertex(geometry:Geometry, inputPoint:Point):Dynamic; function nearestVertices(geometry:Geometry, inputPoint:Point, searchRadius:Float, maxVertexCountToReturn:Float):Dynamic; @:overload(function(geometry:Array<Geometry>, distance:Float, offsetUnit:Float, joinType:Float, ?bevelRatio:Float, ?flattenError:Float):Dynamic { })
	function offset(geometry:Geometry, distance:Float, offsetUnit:Float, joinType:Float, ?bevelRatio:Float, ?flattenError:Float):Dynamic; function overlaps(geometry1:Geometry, geometry2:Geometry):Dynamic; function planarArea(geometry:Geometry, ?unit:Float):Dynamic; function planarLength(geometry:Geometry, unit:Float):Dynamic; function relate(geometry1:Geometry, geometry2:Geometry, relation:String):Dynamic; function rotate(geometry:Geometry, angle:Float, ?rotationOrigin:Point):Dynamic; function simplify(geometry:Geometry):Dynamic; @:overload(function(leftGeometry:Array<Geometry>, rightGeometry:Geometry):Dynamic { })
	function symmetricDifference(leftGeometry:Geometry, rightGeometry:Geometry):Dynamic; function touches(geometry1:Geometry, geometry2:Geometry):Dynamic; function union(geometries:Array<Geometry>):Dynamic; function within(geometry1:Geometry, geometry2:Geometry):Dynamic; };
}
