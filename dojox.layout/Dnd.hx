extern class Avatar extends dojo.dnd.Avatar {
	function new(manager:Dynamic, opacity:Dynamic):Void;
	var manager : Dynamic;
	function construct():Void;
	function destroy():Void;
	function update():Void;
}
extern class PlottedDnd extends dojo.dnd.Source {
	function new(node:HTMLElement, params:Dynamic):Void;
	var accept : Array<Dynamic>;
	var allowNested : Bool;
	var autoSync : Bool;
	var copyOnly : Bool;
	var current : HTMLElement;
	var delay : Float;
	var GC_OFFSET_X : Dynamic;
	var GC_OFFSET_Y : Dynamic;
	var generateText : Bool;
	var horizontal : Bool;
	var isSource : Bool;
	var map : Dynamic;
	var selection : Dynamic;
	var selfAccept : Bool;
	var selfCopy : Bool;
	var singular : Bool;
	var skipForm : Bool;
	var withHandles : Bool;
	function checkAcceptance(source:Dynamic, nodes:Array<Dynamic>):Bool;
	function clearItems():Void;
	function copyState(keyPressed:Bool, self:Bool):Dynamic;
	function creator():Void;
	function deleteDashedZone():Void;
	function deleteSelectedNodes():haxe.Constraints.Function;
	function delItem(key:String):Void;
	function destroy():Void;
	function emit(type:Dynamic, event:Dynamic):Dynamic;
	function forInItems(f:haxe.Constraints.Function, o:Dynamic):String;
	function forInSelectedItems(f:haxe.Constraints.Function, o:Dynamic):Void;
	function getAllNodes():Dynamic;
	function getDraggedWidget(node:HTMLElement):Dynamic;
	function getItem(key:String):Dynamic;
	function getSelectedNodes():Dynamic;
	function insertDashedZone(before:Bool):Void;
	@:overload(function(addSelected:Bool, data:Array<Dynamic>, before:Bool, anchor:HTMLElement):haxe.Constraints.Function { })
	function insertNodes(data:Dynamic, before:Bool, anchor:HTMLElement):haxe.Constraints.Function;
	function isAccepted(node:HTMLElement):Dynamic;
	function markupFactory(params:Dynamic, node:Dynamic, Ctor:Dynamic):Dynamic;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function selectAll():Dynamic;
	function selectNone():Dynamic;
	function setDndItemSelectable(node:HTMLElement, isSelectable:Bool):Void;
	function setIndicatorPosition(e:Event):Bool;
	function setItem(key:String, data:Dynamic):Void;
	function startup():Void;
	function sync():haxe.Constraints.Function;
	function onDndCancel():Void;
	function onDndDrop(source:Dynamic, nodes:Dynamic, copy:Dynamic, target:Dynamic):Void;
	function onDndSourceOver(source:Dynamic):Void;
	function onDndStart(source:Dynamic, nodes:Array<Dynamic>, copy:Dynamic):Void;
	function onDraggingOut():Void;
	function onDraggingOver():Void;
	function onDrop(source:Dynamic, nodes:Array<Dynamic>, copy:Bool):Void;
	function onDropExternal(source:Dynamic, nodes:Array<Dynamic>, copy:Bool):Void;
	function onDropInternal(nodes:Array<Dynamic>, copy:Bool):Void;
	function onMouseDown(e:Event):Void;
	function onMouseMove(e:Dynamic):Void;
	function onMouseOut(e:Event):Void;
	function onMouseOver(e:Event):Void;
	function onMouseUp(e:Event):Void;
	function onOutEvent():Void;
	function onOverEvent():Void;
	function onSelectStart(e:Event):Void;
}
typedef BorderContainer = { };
typedef RadioGroup = { };
