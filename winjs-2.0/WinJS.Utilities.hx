@:enum abstract Key(Int) {
	var backspace = 0;
	var tab = 1;
	var enter = 2;
	var shift = 3;
	var ctrl = 4;
	var alt = 5;
	var pause = 6;
	var capsLock = 7;
	var escape = 8;
	var space = 9;
	var pageUp = 10;
	var pageDown = 11;
	var end = 12;
	var home = 13;
	var leftArrow = 14;
	var upArrow = 15;
	var rightArrow = 16;
	var downArrow = 17;
	var insert = 18;
	var deleteKey = 19;
	var num0 = 20;
	var num1 = 21;
	var num2 = 22;
	var num3 = 23;
	var num4 = 24;
	var num5 = 25;
	var num6 = 26;
	var num7 = 27;
	var num8 = 28;
	var num9 = 29;
	var a = 30;
	var b = 31;
	var c = 32;
	var d = 33;
	var e = 34;
	var f = 35;
	var g = 36;
	var h = 37;
	var i = 38;
	var j = 39;
	var k = 40;
	var l = 41;
	var m = 42;
	var n = 43;
	var o = 44;
	var p = 45;
	var q = 46;
	var r = 47;
	var s = 48;
	var t = 49;
	var u = 50;
	var v = 51;
	var w = 52;
	var x = 53;
	var y = 54;
	var z = 55;
	var leftWindows = 56;
	var rightWindows = 57;
	var menu = 58;
	var numPad0 = 59;
	var numPad1 = 60;
	var numPad2 = 61;
	var numPad3 = 62;
	var numPad4 = 63;
	var numPad5 = 64;
	var numPad6 = 65;
	var numPad7 = 66;
	var numPad8 = 67;
	var numPad9 = 68;
	var multiply = 69;
	var add = 70;
	var subtract = 71;
	var decimalPoint = 72;
	var divide = 73;
	var F1 = 74;
	var F2 = 75;
	var F3 = 76;
	var F4 = 77;
	var F5 = 78;
	var F6 = 79;
	var F7 = 80;
	var F8 = 81;
	var F9 = 82;
	var F10 = 83;
	var F11 = 84;
	var F12 = 85;
	var numLock = 86;
	var scrollLock = 87;
	var browserBack = 88;
	var browserForward = 89;
	var semicolon = 90;
	var equal = 91;
	var comma = 92;
	var dash = 93;
	var period = 94;
	var forwardSlash = 95;
	var graveAccent = 96;
	var openBracket = 97;
	var backSlash = 98;
	var closeBracket = 99;
	var singleQuote = 100;
}
typedef QueryCollection<T> = {
	>Array<T>,
	function addClass(name:String):QueryCollection<T>;
	function children(element:HTMLElement):QueryCollection<T>;
	function clearStyle(name:String):QueryCollection<T>;
	function control(ctor:Dynamic, ?options:Dynamic):QueryCollection<T>;
	function forEach(callbackFn:T -> Float -> Array<T> -> Void, ?thisArg:Dynamic):QueryCollection<T>;
	function get(index:Float):T;
	function getAttribute(name:String):Dynamic;
	function hasClass(name:String):Bool;
	function id(id:String):QueryCollection<T>;
	@:overload(function(items:Array<T>):Void { })
	@:overload(function(items:HTMLCollection):Void { })
	function include(items:T):Void;
	function listen(eventType:String, listener:haxe.Constraints.Function, ?capture:Bool):Void;
	function query(query:Dynamic):QueryCollection<T>;
	function removeClass(name:String):QueryCollection<T>;
	function removeEventListener(eventType:String, listener:haxe.Constraints.Function, ?capture:Bool):QueryCollection<T>;
	function setAttribute(name:String, value:Dynamic):QueryCollection<T>;
	function setStyle(name:String, value:Dynamic):QueryCollection<T>;
	function template(templateElement:HTMLElement, data:Dynamic, ?renderDonePromiseCallback:haxe.Constraints.Function):QueryCollection<T>;
	function toggleClass(name:String):QueryCollection<T>;
};
typedef ILogOptions = {
	@:optional
	var type : String;
	@:optional
	var action : String -> String -> String -> Void;
	@:optional
	var excludeTags : String;
	@:optional
	var tags : String;
};
typedef IPosition = {
	var left : Float;
	var top : Float;
	var width : Float;
	var height : Float;
};
extern class WinJS.UtilitiesTopLevel {
	static var eventMixin : { function addEventListener(type:String, listener:haxe.Constraints.Function, ?useCapture:Bool):Void; function dispatchEvent(type:String, eventProperties:Dynamic):Bool; function removeEventListener(type:String, listener:haxe.Constraints.Function, ?useCapture:Bool):Void; };
	static var QueryCollection : { function new<T>(items:Array<T>):QueryCollection<T>; var prototype : QueryCollection<Dynamic>; };
	static function addClass<T:(HTMLElement)>(e:T, name:String):T;
	static function children(element:HTMLElement):QueryCollection<HTMLElement>;
	static function convertToPixels(element:HTMLElement, value:String):Float;
	static function createEventProperties(events:haxe.extern.Rest<String>):Dynamic;
	static function data(element:HTMLElement):Dynamic;
	static function disposeSubTree(element:HTMLElement):Void;
	static function empty<T:(HTMLElement)>(element:T):T;
	static function eventWithinElement(element:HTMLElement, event:Event):Bool;
	static function formatLog(message:String, tag:String, type:String):String;
	static function getContentHeight(element:HTMLElement):Float;
	static function getContentWidth(element:HTMLElement):Float;
	static function getMember(name:String, ?root:Dynamic):Dynamic;
	static function getPosition(element:HTMLElement):IPosition;
	static function getRelativeLeft(?element:HTMLElement, ?parent:HTMLElement):Float;
	static function getRelativeTop(?element:HTMLElement, ?parent:HTMLElement):Float;
	static function getTotalHeight(element:HTMLElement):Float;
	static function getTotalWidth(element:HTMLElement):Float;
	static function hasClass(e:HTMLElement, name:String):Bool;
	static function id(id:String):QueryCollection<HTMLElement>;
	static function insertAdjacentHTML(element:HTMLElement, position:String, text:String):Void;
	static function insertAdjacentHTMLUnsafe(element:HTMLElement, position:String, text:String):Void;
	static function markDisposable(element:HTMLElement, ?disposeImpl:haxe.Constraints.Function):Void;
	static function markSupportedForProcessing<U:(haxe.Constraints.Function)>(func:U):U;
	static function query(query:Dynamic, ?element:HTMLElement):QueryCollection<HTMLElement>;
	static function ready(?callback:haxe.Constraints.Function, ?async:Bool):Promise<Dynamic>;
	static function removeClass<T:(HTMLElement)>(e:T, name:String):T;
	static function requireSupportedForProcessing<T>(value:T):T;
	static function setInnerHTML(element:HTMLElement, text:String):Void;
	static function setInnerHTMLUnsafe(element:HTMLElement, text:String):Void;
	static function setOuterHTML(element:HTMLElement, text:String):Void;
	static function setOuterHTMLUnsafe(element:HTMLElement, text:String):Void;
	static function startLog(?options:ILogOptions):Void;
	static function startLog(?tags:String):Void;
	static function stopLog():Void;
	static function toggleClass<T:(HTMLElement)>(e:T, name:String):T;
	static var hasWinRT : Bool;
}
