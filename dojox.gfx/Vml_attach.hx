extern class Circle {
	function new():Void;
	var nodeType : String;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(newShape:Dynamic):haxe.Constraints.Function;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
}
extern class Ellipse {
	function new():Void;
	var nodeType : String;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(newShape:Dynamic):Dynamic;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
}
extern class Image {
	function new():Void;
	var nodeType : String;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(newShape:Dynamic):Dynamic;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
}
extern class Line {
	function new(rawNode:Dynamic):Void;
	var nodeType : String;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(newShape:Dynamic):Dynamic;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
}
extern class Group {
	function new():Void;
	var nodeType : String;
	function add(shape:Dynamic):haxe.Constraints.Function;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function clear():Dynamic;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function createCircle(circle:Dynamic):Dynamic;
	function createEllipse(ellipse:Dynamic):Dynamic;
	function createGroup():Dynamic;
	function createImage(image:Dynamic):Dynamic;
	function createLine(line:Dynamic):Dynamic;
	function createObject(shapeType:haxe.Constraints.Function, rawShape:Dynamic):Dynamic;
	function createPath(path:Dynamic):Dynamic;
	function createPolyline(points:Dynamic):Dynamic;
	function createRect(rect:Dynamic):Dynamic;
	function createShape(shape:Dynamic):Dynamic;
	function createText(text:Dynamic):Dynamic;
	function createTextPath(text:Dynamic):Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function remove(shape:dojox.gfx.shape.Shape, silently:Bool):haxe.Constraints.Function;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(shape:Dynamic):haxe.Constraints.Function;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
}
extern class Polyline {
	function new(rawNode:Dynamic):Void;
	var nodeType : String;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	@:overload(function(points:Array<Dynamic>, closed:Bool):Dynamic { })
	function setShape(points:Dynamic, closed:Bool):Dynamic;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
}
extern class Rect {
	function new():Void;
	var nodeType : String;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(newShape:Dynamic):Dynamic;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
}
extern class Shape {
	function new():Void;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(shape:Dynamic):haxe.Constraints.Function;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
}
extern class Surface {
	function new():Void;
	var isLoaded : Bool;
	var textDir : String;
	function add(shape:Dynamic):haxe.Constraints.Function;
	function clear():Dynamic;
	function closeBatch():haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function createCircle(circle:Dynamic):Dynamic;
	function createEllipse(ellipse:Dynamic):Dynamic;
	function createGroup():Dynamic;
	function createImage(image:Dynamic):Dynamic;
	function createLine(line:Dynamic):Dynamic;
	function createObject(shapeType:haxe.Constraints.Function, rawShape:Dynamic):Dynamic;
	function createPath(path:Dynamic):Dynamic;
	function createPolyline(points:Dynamic):Dynamic;
	function createRect(rect:Dynamic):Dynamic;
	function createShape(shape:Dynamic):Dynamic;
	function createText(text:Dynamic):Dynamic;
	function createTextPath(text:Dynamic):Dynamic;
	function createViewport():Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getBoundingBox():Dynamic;
	function getDimensions():Dynamic;
	function getEventSource():Dynamic;
	function getTextDir():Dynamic;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function openBatch():haxe.Constraints.Function;
	function remove(shape:dojox.gfx.shape.Shape, silently:Bool):haxe.Constraints.Function;
	function setDimensions(width:String, height:String):haxe.Constraints.Function;
	function setTextDir(newTextDir:String):Void;
	@:overload(function(context:Dynamic, method:haxe.Constraints.Function):Void { })
	@:overload(function(context:Dynamic, method:String):Void { })
	@:overload(function(context:Dynamic, method:String):Void { })
	function whenLoaded(context:Dynamic, method:haxe.Constraints.Function):Void;
	function onLoad(surface:dojox.gfx.shape.Surface):Void;
}
extern class Text {
	function new(rawNode:Dynamic):Void;
	var nodeType : String;
	var textDir : String;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function bidiPreprocess(newShape:Dynamic):Dynamic;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function formatText(text:String, textDir:String):Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getFont():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTextWidth():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setFont(newFont:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(newShape:Dynamic):Dynamic;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
}
extern class Path {
	function new(rawNode:Dynamic):Void;
	var nodeType : String;
	var renderers : Dynamic;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function arcTo():haxe.Constraints.Function;
	function closePath():haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function curveTo():haxe.Constraints.Function;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function getAbsoluteMode():Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getLastPosition():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function hLineTo():haxe.Constraints.Function;
	function lineTo():haxe.Constraints.Function;
	function moveTo():haxe.Constraints.Function;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function qCurveTo():haxe.Constraints.Function;
	function qSmoothCurveTo():haxe.Constraints.Function;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setAbsoluteMode(mode:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(newShape:Dynamic):haxe.Constraints.Function;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
	function smoothCurveTo():haxe.Constraints.Function;
	function vLineTo():haxe.Constraints.Function;
}
extern class TextPath {
	function new(rawNode:Dynamic):Void;
	var nodeType : String;
	var renderers : Dynamic;
	var textDir : String;
	function applyLeftTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyRightTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function applyTransform(matrix:dojox.gfx.matrix.Matrix2D):haxe.Constraints.Function;
	function arcTo():haxe.Constraints.Function;
	function bidiPreprocess(newText:Dynamic):Dynamic;
	function closePath():haxe.Constraints.Function;
	function connect(name:Dynamic, object:Dynamic, method:Dynamic):Dynamic;
	function curveTo():haxe.Constraints.Function;
	function destroy():Void;
	function disconnect(token:Dynamic):Dynamic;
	function formatText(text:String, textDir:String):Dynamic;
	function getAbsoluteMode():Dynamic;
	function getBoundingBox():Dynamic;
	function getClip():Dynamic;
	function getEventSource():Dynamic;
	function getFill():Dynamic;
	function getFont():Dynamic;
	function getLastPosition():Dynamic;
	function getNode():Dynamic;
	function getParent():Dynamic;
	function getShape():Dynamic;
	function getStroke():Dynamic;
	function getText():Dynamic;
	function getTransform():Dynamic;
	function getTransformedBoundingBox():Dynamic;
	function hLineTo():haxe.Constraints.Function;
	function lineTo():haxe.Constraints.Function;
	function moveTo():haxe.Constraints.Function;
	function moveToBack():haxe.Constraints.Function;
	function moveToFront():haxe.Constraints.Function;
	function on(type:Dynamic, listener:Dynamic):Dynamic;
	function qCurveTo():haxe.Constraints.Function;
	function qSmoothCurveTo():haxe.Constraints.Function;
	function removeShape(silently:Bool):haxe.Constraints.Function;
	function setAbsoluteMode(mode:Bool):haxe.Constraints.Function;
	function setClip(clip:Dynamic):haxe.Constraints.Function;
	function setFill(fill:Dynamic):haxe.Constraints.Function;
	function setFont(newFont:Dynamic):haxe.Constraints.Function;
	function setRawNode(rawNode:Dynamic):Void;
	function setShape(newShape:Dynamic):haxe.Constraints.Function;
	function setStroke(stroke:Dynamic):haxe.Constraints.Function;
	function setText(newText:Dynamic):haxe.Constraints.Function;
	function setTransform(matrix:dojox.gfx.matrix.Matrix2D):Dynamic;
	function smoothCurveTo():haxe.Constraints.Function;
	function vLineTo():haxe.Constraints.Function;
}
typedef _bool = {
	var t : Float;
	var true : Float;
};
typedef Text_alignment = {
	var end : String;
	var middle : String;
	var start : String;
};
typedef Decompose = { };
