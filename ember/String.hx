extern class StringTopLevel {
	static function camelize(str:String):String;
	static function capitalize(str:String):String;
	static function classify(str:String):String;
	static function dasherize(str:String):String;
	static function decamelize(str:String):String;
	static function fmt(args:haxe.extern.Rest<String>):String;
	static function htmlSafe(str:String):Void;
	static function loc(args:haxe.extern.Rest<String>):String;
	static function underscore(str:String):String;
	static function w(str:String):Array<String>;
	static var TEMPLATES : { };
	static var VERSION : String;
	static var ViewUtils : { };
	static function addBeforeObserver(obj:Dynamic, path:String, target:Dynamic, method:haxe.Constraints.Function):Dynamic;
	static function addListener(obj:Dynamic, eventName:String, target:Dynamic, method:haxe.Constraints.Function, ?once:Bool):Void;
	static function addListener(obj:Dynamic, eventName:String, target:Dynamic, method:String, ?once:Bool):Void;
	static function addListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:haxe.Constraints.Function, ?once:Bool):Void;
	static function addListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:String, ?once:Bool):Void;
	static var addObserver : ModifyObserver;
	static var alias : Dynamic;
	static function aliasMethod(methodName:String):Descriptor;
	static var anyUnprocessedMixins : Bool;
	static function assert(desc:String, test:Bool):Void;
	static function beforeObserver(func:haxe.Constraints.Function, propertyName:String):haxe.Constraints.Function;
	static function beforeObserversFor(obj:Dynamic, path:String):Array<String>;
	static function beginPropertyChanges():Void;
	static function bind(obj:Dynamic, to:String, from:String):Binding;
	static function cacheFor(obj:Dynamic, key:String):Dynamic;
	static function canInvoke(obj:Dynamic, methodName:String):Bool;
	static function changeProperties(callback:haxe.Constraints.Function, ?binding:Dynamic):Void;
	static function compare(v:Dynamic, w:Dynamic):Float;
	static var computed : { function alias(dependentKey:String):ComputedProperty; function and(args:haxe.extern.Rest<String>):ComputedProperty; function any(args:haxe.extern.Rest<String>):ComputedProperty; function bool(dependentKey:String):ComputedProperty; function defaultTo(defaultPath:String):ComputedProperty; function empty(dependentKey:String):ComputedProperty; function equal(dependentKey:String, value:Dynamic):ComputedProperty; function gt(dependentKey:String, value:Float):ComputedProperty; function gte(dependentKey:String, value:Float):ComputedProperty; function lt(dependentKey:String, value:Float):ComputedProperty; function lte(dependentKey:String, value:Float):ComputedProperty; function map(args:haxe.extern.Rest<String>):ComputedProperty; function match(dependentKey:String, regexp:js.RegExp):ComputedProperty; function none(dependentKey:String):ComputedProperty; function not(dependentKey:String):ComputedProperty; function notEmpty(dependentKey:String):ComputedProperty; function oneWay(dependentKey:String):ComputedProperty; function or(args:haxe.extern.Rest<String>):ComputedProperty; };
	static var config : { };
	static function controllerFor(container:Container, controllerName:String, ?lookupOptions:{ }):Controller;
	static function copy(obj:Dynamic, deep:Bool):Dynamic;
	static function create(?arguments:{ }):CoreObject;
	static function debug(message:String):Void;
	static function defineProperty(obj:Dynamic, keyName:String, desc:{ }):Void;
	static function deprecate(message:String, ?test:Bool):Void;
	static function deprecateFunc(message:String, func:haxe.Constraints.Function):haxe.Constraints.Function;
	static function destroy(obj:Dynamic):Void;
	static var empty : Dynamic;
	static function endPropertyChanges():Void;
	static var exports : { };
	static function finishChains(obj:Dynamic):Void;
	static function flushPendingChains():Void;
	static function generateController(container:Container, controllerName:String, context:Dynamic):Controller;
	static function generateGuid(obj:Dynamic, ?prefix:String):String;
	static function get(obj:Dynamic, keyName:String):Dynamic;
	static function getMeta(obj:Dynamic, property:String):Dynamic;
	static var getPath : Dynamic;
	static function getWithDefault(root:String, key:String, defaultValue:Dynamic):Dynamic;
	static function guidFor(obj:Dynamic):String;
	static function handleErrors(func:haxe.Constraints.Function, context:Dynamic):Dynamic;
	static function hasListeners(context:Dynamic, name:String):Bool;
	static function hasOwnProperty(prop:String):Bool;
	static function immediateObserver(func:haxe.Constraints.Function, propertyNames:haxe.extern.Rest<Dynamic>):haxe.Constraints.Function;
	static var imports : { };
	static function inspect(obj:Dynamic):String;
	static function instrument(name:String, payload:Dynamic, callback:haxe.Constraints.Function, binding:Dynamic):Void;
	static function isArray(obj:Dynamic):Bool;
	static function isEmpty(obj:Dynamic):Bool;
	static function isEqual(a:Dynamic, b:Dynamic):Bool;
	static function isGlobalPath(path:String):Bool;
	static var isNamespace : Bool;
	static function isNone(obj:Dynamic):Bool;
	static function isPrototypeOf(obj:{ }):Bool;
	static function isWatching(obj:Dynamic, key:String):Bool;
	static function keys(obj:Dynamic):Array<Dynamic>;
	static function listenersDiff(obj:Dynamic, eventName:String, otherActions:Array<Dynamic>):Array<Dynamic>;
	static function listenersFor(obj:Dynamic, eventName:String):Array<Dynamic>;
	static function listenersUnion(obj:Dynamic, eventName:String, otherActions:Array<Dynamic>):Void;
	static var lookup : { };
	static function makeArray(obj:Dynamic):Array<Dynamic>;
	static function merge(original:Dynamic, updates:Dynamic):Dynamic;
	static function meta(obj:Dynamic, ?writable:Bool):{ };
	static function metaPath(obj:Dynamic, path:String, ?writable:Bool):Dynamic;
	static function mixin(obj:Dynamic, args:haxe.extern.Rest<Dynamic>):Dynamic;
	static var none : Dynamic;
	static function normalizeTuple(target:Dynamic, path:String):Array<Dynamic>;
	static function observer(args:haxe.extern.Rest<Dynamic>):haxe.Constraints.Function;
	static function observersFor(obj:Dynamic, path:String):Array<Dynamic>;
	static function onLoad(name:String, callback:haxe.Constraints.Function):Void;
	static function oneWay(obj:Dynamic, to:String, from:String):Binding;
	static var onError : Error;
	static function overrideChains(obj:Dynamic, keyName:String, m:Dynamic):Bool;
	static var platform : { var addBeforeObserver : ModifyObserver; var addObserver : ModifyObserver; function defineProperty(obj:Dynamic, keyName:String, desc:{ }):Void; var removeBeforeObserver : ModifyObserver; var removeObserver : ModifyObserver; var hasPropertyAccessors : Bool; };
	static function propertyDidChange(obj:Dynamic, keyName:String):Void;
	static function propertyIsEnumerable(prop:String):Bool;
	static function propertyWillChange(obj:Dynamic, keyName:String):Void;
	static function removeBeforeObserver(obj:Dynamic, path:String, target:Dynamic, method:haxe.Constraints.Function):Dynamic;
	static function removeChainWatcher(obj:Dynamic, keyName:String, node:Dynamic):Void;
	static function removeListener(obj:Dynamic, eventName:String, target:Dynamic, method:haxe.Constraints.Function):Void;
	static function removeListener(obj:Dynamic, eventName:String, target:Dynamic, method:String):Void;
	static function removeListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:haxe.Constraints.Function):Void;
	static function removeListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:String):Void;
	static function removeObserver(obj:Dynamic, path:String, target:Dynamic, method:haxe.Constraints.Function):Dynamic;
	static function required():Descriptor;
	static function rewatch(obj:Dynamic):Void;
	static var run : { function begin():Void; function cancel(timer:Dynamic):Void; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function debounce(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; function end():Void; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Dynamic { })
	function join(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Dynamic; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):String { })
	function later(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):String; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Float { })
	function next(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Float; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Float { })
	function once(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Float; @:overload(function(queue:String, target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function schedule(queue:String, target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; @:overload(function(queue:String, target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function scheduleOnce(queue:String, target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; function sync():Void; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function throttle(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; var queues : Array<Dynamic>; };
	static function runLoadHooks(name:String, object:Dynamic):Void;
	static function sendEvent(obj:Dynamic, eventName:String, ?params:Array<Dynamic>, ?actions:Array<Dynamic>):Bool;
	static function set(obj:Dynamic, keyName:String, value:Dynamic):Dynamic;
	static function setMeta(obj:Dynamic, property:String, value:Dynamic):Void;
	static var setPath : Dynamic;
	static function setProperties(self:Dynamic, hash:{ }):Dynamic;
	static function subscribe(pattern:String, object:Dynamic):Void;
	static function toLocaleString():String;
	static function toString():String;
	static function tryCatchFinally(tryable:haxe.Constraints.Function, catchable:haxe.Constraints.Function, finalizer:haxe.Constraints.Function, ?binding:Dynamic):Dynamic;
	static function tryFinally(tryable:haxe.Constraints.Function, finalizer:haxe.Constraints.Function, ?binding:Dynamic):Dynamic;
	static function tryInvoke(obj:Dynamic, methodName:String, ?args:Array<Dynamic>):Dynamic;
	static function trySet(obj:Dynamic, path:String, value:Dynamic):Void;
	static var trySetPath : Dynamic;
	static function typeOf(item:Dynamic):String;
	static function unwatch(obj:Dynamic, keyPath:String):Void;
	static function unwatchKey(obj:Dynamic, keyName:String):Void;
	static function unwatchPath(obj:Dynamic, keyPath:String):Void;
	static var uuid : Float;
	static function valueOf():{ };
	static function warn(message:String, ?test:Bool):Void;
	static function watch(obj:Dynamic, keyPath:String):Void;
	static function watchKey(obj:Dynamic, keyName:String):Void;
	static function watchPath(obj:Dynamic, keyPath:String):Void;
	static function watchedEvents(obj:{ }):Array<Dynamic>;
	static function wrap(func:haxe.Constraints.Function, superFunc:haxe.Constraints.Function):haxe.Constraints.Function;
	static var camelize : Dynamic;
	static var capitalize : Dynamic;
	static var classify : Dynamic;
	static var dasherize : Dynamic;
	static var decamelize : Dynamic;
	static var fmt : Dynamic;
	static var htmlSafe : Dynamic;
	static var loc : Dynamic;
	static var underscore : Dynamic;
	static var w : Dynamic;
	static var TEMPLATES : Dynamic;
	static var VERSION : Dynamic;
	static var ViewUtils : Dynamic;
	static var addBeforeObserver : Dynamic;
	static var addListener : Dynamic;
	static var addObserver : Dynamic;
	static var alias : Dynamic;
	static var aliasMethod : Dynamic;
	static var anyUnprocessedMixins : Dynamic;
	static var assert : Dynamic;
	static var beforeObserver : Dynamic;
	static var beforeObserversFor : Dynamic;
	static var beginPropertyChanges : Dynamic;
	static var bind : Dynamic;
	static var cacheFor : Dynamic;
	static var canInvoke : Dynamic;
	static var changeProperties : Dynamic;
	static var compare : Dynamic;
	static var computed : Dynamic;
	static var config : Dynamic;
	static var controllerFor : Dynamic;
	static var copy : Dynamic;
	static var create : Dynamic;
	static var debug : Dynamic;
	static var defineProperty : Dynamic;
	static var deprecate : Dynamic;
	static var deprecateFunc : Dynamic;
	static var destroy : Dynamic;
	static var empty : Dynamic;
	static var endPropertyChanges : Dynamic;
	static var exports : Dynamic;
	static var finishChains : Dynamic;
	static var flushPendingChains : Dynamic;
	static var generateController : Dynamic;
	static var generateGuid : Dynamic;
	static var get : Dynamic;
	static var getMeta : Dynamic;
	static var getPath : Dynamic;
	static var getWithDefault : Dynamic;
	static var guidFor : Dynamic;
	static var handleErrors : Dynamic;
	static var hasListeners : Dynamic;
	static var hasOwnProperty : Dynamic;
	static var immediateObserver : Dynamic;
	static var imports : Dynamic;
	static var inspect : Dynamic;
	static var instrument : Dynamic;
	static var isArray : Dynamic;
	static var isEmpty : Dynamic;
	static var isEqual : Dynamic;
	static var isGlobalPath : Dynamic;
	static var isNamespace : Dynamic;
	static var isNone : Dynamic;
	static var isPrototypeOf : Dynamic;
	static var isWatching : Dynamic;
	static var keys : Dynamic;
	static var listenersDiff : Dynamic;
	static var listenersFor : Dynamic;
	static var listenersUnion : Dynamic;
	static var lookup : Dynamic;
	static var makeArray : Dynamic;
	static var merge : Dynamic;
	static var meta : Dynamic;
	static var metaPath : Dynamic;
	static var mixin : Dynamic;
	static var none : Dynamic;
	static var normalizeTuple : Dynamic;
	static var observer : Dynamic;
	static var observersFor : Dynamic;
	static var onLoad : Dynamic;
	static var oneWay : Dynamic;
	static var onError : Dynamic;
	static var overrideChains : Dynamic;
	static var platform : Dynamic;
	static var propertyDidChange : Dynamic;
	static var propertyIsEnumerable : Dynamic;
	static var propertyWillChange : Dynamic;
	static var removeBeforeObserver : Dynamic;
	static var removeChainWatcher : Dynamic;
	static var removeListener : Dynamic;
	static var removeObserver : Dynamic;
	static var required : Dynamic;
	static var rewatch : Dynamic;
	static var run : Dynamic;
	static var runLoadHooks : Dynamic;
	static var sendEvent : Dynamic;
	static var set : Dynamic;
	static var setMeta : Dynamic;
	static var setPath : Dynamic;
	static var setProperties : Dynamic;
	static var subscribe : Dynamic;
	static var toLocaleString : Dynamic;
	static var toString : Dynamic;
	static var tryCatchFinally : Dynamic;
	static var tryFinally : Dynamic;
	static var tryInvoke : Dynamic;
	static var trySet : Dynamic;
	static var trySetPath : Dynamic;
	static var typeOf : Dynamic;
	static var unwatch : Dynamic;
	static var unwatchKey : Dynamic;
	static var unwatchPath : Dynamic;
	static var uuid : Dynamic;
	static var valueOf : Dynamic;
	static var warn : Dynamic;
	static var watch : Dynamic;
	static var watchKey : Dynamic;
	static var watchPath : Dynamic;
	static var watchedEvents : Dynamic;
	static var wrap : Dynamic;
	static var camelize : Dynamic;
	static var capitalize : Dynamic;
	static var classify : Dynamic;
	static var dasherize : Dynamic;
	static var decamelize : Dynamic;
	static var fmt : Dynamic;
	static var htmlSafe : Dynamic;
	static var loc : Dynamic;
	static var underscore : Dynamic;
	static var w : Dynamic;
	static var TEMPLATES : Dynamic;
	static var VERSION : Dynamic;
	static var ViewUtils : Dynamic;
	static var addBeforeObserver : Dynamic;
	static var addListener : Dynamic;
	static var addObserver : Dynamic;
	static var alias : Dynamic;
	static var aliasMethod : Dynamic;
	static var anyUnprocessedMixins : Dynamic;
	static var assert : Dynamic;
	static var beforeObserver : Dynamic;
	static var beforeObserversFor : Dynamic;
	static var beginPropertyChanges : Dynamic;
	static var bind : Dynamic;
	static var cacheFor : Dynamic;
	static var canInvoke : Dynamic;
	static var changeProperties : Dynamic;
	static var compare : Dynamic;
	static var computed : Dynamic;
	static var config : Dynamic;
	static var controllerFor : Dynamic;
	static var copy : Dynamic;
	static var create : Dynamic;
	static var debug : Dynamic;
	static var defineProperty : Dynamic;
	static var deprecate : Dynamic;
	static var deprecateFunc : Dynamic;
	static var destroy : Dynamic;
	static var empty : Dynamic;
	static var endPropertyChanges : Dynamic;
	static var exports : Dynamic;
	static var finishChains : Dynamic;
	static var flushPendingChains : Dynamic;
	static var generateController : Dynamic;
	static var generateGuid : Dynamic;
	static var get : Dynamic;
	static var getMeta : Dynamic;
	static var getPath : Dynamic;
	static var getWithDefault : Dynamic;
	static var guidFor : Dynamic;
	static var handleErrors : Dynamic;
	static var hasListeners : Dynamic;
	static var hasOwnProperty : Dynamic;
	static var immediateObserver : Dynamic;
	static var imports : Dynamic;
	static var inspect : Dynamic;
	static var instrument : Dynamic;
	static var isArray : Dynamic;
	static var isEmpty : Dynamic;
	static var isEqual : Dynamic;
	static var isGlobalPath : Dynamic;
	static var isNamespace : Dynamic;
	static var isNone : Dynamic;
	static var isPrototypeOf : Dynamic;
	static var isWatching : Dynamic;
	static var keys : Dynamic;
	static var listenersDiff : Dynamic;
	static var listenersFor : Dynamic;
	static var listenersUnion : Dynamic;
	static var lookup : Dynamic;
	static var makeArray : Dynamic;
	static var merge : Dynamic;
	static var meta : Dynamic;
	static var metaPath : Dynamic;
	static var mixin : Dynamic;
	static var none : Dynamic;
	static var normalizeTuple : Dynamic;
	static var observer : Dynamic;
	static var observersFor : Dynamic;
	static var onLoad : Dynamic;
	static var oneWay : Dynamic;
	static var onError : Dynamic;
	static var overrideChains : Dynamic;
	static var platform : Dynamic;
	static var propertyDidChange : Dynamic;
	static var propertyIsEnumerable : Dynamic;
	static var propertyWillChange : Dynamic;
	static var removeBeforeObserver : Dynamic;
	static var removeChainWatcher : Dynamic;
	static var removeListener : Dynamic;
	static var removeObserver : Dynamic;
	static var required : Dynamic;
	static var rewatch : Dynamic;
	static var run : Dynamic;
	static var runLoadHooks : Dynamic;
	static var sendEvent : Dynamic;
	static var set : Dynamic;
	static var setMeta : Dynamic;
	static var setPath : Dynamic;
	static var setProperties : Dynamic;
	static var subscribe : Dynamic;
	static var toLocaleString : Dynamic;
	static var toString : Dynamic;
	static var tryCatchFinally : Dynamic;
	static var tryFinally : Dynamic;
	static var tryInvoke : Dynamic;
	static var trySet : Dynamic;
	static var trySetPath : Dynamic;
	static var typeOf : Dynamic;
	static var unwatch : Dynamic;
	static var unwatchKey : Dynamic;
	static var unwatchPath : Dynamic;
	static var uuid : Dynamic;
	static var valueOf : Dynamic;
	static var warn : Dynamic;
	static var watch : Dynamic;
	static var watchKey : Dynamic;
	static var watchPath : Dynamic;
	static var watchedEvents : Dynamic;
	static var wrap : Dynamic;
}
extern class TargetActionSupport {
	function triggerAction(opts:{ }):Bool;
}
extern class Test {
	function click(selector:String):RSVP.Promise;
	function fillin(selector:String, text:String):RSVP.Promise;
	function find(selector:String):JQuery;
	function findWithAssert(selector:String):JQuery;
	function injectTestHelpers():Void;
	function keyEvent(selector:String, type:String, keyCode:Float):RSVP.Promise;
	static function oninjectHelpers(callback:haxe.Constraints.Function):Void;
	static function promise(resolver:haxe.Constraints.Function):RSVP.Promise;
	static function registerHelper(name:String, helperMethod:haxe.Constraints.Function):Void;
	function removeTestHelpers():Void;
	function setupForTesting():Void;
	static function unregisterHelper(name:String):Void;
	function visit(url:String):RSVP.Promise;
	function wait(value:Dynamic):RSVP.Promise;
	static var adapter : Dynamic;
	var testHelpers : { };
}
extern class TextArea extends View {
	static function detect(obj:Dynamic):Bool;
	static function detectInstance(obj:Dynamic):Bool;
	static function eachComputedProperty(callback:haxe.Constraints.Function, binding:{ }):Void;
	static function metaForProperty(key:String):{ };
	static var isClass : Bool;
	static var isMethod : Bool;
	function cancel(event:haxe.Constraints.Function):Void;
	function focusIn(event:haxe.Constraints.Function):Void;
	function focusOut(event:haxe.Constraints.Function):Void;
	function insertNewLine(event:haxe.Constraints.Function):Void;
	function keyPress(event:haxe.Constraints.Function):Void;
	var action : String;
	var bubbles : Bool;
	var onEvent : String;
}
extern class TextField extends View {
	static function detect(obj:Dynamic):Bool;
	static function detectInstance(obj:Dynamic):Bool;
	static function eachComputedProperty(callback:haxe.Constraints.Function, binding:{ }):Void;
	static function metaForProperty(key:String):{ };
	static var isClass : Bool;
	static var isMethod : Bool;
	function cancel(event:haxe.Constraints.Function):Void;
	function focusIn(event:haxe.Constraints.Function):Void;
	function focusOut(event:haxe.Constraints.Function):Void;
	function insertNewLine(event:haxe.Constraints.Function):Void;
	function keyPress(event:haxe.Constraints.Function):Void;
	var action : String;
	var bubbles : Bool;
	var onEvent : String;
	var pattern : String;
	var size : String;
	var type : String;
	var value : String;
}
extern class TextSupport {
	function cancel(event:haxe.Constraints.Function):Void;
	function focusIn(event:haxe.Constraints.Function):Void;
	function focusOut(event:haxe.Constraints.Function):Void;
	function insertNewLine(event:haxe.Constraints.Function):Void;
	function keyPress(event:haxe.Constraints.Function):Void;
	var action : String;
	var bubbles : Bool;
	var onEvent : String;
}
extern class View extends CoreView {
	static function detect(obj:Dynamic):Bool;
	static function detectInstance(obj:Dynamic):Bool;
	static function eachComputedProperty(callback:haxe.Constraints.Function, binding:{ }):Void;
	static function metaForProperty(key:String):{ };
	static var isClass : Bool;
	static var isMethod : Bool;
	function $():JQuery;
	function append():View;
	@:overload(function(A:HTMLElement):View { })
	@:overload(function(A:JQuery):View { })
	function appendTo(A:String):View;
	@:overload(function(viewClass:String, ?attrs:{ }):View { })
	function createChildView(viewClass:{ }, ?attrs:{ }):View;
	function createElement():View;
	function destroy():View;
	function destroyElement():View;
	function findElementInParentElement(parentElement:HTMLElement):HTMLElement;
	function remove():View;
	function removeAllChildren():View;
	function removeChild(view:View):View;
	function removeFromParent():View;
	function render(buffer:RenderBuffer):Void;
	@:overload(function(A:HTMLElement):View { })
	@:overload(function(A:JQuery):View { })
	function replaceIn(A:String):View;
	function rerender():Void;
	var ariaRole : String;
	var attributeBindings : Dynamic;
	var classNameBindings : Array<String>;
	var classNames : Array<String>;
	var context : Dynamic;
	var controller : Dynamic;
	var element : HTMLElement;
	var isView : Bool;
	var isVisible : Bool;
	var layout : haxe.Constraints.Function;
	var layoutName : String;
	var nearestChildOf : View;
	var nearestOfType : View;
	var nearestWithProperty : View;
	var tagName : String;
	var template : haxe.Constraints.Function;
	var templateName : String;
	var templates : { };
	var views : { };
	var didInsertElement : haxe.Constraints.Function;
	var parentViewDidChange : haxe.Constraints.Function;
	var willClearRender : haxe.Constraints.Function;
	var willDestroyElement : haxe.Constraints.Function;
	var willInsertElement : haxe.Constraints.Function;
}
extern class ViewTargetActionSupport extends Mixin {
	var target : Dynamic;
	var actionContext : Dynamic;
}
extern class StringTopLevel {
	static function camelize(str:String):String;
	static function capitalize(str:String):String;
	static function classify(str:String):String;
	static function dasherize(str:String):String;
	static function decamelize(str:String):String;
	static function fmt(args:haxe.extern.Rest<String>):String;
	static function htmlSafe(str:String):Void;
	static function loc(args:haxe.extern.Rest<String>):String;
	static function underscore(str:String):String;
	static function w(str:String):Array<String>;
	static var TEMPLATES : { };
	static var VERSION : String;
	static var ViewUtils : { };
	static function addBeforeObserver(obj:Dynamic, path:String, target:Dynamic, method:haxe.Constraints.Function):Dynamic;
	static function addListener(obj:Dynamic, eventName:String, target:Dynamic, method:haxe.Constraints.Function, ?once:Bool):Void;
	static function addListener(obj:Dynamic, eventName:String, target:Dynamic, method:String, ?once:Bool):Void;
	static function addListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:haxe.Constraints.Function, ?once:Bool):Void;
	static function addListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:String, ?once:Bool):Void;
	static var addObserver : ModifyObserver;
	static var alias : Dynamic;
	static function aliasMethod(methodName:String):Descriptor;
	static var anyUnprocessedMixins : Bool;
	static function assert(desc:String, test:Bool):Void;
	static function beforeObserver(func:haxe.Constraints.Function, propertyName:String):haxe.Constraints.Function;
	static function beforeObserversFor(obj:Dynamic, path:String):Array<String>;
	static function beginPropertyChanges():Void;
	static function bind(obj:Dynamic, to:String, from:String):Binding;
	static function cacheFor(obj:Dynamic, key:String):Dynamic;
	static function canInvoke(obj:Dynamic, methodName:String):Bool;
	static function changeProperties(callback:haxe.Constraints.Function, ?binding:Dynamic):Void;
	static function compare(v:Dynamic, w:Dynamic):Float;
	static var computed : { function alias(dependentKey:String):ComputedProperty; function and(args:haxe.extern.Rest<String>):ComputedProperty; function any(args:haxe.extern.Rest<String>):ComputedProperty; function bool(dependentKey:String):ComputedProperty; function defaultTo(defaultPath:String):ComputedProperty; function empty(dependentKey:String):ComputedProperty; function equal(dependentKey:String, value:Dynamic):ComputedProperty; function gt(dependentKey:String, value:Float):ComputedProperty; function gte(dependentKey:String, value:Float):ComputedProperty; function lt(dependentKey:String, value:Float):ComputedProperty; function lte(dependentKey:String, value:Float):ComputedProperty; function map(args:haxe.extern.Rest<String>):ComputedProperty; function match(dependentKey:String, regexp:js.RegExp):ComputedProperty; function none(dependentKey:String):ComputedProperty; function not(dependentKey:String):ComputedProperty; function notEmpty(dependentKey:String):ComputedProperty; function oneWay(dependentKey:String):ComputedProperty; function or(args:haxe.extern.Rest<String>):ComputedProperty; };
	static var config : { };
	static function controllerFor(container:Container, controllerName:String, ?lookupOptions:{ }):Controller;
	static function copy(obj:Dynamic, deep:Bool):Dynamic;
	static function create(?arguments:{ }):CoreObject;
	static function debug(message:String):Void;
	static function defineProperty(obj:Dynamic, keyName:String, desc:{ }):Void;
	static function deprecate(message:String, ?test:Bool):Void;
	static function deprecateFunc(message:String, func:haxe.Constraints.Function):haxe.Constraints.Function;
	static function destroy(obj:Dynamic):Void;
	static var empty : Dynamic;
	static function endPropertyChanges():Void;
	static var exports : { };
	static function finishChains(obj:Dynamic):Void;
	static function flushPendingChains():Void;
	static function generateController(container:Container, controllerName:String, context:Dynamic):Controller;
	static function generateGuid(obj:Dynamic, ?prefix:String):String;
	static function get(obj:Dynamic, keyName:String):Dynamic;
	static function getMeta(obj:Dynamic, property:String):Dynamic;
	static var getPath : Dynamic;
	static function getWithDefault(root:String, key:String, defaultValue:Dynamic):Dynamic;
	static function guidFor(obj:Dynamic):String;
	static function handleErrors(func:haxe.Constraints.Function, context:Dynamic):Dynamic;
	static function hasListeners(context:Dynamic, name:String):Bool;
	static function hasOwnProperty(prop:String):Bool;
	static function immediateObserver(func:haxe.Constraints.Function, propertyNames:haxe.extern.Rest<Dynamic>):haxe.Constraints.Function;
	static var imports : { };
	static function inspect(obj:Dynamic):String;
	static function instrument(name:String, payload:Dynamic, callback:haxe.Constraints.Function, binding:Dynamic):Void;
	static function isArray(obj:Dynamic):Bool;
	static function isEmpty(obj:Dynamic):Bool;
	static function isEqual(a:Dynamic, b:Dynamic):Bool;
	static function isGlobalPath(path:String):Bool;
	static var isNamespace : Bool;
	static function isNone(obj:Dynamic):Bool;
	static function isPrototypeOf(obj:{ }):Bool;
	static function isWatching(obj:Dynamic, key:String):Bool;
	static function keys(obj:Dynamic):Array<Dynamic>;
	static function listenersDiff(obj:Dynamic, eventName:String, otherActions:Array<Dynamic>):Array<Dynamic>;
	static function listenersFor(obj:Dynamic, eventName:String):Array<Dynamic>;
	static function listenersUnion(obj:Dynamic, eventName:String, otherActions:Array<Dynamic>):Void;
	static var lookup : { };
	static function makeArray(obj:Dynamic):Array<Dynamic>;
	static function merge(original:Dynamic, updates:Dynamic):Dynamic;
	static function meta(obj:Dynamic, ?writable:Bool):{ };
	static function metaPath(obj:Dynamic, path:String, ?writable:Bool):Dynamic;
	static function mixin(obj:Dynamic, args:haxe.extern.Rest<Dynamic>):Dynamic;
	static var none : Dynamic;
	static function normalizeTuple(target:Dynamic, path:String):Array<Dynamic>;
	static function observer(args:haxe.extern.Rest<Dynamic>):haxe.Constraints.Function;
	static function observersFor(obj:Dynamic, path:String):Array<Dynamic>;
	static function onLoad(name:String, callback:haxe.Constraints.Function):Void;
	static function oneWay(obj:Dynamic, to:String, from:String):Binding;
	static var onError : Error;
	static function overrideChains(obj:Dynamic, keyName:String, m:Dynamic):Bool;
	static var platform : { var addBeforeObserver : ModifyObserver; var addObserver : ModifyObserver; function defineProperty(obj:Dynamic, keyName:String, desc:{ }):Void; var removeBeforeObserver : ModifyObserver; var removeObserver : ModifyObserver; var hasPropertyAccessors : Bool; };
	static function propertyDidChange(obj:Dynamic, keyName:String):Void;
	static function propertyIsEnumerable(prop:String):Bool;
	static function propertyWillChange(obj:Dynamic, keyName:String):Void;
	static function removeBeforeObserver(obj:Dynamic, path:String, target:Dynamic, method:haxe.Constraints.Function):Dynamic;
	static function removeChainWatcher(obj:Dynamic, keyName:String, node:Dynamic):Void;
	static function removeListener(obj:Dynamic, eventName:String, target:Dynamic, method:haxe.Constraints.Function):Void;
	static function removeListener(obj:Dynamic, eventName:String, target:Dynamic, method:String):Void;
	static function removeListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:haxe.Constraints.Function):Void;
	static function removeListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:String):Void;
	static function removeObserver(obj:Dynamic, path:String, target:Dynamic, method:haxe.Constraints.Function):Dynamic;
	static function required():Descriptor;
	static function rewatch(obj:Dynamic):Void;
	static var run : { function begin():Void; function cancel(timer:Dynamic):Void; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function debounce(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; function end():Void; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Dynamic { })
	function join(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Dynamic; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):String { })
	function later(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):String; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Float { })
	function next(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Float; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Float { })
	function once(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Float; @:overload(function(queue:String, target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function schedule(queue:String, target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; @:overload(function(queue:String, target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function scheduleOnce(queue:String, target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; function sync():Void; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function throttle(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; var queues : Array<Dynamic>; };
	static function runLoadHooks(name:String, object:Dynamic):Void;
	static function sendEvent(obj:Dynamic, eventName:String, ?params:Array<Dynamic>, ?actions:Array<Dynamic>):Bool;
	static function set(obj:Dynamic, keyName:String, value:Dynamic):Dynamic;
	static function setMeta(obj:Dynamic, property:String, value:Dynamic):Void;
	static var setPath : Dynamic;
	static function setProperties(self:Dynamic, hash:{ }):Dynamic;
	static function subscribe(pattern:String, object:Dynamic):Void;
	static function toLocaleString():String;
	static function toString():String;
	static function tryCatchFinally(tryable:haxe.Constraints.Function, catchable:haxe.Constraints.Function, finalizer:haxe.Constraints.Function, ?binding:Dynamic):Dynamic;
	static function tryFinally(tryable:haxe.Constraints.Function, finalizer:haxe.Constraints.Function, ?binding:Dynamic):Dynamic;
	static function tryInvoke(obj:Dynamic, methodName:String, ?args:Array<Dynamic>):Dynamic;
	static function trySet(obj:Dynamic, path:String, value:Dynamic):Void;
	static var trySetPath : Dynamic;
	static function typeOf(item:Dynamic):String;
	static function unwatch(obj:Dynamic, keyPath:String):Void;
	static function unwatchKey(obj:Dynamic, keyName:String):Void;
	static function unwatchPath(obj:Dynamic, keyPath:String):Void;
	static var uuid : Float;
	static function valueOf():{ };
	static function warn(message:String, ?test:Bool):Void;
	static function watch(obj:Dynamic, keyPath:String):Void;
	static function watchKey(obj:Dynamic, keyName:String):Void;
	static function watchPath(obj:Dynamic, keyPath:String):Void;
	static function watchedEvents(obj:{ }):Array<Dynamic>;
	static function wrap(func:haxe.Constraints.Function, superFunc:haxe.Constraints.Function):haxe.Constraints.Function;
	static var camelize : Dynamic;
	static var capitalize : Dynamic;
	static var classify : Dynamic;
	static var dasherize : Dynamic;
	static var decamelize : Dynamic;
	static var fmt : Dynamic;
	static var htmlSafe : Dynamic;
	static var loc : Dynamic;
	static var underscore : Dynamic;
	static var w : Dynamic;
	static var TEMPLATES : Dynamic;
	static var VERSION : Dynamic;
	static var ViewUtils : Dynamic;
	static var addBeforeObserver : Dynamic;
	static var addListener : Dynamic;
	static var addObserver : Dynamic;
	static var alias : Dynamic;
	static var aliasMethod : Dynamic;
	static var anyUnprocessedMixins : Dynamic;
	static var assert : Dynamic;
	static var beforeObserver : Dynamic;
	static var beforeObserversFor : Dynamic;
	static var beginPropertyChanges : Dynamic;
	static var bind : Dynamic;
	static var cacheFor : Dynamic;
	static var canInvoke : Dynamic;
	static var changeProperties : Dynamic;
	static var compare : Dynamic;
	static var computed : Dynamic;
	static var config : Dynamic;
	static var controllerFor : Dynamic;
	static var copy : Dynamic;
	static var create : Dynamic;
	static var debug : Dynamic;
	static var defineProperty : Dynamic;
	static var deprecate : Dynamic;
	static var deprecateFunc : Dynamic;
	static var destroy : Dynamic;
	static var empty : Dynamic;
	static var endPropertyChanges : Dynamic;
	static var exports : Dynamic;
	static var finishChains : Dynamic;
	static var flushPendingChains : Dynamic;
	static var generateController : Dynamic;
	static var generateGuid : Dynamic;
	static var get : Dynamic;
	static var getMeta : Dynamic;
	static var getPath : Dynamic;
	static var getWithDefault : Dynamic;
	static var guidFor : Dynamic;
	static var handleErrors : Dynamic;
	static var hasListeners : Dynamic;
	static var hasOwnProperty : Dynamic;
	static var immediateObserver : Dynamic;
	static var imports : Dynamic;
	static var inspect : Dynamic;
	static var instrument : Dynamic;
	static var isArray : Dynamic;
	static var isEmpty : Dynamic;
	static var isEqual : Dynamic;
	static var isGlobalPath : Dynamic;
	static var isNamespace : Dynamic;
	static var isNone : Dynamic;
	static var isPrototypeOf : Dynamic;
	static var isWatching : Dynamic;
	static var keys : Dynamic;
	static var listenersDiff : Dynamic;
	static var listenersFor : Dynamic;
	static var listenersUnion : Dynamic;
	static var lookup : Dynamic;
	static var makeArray : Dynamic;
	static var merge : Dynamic;
	static var meta : Dynamic;
	static var metaPath : Dynamic;
	static var mixin : Dynamic;
	static var none : Dynamic;
	static var normalizeTuple : Dynamic;
	static var observer : Dynamic;
	static var observersFor : Dynamic;
	static var onLoad : Dynamic;
	static var oneWay : Dynamic;
	static var onError : Dynamic;
	static var overrideChains : Dynamic;
	static var platform : Dynamic;
	static var propertyDidChange : Dynamic;
	static var propertyIsEnumerable : Dynamic;
	static var propertyWillChange : Dynamic;
	static var removeBeforeObserver : Dynamic;
	static var removeChainWatcher : Dynamic;
	static var removeListener : Dynamic;
	static var removeObserver : Dynamic;
	static var required : Dynamic;
	static var rewatch : Dynamic;
	static var run : Dynamic;
	static var runLoadHooks : Dynamic;
	static var sendEvent : Dynamic;
	static var set : Dynamic;
	static var setMeta : Dynamic;
	static var setPath : Dynamic;
	static var setProperties : Dynamic;
	static var subscribe : Dynamic;
	static var toLocaleString : Dynamic;
	static var toString : Dynamic;
	static var tryCatchFinally : Dynamic;
	static var tryFinally : Dynamic;
	static var tryInvoke : Dynamic;
	static var trySet : Dynamic;
	static var trySetPath : Dynamic;
	static var typeOf : Dynamic;
	static var unwatch : Dynamic;
	static var unwatchKey : Dynamic;
	static var unwatchPath : Dynamic;
	static var uuid : Dynamic;
	static var valueOf : Dynamic;
	static var warn : Dynamic;
	static var watch : Dynamic;
	static var watchKey : Dynamic;
	static var watchPath : Dynamic;
	static var watchedEvents : Dynamic;
	static var wrap : Dynamic;
	static var camelize : Dynamic;
	static var capitalize : Dynamic;
	static var classify : Dynamic;
	static var dasherize : Dynamic;
	static var decamelize : Dynamic;
	static var fmt : Dynamic;
	static var htmlSafe : Dynamic;
	static var loc : Dynamic;
	static var underscore : Dynamic;
	static var w : Dynamic;
	static var TEMPLATES : Dynamic;
	static var VERSION : Dynamic;
	static var ViewUtils : Dynamic;
	static var addBeforeObserver : Dynamic;
	static var addListener : Dynamic;
	static var addObserver : Dynamic;
	static var alias : Dynamic;
	static var aliasMethod : Dynamic;
	static var anyUnprocessedMixins : Dynamic;
	static var assert : Dynamic;
	static var beforeObserver : Dynamic;
	static var beforeObserversFor : Dynamic;
	static var beginPropertyChanges : Dynamic;
	static var bind : Dynamic;
	static var cacheFor : Dynamic;
	static var canInvoke : Dynamic;
	static var changeProperties : Dynamic;
	static var compare : Dynamic;
	static var computed : Dynamic;
	static var config : Dynamic;
	static var controllerFor : Dynamic;
	static var copy : Dynamic;
	static var create : Dynamic;
	static var debug : Dynamic;
	static var defineProperty : Dynamic;
	static var deprecate : Dynamic;
	static var deprecateFunc : Dynamic;
	static var destroy : Dynamic;
	static var empty : Dynamic;
	static var endPropertyChanges : Dynamic;
	static var exports : Dynamic;
	static var finishChains : Dynamic;
	static var flushPendingChains : Dynamic;
	static var generateController : Dynamic;
	static var generateGuid : Dynamic;
	static var get : Dynamic;
	static var getMeta : Dynamic;
	static var getPath : Dynamic;
	static var getWithDefault : Dynamic;
	static var guidFor : Dynamic;
	static var handleErrors : Dynamic;
	static var hasListeners : Dynamic;
	static var hasOwnProperty : Dynamic;
	static var immediateObserver : Dynamic;
	static var imports : Dynamic;
	static var inspect : Dynamic;
	static var instrument : Dynamic;
	static var isArray : Dynamic;
	static var isEmpty : Dynamic;
	static var isEqual : Dynamic;
	static var isGlobalPath : Dynamic;
	static var isNamespace : Dynamic;
	static var isNone : Dynamic;
	static var isPrototypeOf : Dynamic;
	static var isWatching : Dynamic;
	static var keys : Dynamic;
	static var listenersDiff : Dynamic;
	static var listenersFor : Dynamic;
	static var listenersUnion : Dynamic;
	static var lookup : Dynamic;
	static var makeArray : Dynamic;
	static var merge : Dynamic;
	static var meta : Dynamic;
	static var metaPath : Dynamic;
	static var mixin : Dynamic;
	static var none : Dynamic;
	static var normalizeTuple : Dynamic;
	static var observer : Dynamic;
	static var observersFor : Dynamic;
	static var onLoad : Dynamic;
	static var oneWay : Dynamic;
	static var onError : Dynamic;
	static var overrideChains : Dynamic;
	static var platform : Dynamic;
	static var propertyDidChange : Dynamic;
	static var propertyIsEnumerable : Dynamic;
	static var propertyWillChange : Dynamic;
	static var removeBeforeObserver : Dynamic;
	static var removeChainWatcher : Dynamic;
	static var removeListener : Dynamic;
	static var removeObserver : Dynamic;
	static var required : Dynamic;
	static var rewatch : Dynamic;
	static var run : Dynamic;
	static var runLoadHooks : Dynamic;
	static var sendEvent : Dynamic;
	static var set : Dynamic;
	static var setMeta : Dynamic;
	static var setPath : Dynamic;
	static var setProperties : Dynamic;
	static var subscribe : Dynamic;
	static var toLocaleString : Dynamic;
	static var toString : Dynamic;
	static var tryCatchFinally : Dynamic;
	static var tryFinally : Dynamic;
	static var tryInvoke : Dynamic;
	static var trySet : Dynamic;
	static var trySetPath : Dynamic;
	static var typeOf : Dynamic;
	static var unwatch : Dynamic;
	static var unwatchKey : Dynamic;
	static var unwatchPath : Dynamic;
	static var uuid : Dynamic;
	static var valueOf : Dynamic;
	static var warn : Dynamic;
	static var watch : Dynamic;
	static var watchKey : Dynamic;
	static var watchPath : Dynamic;
	static var watchedEvents : Dynamic;
	static var wrap : Dynamic;
}
extern class TargetActionSupport extends Ember.TargetActionSupport {

}
extern class Test extends Ember.Test {

}
extern class TextArea extends Ember.TextArea {

}
extern class TextField extends Ember.TextField {

}
extern class TextSupport extends Ember.TextSupport {

}
extern class View extends Ember.View {

}
extern class ViewTargetActionSupport extends Ember.ViewTargetActionSupport {

}
extern class StringTopLevel {
	static function camelize(str:String):String;
	static function capitalize(str:String):String;
	static function classify(str:String):String;
	static function dasherize(str:String):String;
	static function decamelize(str:String):String;
	static function fmt(args:haxe.extern.Rest<String>):String;
	static function htmlSafe(str:String):Void;
	static function loc(args:haxe.extern.Rest<String>):String;
	static function underscore(str:String):String;
	static function w(str:String):Array<String>;
	static var TEMPLATES : { };
	static var VERSION : String;
	static var ViewUtils : { };
	static function addBeforeObserver(obj:Dynamic, path:String, target:Dynamic, method:haxe.Constraints.Function):Dynamic;
	static function addListener(obj:Dynamic, eventName:String, target:Dynamic, method:haxe.Constraints.Function, ?once:Bool):Void;
	static function addListener(obj:Dynamic, eventName:String, target:Dynamic, method:String, ?once:Bool):Void;
	static function addListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:haxe.Constraints.Function, ?once:Bool):Void;
	static function addListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:String, ?once:Bool):Void;
	static var addObserver : ModifyObserver;
	static var alias : Dynamic;
	static function aliasMethod(methodName:String):Descriptor;
	static var anyUnprocessedMixins : Bool;
	static function assert(desc:String, test:Bool):Void;
	static function beforeObserver(func:haxe.Constraints.Function, propertyName:String):haxe.Constraints.Function;
	static function beforeObserversFor(obj:Dynamic, path:String):Array<String>;
	static function beginPropertyChanges():Void;
	static function bind(obj:Dynamic, to:String, from:String):Binding;
	static function cacheFor(obj:Dynamic, key:String):Dynamic;
	static function canInvoke(obj:Dynamic, methodName:String):Bool;
	static function changeProperties(callback:haxe.Constraints.Function, ?binding:Dynamic):Void;
	static function compare(v:Dynamic, w:Dynamic):Float;
	static var computed : { function alias(dependentKey:String):ComputedProperty; function and(args:haxe.extern.Rest<String>):ComputedProperty; function any(args:haxe.extern.Rest<String>):ComputedProperty; function bool(dependentKey:String):ComputedProperty; function defaultTo(defaultPath:String):ComputedProperty; function empty(dependentKey:String):ComputedProperty; function equal(dependentKey:String, value:Dynamic):ComputedProperty; function gt(dependentKey:String, value:Float):ComputedProperty; function gte(dependentKey:String, value:Float):ComputedProperty; function lt(dependentKey:String, value:Float):ComputedProperty; function lte(dependentKey:String, value:Float):ComputedProperty; function map(args:haxe.extern.Rest<String>):ComputedProperty; function match(dependentKey:String, regexp:js.RegExp):ComputedProperty; function none(dependentKey:String):ComputedProperty; function not(dependentKey:String):ComputedProperty; function notEmpty(dependentKey:String):ComputedProperty; function oneWay(dependentKey:String):ComputedProperty; function or(args:haxe.extern.Rest<String>):ComputedProperty; };
	static var config : { };
	static function controllerFor(container:Container, controllerName:String, ?lookupOptions:{ }):Controller;
	static function copy(obj:Dynamic, deep:Bool):Dynamic;
	static function create(?arguments:{ }):CoreObject;
	static function debug(message:String):Void;
	static function defineProperty(obj:Dynamic, keyName:String, desc:{ }):Void;
	static function deprecate(message:String, ?test:Bool):Void;
	static function deprecateFunc(message:String, func:haxe.Constraints.Function):haxe.Constraints.Function;
	static function destroy(obj:Dynamic):Void;
	static var empty : Dynamic;
	static function endPropertyChanges():Void;
	static var exports : { };
	static function finishChains(obj:Dynamic):Void;
	static function flushPendingChains():Void;
	static function generateController(container:Container, controllerName:String, context:Dynamic):Controller;
	static function generateGuid(obj:Dynamic, ?prefix:String):String;
	static function get(obj:Dynamic, keyName:String):Dynamic;
	static function getMeta(obj:Dynamic, property:String):Dynamic;
	static var getPath : Dynamic;
	static function getWithDefault(root:String, key:String, defaultValue:Dynamic):Dynamic;
	static function guidFor(obj:Dynamic):String;
	static function handleErrors(func:haxe.Constraints.Function, context:Dynamic):Dynamic;
	static function hasListeners(context:Dynamic, name:String):Bool;
	static function hasOwnProperty(prop:String):Bool;
	static function immediateObserver(func:haxe.Constraints.Function, propertyNames:haxe.extern.Rest<Dynamic>):haxe.Constraints.Function;
	static var imports : { };
	static function inspect(obj:Dynamic):String;
	static function instrument(name:String, payload:Dynamic, callback:haxe.Constraints.Function, binding:Dynamic):Void;
	static function isArray(obj:Dynamic):Bool;
	static function isEmpty(obj:Dynamic):Bool;
	static function isEqual(a:Dynamic, b:Dynamic):Bool;
	static function isGlobalPath(path:String):Bool;
	static var isNamespace : Bool;
	static function isNone(obj:Dynamic):Bool;
	static function isPrototypeOf(obj:{ }):Bool;
	static function isWatching(obj:Dynamic, key:String):Bool;
	static function keys(obj:Dynamic):Array<Dynamic>;
	static function listenersDiff(obj:Dynamic, eventName:String, otherActions:Array<Dynamic>):Array<Dynamic>;
	static function listenersFor(obj:Dynamic, eventName:String):Array<Dynamic>;
	static function listenersUnion(obj:Dynamic, eventName:String, otherActions:Array<Dynamic>):Void;
	static var lookup : { };
	static function makeArray(obj:Dynamic):Array<Dynamic>;
	static function merge(original:Dynamic, updates:Dynamic):Dynamic;
	static function meta(obj:Dynamic, ?writable:Bool):{ };
	static function metaPath(obj:Dynamic, path:String, ?writable:Bool):Dynamic;
	static function mixin(obj:Dynamic, args:haxe.extern.Rest<Dynamic>):Dynamic;
	static var none : Dynamic;
	static function normalizeTuple(target:Dynamic, path:String):Array<Dynamic>;
	static function observer(args:haxe.extern.Rest<Dynamic>):haxe.Constraints.Function;
	static function observersFor(obj:Dynamic, path:String):Array<Dynamic>;
	static function onLoad(name:String, callback:haxe.Constraints.Function):Void;
	static function oneWay(obj:Dynamic, to:String, from:String):Binding;
	static var onError : Error;
	static function overrideChains(obj:Dynamic, keyName:String, m:Dynamic):Bool;
	static var platform : { var addBeforeObserver : ModifyObserver; var addObserver : ModifyObserver; function defineProperty(obj:Dynamic, keyName:String, desc:{ }):Void; var removeBeforeObserver : ModifyObserver; var removeObserver : ModifyObserver; var hasPropertyAccessors : Bool; };
	static function propertyDidChange(obj:Dynamic, keyName:String):Void;
	static function propertyIsEnumerable(prop:String):Bool;
	static function propertyWillChange(obj:Dynamic, keyName:String):Void;
	static function removeBeforeObserver(obj:Dynamic, path:String, target:Dynamic, method:haxe.Constraints.Function):Dynamic;
	static function removeChainWatcher(obj:Dynamic, keyName:String, node:Dynamic):Void;
	static function removeListener(obj:Dynamic, eventName:String, target:Dynamic, method:haxe.Constraints.Function):Void;
	static function removeListener(obj:Dynamic, eventName:String, target:Dynamic, method:String):Void;
	static function removeListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:haxe.Constraints.Function):Void;
	static function removeListener(obj:Dynamic, eventName:String, func:haxe.Constraints.Function, method:String):Void;
	static function removeObserver(obj:Dynamic, path:String, target:Dynamic, method:haxe.Constraints.Function):Dynamic;
	static function required():Descriptor;
	static function rewatch(obj:Dynamic):Void;
	static var run : { function begin():Void; function cancel(timer:Dynamic):Void; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function debounce(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; function end():Void; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Dynamic { })
	function join(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Dynamic; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):String { })
	function later(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):String; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Float { })
	function next(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Float; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Float { })
	function once(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Float; @:overload(function(queue:String, target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function schedule(queue:String, target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; @:overload(function(queue:String, target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function scheduleOnce(queue:String, target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; function sync():Void; @:overload(function(target:Dynamic, method:String, args:haxe.extern.Rest<Dynamic>):Void { })
	function throttle(target:Dynamic, method:haxe.Constraints.Function, args:haxe.extern.Rest<Dynamic>):Void; var queues : Array<Dynamic>; };
	static function runLoadHooks(name:String, object:Dynamic):Void;
	static function sendEvent(obj:Dynamic, eventName:String, ?params:Array<Dynamic>, ?actions:Array<Dynamic>):Bool;
	static function set(obj:Dynamic, keyName:String, value:Dynamic):Dynamic;
	static function setMeta(obj:Dynamic, property:String, value:Dynamic):Void;
	static var setPath : Dynamic;
	static function setProperties(self:Dynamic, hash:{ }):Dynamic;
	static function subscribe(pattern:String, object:Dynamic):Void;
	static function toLocaleString():String;
	static function toString():String;
	static function tryCatchFinally(tryable:haxe.Constraints.Function, catchable:haxe.Constraints.Function, finalizer:haxe.Constraints.Function, ?binding:Dynamic):Dynamic;
	static function tryFinally(tryable:haxe.Constraints.Function, finalizer:haxe.Constraints.Function, ?binding:Dynamic):Dynamic;
	static function tryInvoke(obj:Dynamic, methodName:String, ?args:Array<Dynamic>):Dynamic;
	static function trySet(obj:Dynamic, path:String, value:Dynamic):Void;
	static var trySetPath : Dynamic;
	static function typeOf(item:Dynamic):String;
	static function unwatch(obj:Dynamic, keyPath:String):Void;
	static function unwatchKey(obj:Dynamic, keyName:String):Void;
	static function unwatchPath(obj:Dynamic, keyPath:String):Void;
	static var uuid : Float;
	static function valueOf():{ };
	static function warn(message:String, ?test:Bool):Void;
	static function watch(obj:Dynamic, keyPath:String):Void;
	static function watchKey(obj:Dynamic, keyName:String):Void;
	static function watchPath(obj:Dynamic, keyPath:String):Void;
	static function watchedEvents(obj:{ }):Array<Dynamic>;
	static function wrap(func:haxe.Constraints.Function, superFunc:haxe.Constraints.Function):haxe.Constraints.Function;
	static var camelize : Dynamic;
	static var capitalize : Dynamic;
	static var classify : Dynamic;
	static var dasherize : Dynamic;
	static var decamelize : Dynamic;
	static var fmt : Dynamic;
	static var htmlSafe : Dynamic;
	static var loc : Dynamic;
	static var underscore : Dynamic;
	static var w : Dynamic;
	static var TEMPLATES : Dynamic;
	static var VERSION : Dynamic;
	static var ViewUtils : Dynamic;
	static var addBeforeObserver : Dynamic;
	static var addListener : Dynamic;
	static var addObserver : Dynamic;
	static var alias : Dynamic;
	static var aliasMethod : Dynamic;
	static var anyUnprocessedMixins : Dynamic;
	static var assert : Dynamic;
	static var beforeObserver : Dynamic;
	static var beforeObserversFor : Dynamic;
	static var beginPropertyChanges : Dynamic;
	static var bind : Dynamic;
	static var cacheFor : Dynamic;
	static var canInvoke : Dynamic;
	static var changeProperties : Dynamic;
	static var compare : Dynamic;
	static var computed : Dynamic;
	static var config : Dynamic;
	static var controllerFor : Dynamic;
	static var copy : Dynamic;
	static var create : Dynamic;
	static var debug : Dynamic;
	static var defineProperty : Dynamic;
	static var deprecate : Dynamic;
	static var deprecateFunc : Dynamic;
	static var destroy : Dynamic;
	static var empty : Dynamic;
	static var endPropertyChanges : Dynamic;
	static var exports : Dynamic;
	static var finishChains : Dynamic;
	static var flushPendingChains : Dynamic;
	static var generateController : Dynamic;
	static var generateGuid : Dynamic;
	static var get : Dynamic;
	static var getMeta : Dynamic;
	static var getPath : Dynamic;
	static var getWithDefault : Dynamic;
	static var guidFor : Dynamic;
	static var handleErrors : Dynamic;
	static var hasListeners : Dynamic;
	static var hasOwnProperty : Dynamic;
	static var immediateObserver : Dynamic;
	static var imports : Dynamic;
	static var inspect : Dynamic;
	static var instrument : Dynamic;
	static var isArray : Dynamic;
	static var isEmpty : Dynamic;
	static var isEqual : Dynamic;
	static var isGlobalPath : Dynamic;
	static var isNamespace : Dynamic;
	static var isNone : Dynamic;
	static var isPrototypeOf : Dynamic;
	static var isWatching : Dynamic;
	static var keys : Dynamic;
	static var listenersDiff : Dynamic;
	static var listenersFor : Dynamic;
	static var listenersUnion : Dynamic;
	static var lookup : Dynamic;
	static var makeArray : Dynamic;
	static var merge : Dynamic;
	static var meta : Dynamic;
	static var metaPath : Dynamic;
	static var mixin : Dynamic;
	static var none : Dynamic;
	static var normalizeTuple : Dynamic;
	static var observer : Dynamic;
	static var observersFor : Dynamic;
	static var onLoad : Dynamic;
	static var oneWay : Dynamic;
	static var onError : Dynamic;
	static var overrideChains : Dynamic;
	static var platform : Dynamic;
	static var propertyDidChange : Dynamic;
	static var propertyIsEnumerable : Dynamic;
	static var propertyWillChange : Dynamic;
	static var removeBeforeObserver : Dynamic;
	static var removeChainWatcher : Dynamic;
	static var removeListener : Dynamic;
	static var removeObserver : Dynamic;
	static var required : Dynamic;
	static var rewatch : Dynamic;
	static var run : Dynamic;
	static var runLoadHooks : Dynamic;
	static var sendEvent : Dynamic;
	static var set : Dynamic;
	static var setMeta : Dynamic;
	static var setPath : Dynamic;
	static var setProperties : Dynamic;
	static var subscribe : Dynamic;
	static var toLocaleString : Dynamic;
	static var toString : Dynamic;
	static var tryCatchFinally : Dynamic;
	static var tryFinally : Dynamic;
	static var tryInvoke : Dynamic;
	static var trySet : Dynamic;
	static var trySetPath : Dynamic;
	static var typeOf : Dynamic;
	static var unwatch : Dynamic;
	static var unwatchKey : Dynamic;
	static var unwatchPath : Dynamic;
	static var uuid : Dynamic;
	static var valueOf : Dynamic;
	static var warn : Dynamic;
	static var watch : Dynamic;
	static var watchKey : Dynamic;
	static var watchPath : Dynamic;
	static var watchedEvents : Dynamic;
	static var wrap : Dynamic;
	static var camelize : Dynamic;
	static var capitalize : Dynamic;
	static var classify : Dynamic;
	static var dasherize : Dynamic;
	static var decamelize : Dynamic;
	static var fmt : Dynamic;
	static var htmlSafe : Dynamic;
	static var loc : Dynamic;
	static var underscore : Dynamic;
	static var w : Dynamic;
	static var TEMPLATES : Dynamic;
	static var VERSION : Dynamic;
	static var ViewUtils : Dynamic;
	static var addBeforeObserver : Dynamic;
	static var addListener : Dynamic;
	static var addObserver : Dynamic;
	static var alias : Dynamic;
	static var aliasMethod : Dynamic;
	static var anyUnprocessedMixins : Dynamic;
	static var assert : Dynamic;
	static var beforeObserver : Dynamic;
	static var beforeObserversFor : Dynamic;
	static var beginPropertyChanges : Dynamic;
	static var bind : Dynamic;
	static var cacheFor : Dynamic;
	static var canInvoke : Dynamic;
	static var changeProperties : Dynamic;
	static var compare : Dynamic;
	static var computed : Dynamic;
	static var config : Dynamic;
	static var controllerFor : Dynamic;
	static var copy : Dynamic;
	static var create : Dynamic;
	static var debug : Dynamic;
	static var defineProperty : Dynamic;
	static var deprecate : Dynamic;
	static var deprecateFunc : Dynamic;
	static var destroy : Dynamic;
	static var empty : Dynamic;
	static var endPropertyChanges : Dynamic;
	static var exports : Dynamic;
	static var finishChains : Dynamic;
	static var flushPendingChains : Dynamic;
	static var generateController : Dynamic;
	static var generateGuid : Dynamic;
	static var get : Dynamic;
	static var getMeta : Dynamic;
	static var getPath : Dynamic;
	static var getWithDefault : Dynamic;
	static var guidFor : Dynamic;
	static var handleErrors : Dynamic;
	static var hasListeners : Dynamic;
	static var hasOwnProperty : Dynamic;
	static var immediateObserver : Dynamic;
	static var imports : Dynamic;
	static var inspect : Dynamic;
	static var instrument : Dynamic;
	static var isArray : Dynamic;
	static var isEmpty : Dynamic;
	static var isEqual : Dynamic;
	static var isGlobalPath : Dynamic;
	static var isNamespace : Dynamic;
	static var isNone : Dynamic;
	static var isPrototypeOf : Dynamic;
	static var isWatching : Dynamic;
	static var keys : Dynamic;
	static var listenersDiff : Dynamic;
	static var listenersFor : Dynamic;
	static var listenersUnion : Dynamic;
	static var lookup : Dynamic;
	static var makeArray : Dynamic;
	static var merge : Dynamic;
	static var meta : Dynamic;
	static var metaPath : Dynamic;
	static var mixin : Dynamic;
	static var none : Dynamic;
	static var normalizeTuple : Dynamic;
	static var observer : Dynamic;
	static var observersFor : Dynamic;
	static var onLoad : Dynamic;
	static var oneWay : Dynamic;
	static var onError : Dynamic;
	static var overrideChains : Dynamic;
	static var platform : Dynamic;
	static var propertyDidChange : Dynamic;
	static var propertyIsEnumerable : Dynamic;
	static var propertyWillChange : Dynamic;
	static var removeBeforeObserver : Dynamic;
	static var removeChainWatcher : Dynamic;
	static var removeListener : Dynamic;
	static var removeObserver : Dynamic;
	static var required : Dynamic;
	static var rewatch : Dynamic;
	static var run : Dynamic;
	static var runLoadHooks : Dynamic;
	static var sendEvent : Dynamic;
	static var set : Dynamic;
	static var setMeta : Dynamic;
	static var setPath : Dynamic;
	static var setProperties : Dynamic;
	static var subscribe : Dynamic;
	static var toLocaleString : Dynamic;
	static var toString : Dynamic;
	static var tryCatchFinally : Dynamic;
	static var tryFinally : Dynamic;
	static var tryInvoke : Dynamic;
	static var trySet : Dynamic;
	static var trySetPath : Dynamic;
	static var typeOf : Dynamic;
	static var unwatch : Dynamic;
	static var unwatchKey : Dynamic;
	static var unwatchPath : Dynamic;
	static var uuid : Dynamic;
	static var valueOf : Dynamic;
	static var warn : Dynamic;
	static var watch : Dynamic;
	static var watchKey : Dynamic;
	static var watchPath : Dynamic;
	static var watchedEvents : Dynamic;
	static var wrap : Dynamic;
}
extern class TargetActionSupport extends Ember.TargetActionSupport {

}
extern class Test extends Ember.Test {

}
extern class TextArea extends Ember.TextArea {

}
extern class TextField extends Ember.TextField {

}
extern class TextSupport extends Ember.TextSupport {

}
extern class View extends Ember.View {

}
extern class ViewTargetActionSupport extends Ember.ViewTargetActionSupport {

}
