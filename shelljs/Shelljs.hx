typedef String = {
	function to(file:String):Void;
	function toEnd(file:String):Void;
};
typedef ExecCallback = { };
typedef ExecOptions = {
	@:optional
	var silent : Bool;
	@:optional
	var async : Bool;
};
typedef ExecOutputReturnValue = {
	var code : Float;
	var output : String;
};
typedef ShellConfig = {
	var silent : Bool;
	var fatal : Bool;
};
extern class ShelljsTopLevel {
	static function cd(dir:String):Void;
	static function pwd():String;
	static function ls(paths:haxe.extern.Rest<String>):Array<String>;
	static function ls(options:String, paths:haxe.extern.Rest<String>):Array<String>;
	static function ls(paths:Array<String>):Array<String>;
	static function ls(options:String, paths:Array<String>):Array<String>;
	static function find(path:haxe.extern.Rest<String>):Array<String>;
	static function find(path:Array<String>):Array<String>;
	static function cp(source:String, dest:String):Void;
	static function cp(source:Array<String>, dest:String):Void;
	static function cp(options:String, source:String, dest:String):Void;
	static function cp(options:String, source:Array<String>, dest:String):Void;
	static function rm(files:haxe.extern.Rest<String>):Void;
	static function rm(files:Array<String>):Void;
	static function rm(options:String, files:haxe.extern.Rest<String>):Void;
	static function rm(options:String, files:Array<String>):Void;
	static function mv(source:String, dest:String):Void;
	static function mv(source:Array<String>, dest:String):Void;
	static function mkdir(dir:haxe.extern.Rest<String>):Void;
	static function mkdir(dir:Array<String>):Void;
	static function mkdir(options:String, dir:haxe.extern.Rest<String>):Void;
	static function mkdir(options:String, dir:Array<String>):Void;
	static function test(option:String, path:String):Bool;
	static function cat(files:haxe.extern.Rest<String>):String;
	static function cat(files:Array<String>):String;
	static function sed(searchRegex:js.RegExp, replacement:String, file:String):String;
	static function sed(searchRegex:String, replacement:String, file:String):String;
	static function sed(options:String, searchRegex:js.RegExp, replacement:String, file:String):String;
	static function sed(options:String, searchRegex:String, replacement:String, file:String):String;
	static function grep(regex_filter:js.RegExp, files:haxe.extern.Rest<String>):String;
	static function grep(regex_filter:js.RegExp, files:Array<String>):String;
	static function grep(options:String, regex_filter:String, files:haxe.extern.Rest<String>):String;
	static function grep(options:String, regex_filter:String, files:Array<String>):String;
	static function which(command:String):String;
	static function echo(text:haxe.extern.Rest<String>):String;
	static function pushd(dir:+N):Array<String>;
	static function pushd(dir:-N):Array<String>;
	static function pushd(dir:String):Array<String>;
	static function pushd(options:String, dir:+N):Array<String>;
	static function pushd(options:String, dir:-N):Array<String>;
	static function pushd(options:String, dir:String):Array<String>;
	static function popd(dir:+N):Array<String>;
	static function popd():Array<String>;
	static function popd(dir:-N):Array<String>;
	static function popd(dir:String):Array<String>;
	static function popd(options:String, dir:+N):Array<String>;
	static function popd(options:String, dir:-N):Array<String>;
	static function popd(options:String, dir:String):Array<String>;
	static function dirs(options:-c):Array<String>;
	static function dirs(options:+N):String;
	static function dirs(options:-N):String;
	static function dirs(options:String):Dynamic;
	static function ln(source:String, dest:String):Void;
	static function ln(options:String, source:String, dest:String):Void;
	static function exit(code:Float):Void;
	static var env : { };
	static function exec(command:String):ExecOutputReturnValue;
	static function exec(command:String, options:ExecOptions):haxe.extern.EitherType<ExecOutputReturnValue, child.ChildProcess>;
	static function exec(command:String, options:ExecOptions, callback:ExecCallback):child.ChildProcess;
	static function exec(command:String, callback:ExecCallback):child.ChildProcess;
	static function chmod(octalMode:Float, file:String):Void;
	static function chmod(mode:String, file:String):Void;
	static function tempdir():String;
	static function error():String;
	static var config : ShellConfig;
}
extern class ShelljsTopLevel {
	static function cd(dir:String):Void;
	static function pwd():String;
	static function ls(paths:haxe.extern.Rest<String>):Array<String>;
	static function ls(options:String, paths:haxe.extern.Rest<String>):Array<String>;
	static function ls(paths:Array<String>):Array<String>;
	static function ls(options:String, paths:Array<String>):Array<String>;
	static function find(path:haxe.extern.Rest<String>):Array<String>;
	static function find(path:Array<String>):Array<String>;
	static function cp(source:String, dest:String):Void;
	static function cp(source:Array<String>, dest:String):Void;
	static function cp(options:String, source:String, dest:String):Void;
	static function cp(options:String, source:Array<String>, dest:String):Void;
	static function rm(files:haxe.extern.Rest<String>):Void;
	static function rm(files:Array<String>):Void;
	static function rm(options:String, files:haxe.extern.Rest<String>):Void;
	static function rm(options:String, files:Array<String>):Void;
	static function mv(source:String, dest:String):Void;
	static function mv(source:Array<String>, dest:String):Void;
	static function mkdir(dir:haxe.extern.Rest<String>):Void;
	static function mkdir(dir:Array<String>):Void;
	static function mkdir(options:String, dir:haxe.extern.Rest<String>):Void;
	static function mkdir(options:String, dir:Array<String>):Void;
	static function test(option:String, path:String):Bool;
	static function cat(files:haxe.extern.Rest<String>):String;
	static function cat(files:Array<String>):String;
	static function sed(searchRegex:js.RegExp, replacement:String, file:String):String;
	static function sed(searchRegex:String, replacement:String, file:String):String;
	static function sed(options:String, searchRegex:js.RegExp, replacement:String, file:String):String;
	static function sed(options:String, searchRegex:String, replacement:String, file:String):String;
	static function grep(regex_filter:js.RegExp, files:haxe.extern.Rest<String>):String;
	static function grep(regex_filter:js.RegExp, files:Array<String>):String;
	static function grep(options:String, regex_filter:String, files:haxe.extern.Rest<String>):String;
	static function grep(options:String, regex_filter:String, files:Array<String>):String;
	static function which(command:String):String;
	static function echo(text:haxe.extern.Rest<String>):String;
	static function pushd(dir:+N):Array<String>;
	static function pushd(dir:-N):Array<String>;
	static function pushd(dir:String):Array<String>;
	static function pushd(options:String, dir:+N):Array<String>;
	static function pushd(options:String, dir:-N):Array<String>;
	static function pushd(options:String, dir:String):Array<String>;
	static function popd(dir:+N):Array<String>;
	static function popd():Array<String>;
	static function popd(dir:-N):Array<String>;
	static function popd(dir:String):Array<String>;
	static function popd(options:String, dir:+N):Array<String>;
	static function popd(options:String, dir:-N):Array<String>;
	static function popd(options:String, dir:String):Array<String>;
	static function dirs(options:-c):Array<String>;
	static function dirs(options:+N):String;
	static function dirs(options:-N):String;
	static function dirs(options:String):Dynamic;
	static function ln(source:String, dest:String):Void;
	static function ln(options:String, source:String, dest:String):Void;
	static function exit(code:Float):Void;
	static var env : { };
	static function exec(command:String):ExecOutputReturnValue;
	static function exec(command:String, options:ExecOptions):haxe.extern.EitherType<ExecOutputReturnValue, child.ChildProcess>;
	static function exec(command:String, options:ExecOptions, callback:ExecCallback):child.ChildProcess;
	static function exec(command:String, callback:ExecCallback):child.ChildProcess;
	static function chmod(octalMode:Float, file:String):Void;
	static function chmod(mode:String, file:String):Void;
	static function tempdir():String;
	static function error():String;
	static var config : ShellConfig;
}
