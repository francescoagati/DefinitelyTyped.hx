typedef Window = {
	var atom : AtomCore.IAtom;
	function measure(description:String, fn:haxe.Constraints.Function):Dynamic;
	function profile(description:String, fn:haxe.Constraints.Function):Dynamic;
};
extern class View extends spacePen.View {
	function subscribeWith(eventEmitter:Dynamic, methodName:String, args:Dynamic):Dynamic;
	function addSubscription(subscription:Dynamic):Dynamic;
	function subscribe(eventEmitterOrSubscription:Dynamic, args:haxe.extern.Rest<Dynamic>):Dynamic;
	function subscribeToCommand(eventEmitter:Dynamic, args:haxe.extern.Rest<Dynamic>):Dynamic;
	function unsubscribe(?object:Dynamic):Dynamic;
}
extern class EditorView extends View {
	static var characterWidthCache : Dynamic;
	static var configDefaults : Dynamic;
	static var nextEditorId : Float;
	static function content(params:Dynamic):Void;
	static function classes(?_arg:{ @:optional
	var mini : Dynamic; }):String;
	var vScrollMargin : Float;
	var hScrollMargin : Float;
	var lineHeight : Dynamic;
	var charWidth : Dynamic;
	var charHeight : Dynamic;
	var cursorViews : Array<Dynamic>;
	var selectionViews : Array<Dynamic>;
	var lineCache : Array<Dynamic>;
	var isFocused : Dynamic;
	var editor : AtomCore.IEditor;
	var attached : Dynamic;
	var lineOverdraw : Float;
	var pendingChanges : Array<Dynamic>;
	var newCursors : Array<Dynamic>;
	var newSelections : Array<Dynamic>;
	var redrawOnReattach : Dynamic;
	var bottomPaddingInLines : Float;
	var active : Bool;
	var id : Float;
	var gutter : AtomCore.IGutterView;
	var overlayer : JQuery;
	var scrollView : JQuery;
	var renderedLines : JQuery;
	var underlayer : JQuery;
	var hiddenInput : JQuery;
	var verticalScrollbar : JQuery;
	var verticalScrollbarContent : JQuery;
	function new(editor:AtomCore.IEditor):Void;
	@:overload(function(?editorOrOptions:{ var editor : AtomCore.IEditor; var mini : Dynamic; var placeholderText : Dynamic; }):Void { })
	@:overload(function(editorOrOptions:{ }):Void { })
	function initialize(editorOrOptions:AtomCore.IEditor):Void;
	function bindKeys():Void;
	function getEditor():AtomCore.IEditor;
	function getText():String;
	function setText(text:String):Void;
	function insertText(text:String, ?options:Dynamic):Array<TextBuffer.IRange>;
	function setHeightInLines(heightInLines:Float):Float;
	function setWidthInChars(widthInChars:Float):Float;
	function pageDown():Void;
	function pageUp():Void;
	function getPageRows():Float;
	function setShowInvisibles(showInvisibles:Bool):Void;
	function setInvisibles(invisibles:{ var eol : String; var space : String; var tab : String; var cr : String; }):Void;
	function setShowIndentGuide(showIndentGuide:Bool):Void;
	function setPlaceholderText(placeholderText:String):Void;
	function getPlaceholderText():String;
	function checkoutHead():Bool;
	function configure():Emissary.ISubscription;
	function handleEvents():Void;
	function handleInputEvents():Void;
	function bringHiddenInputIntoView():JQuery;
	function selectOnMousemoveUntilMouseup():Dynamic;
	function afterAttach(onDom:Dynamic):Dynamic;
	function edit(editor:AtomCore.IEditor):Dynamic;
	function getModel():AtomCore.IEditor;
	function setModel(editor:AtomCore.IEditor):Dynamic;
	function showBufferConflictAlert(editor:AtomCore.IEditor):Dynamic;
	function scrollTop(scrollTop:Float, ?options:Dynamic):Dynamic;
	function scrollBottom(?scrollBottom:Float):Dynamic;
	function scrollLeft(?scrollLeft:Float):Float;
	function scrollRight(?scrollRight:Float):Dynamic;
	function scrollToBottom():Dynamic;
	function scrollToCursorPosition():Dynamic;
	function scrollToBufferPosition(bufferPosition:Dynamic, options:Dynamic):Dynamic;
	function scrollToScreenPosition(screenPosition:Dynamic, options:Dynamic):Dynamic;
	function scrollToPixelPosition(pixelPosition:Dynamic, options:Dynamic):Dynamic;
	function highlightFoldsContainingBufferRange(bufferRange:Dynamic):Dynamic;
	function saveScrollPositionForEditor():Dynamic;
	function toggleSoftTabs():Dynamic;
	function toggleSoftWrap():Dynamic;
	function calculateWidthInChars():Float;
	function calculateHeightInLines():Float;
	function getScrollbarWidth():Float;
	function setSoftWrap(softWrap:Bool):Dynamic;
	function setFontSize(fontSize:Float):Dynamic;
	function getFontSize():Float;
	function setFontFamily(?fontFamily:String):Dynamic;
	function getFontFamily():String;
	function setLineHeight(lineHeight:Float):Dynamic;
	function redraw():Dynamic;
	function splitLeft():Dynamic;
	function splitRight():Dynamic;
	function splitUp():Dynamic;
	function splitDown():Dynamic;
	function getPane():Dynamic;
	function remove(selector:Dynamic, keepData:Dynamic):Dynamic;
	function beforeRemove():Dynamic;
	function getCursorView(?index:Float):Dynamic;
	function getCursorViews():Array<Dynamic>;
	function addCursorView(cursor:Dynamic, options:Dynamic):Dynamic;
	function removeCursorView(cursorView:Dynamic):Dynamic;
	function getSelectionView(?index:Float):Dynamic;
	function getSelectionViews():Array<Dynamic>;
	function addSelectionView(selection:Dynamic):Dynamic;
	function removeSelectionView(selectionView:Dynamic):Dynamic;
	function removeAllCursorAndSelectionViews():Array<Dynamic>;
	function appendToLinesView(view:Dynamic):Dynamic;
	function scrollVertically(pixelPosition:Dynamic, _arg:Dynamic):Dynamic;
	function scrollHorizontally(pixelPosition:Dynamic):Dynamic;
	function calculateDimensions():Float;
	function recalculateDimensions():Dynamic;
	function updateLayerDimensions():Dynamic;
	function isHidden():Bool;
	function clearRenderedLines():Void;
	function resetDisplay():Dynamic;
	function requestDisplayUpdate():Dynamic;
	function updateDisplay(?options:Dynamic):Dynamic;
	function updateCursorViews():Dynamic;
	function shouldUpdateCursor(cursorView:Dynamic):Dynamic;
	function updateSelectionViews():Array<Dynamic>;
	function shouldUpdateSelection(selectionView:Dynamic):Dynamic;
	function syncCursorAnimations():Array<Dynamic>;
	function autoscroll(?suppressAutoscroll:Dynamic):Array<Dynamic>;
	function updatePlaceholderText():Dynamic;
	function updateRenderedLines(scrollViewWidth:Dynamic):Dynamic;
	function computeSurroundingEmptyLineChanges(change:Dynamic):Dynamic;
	function computeIntactRanges(renderFrom:Dynamic, renderTo:Dynamic):Dynamic;
	function truncateIntactRanges(intactRanges:Dynamic, renderFrom:Dynamic, renderTo:Dynamic):Dynamic;
	function clearDirtyRanges(intactRanges:Dynamic):Dynamic;
	function clearLine(lineElement:Dynamic):Dynamic;
	function fillDirtyRanges(intactRanges:Dynamic, renderFrom:Dynamic, renderTo:Dynamic):Dynamic;
	function updatePaddingOfRenderedLines():Dynamic;
	function getFirstVisibleScreenRow():Float;
	function getLastVisibleScreenRow():Float;
	function isScreenRowVisible():Bool;
	function handleScreenLinesChange(change:Dynamic):Dynamic;
	function buildLineElementForScreenRow(screenRow:Dynamic):Dynamic;
	function buildLineElementsForScreenRows(startRow:Dynamic, endRow:Dynamic):Dynamic;
	function htmlForScreenRows(startRow:Dynamic, endRow:Dynamic):Dynamic;
	function htmlForScreenLine(screenLine:Dynamic, screenRow:Dynamic):Dynamic;
	function buildIndentation(screenRow:Dynamic, editor:Dynamic):Dynamic;
	function buildHtmlEndOfLineInvisibles(screenLine:Dynamic):Dynamic;
	function getEndOfLineInvisibles(screenLine:Dynamic):Dynamic;
	function lineElementForScreenRow(screenRow:Dynamic):Dynamic;
	function toggleLineCommentsInSelection():Dynamic;
	function pixelPositionForBufferPosition(position:Dynamic):Dynamic;
	function pixelPositionForScreenPosition(position:Dynamic):Dynamic;
	function positionLeftForLineAndColumn(lineElement:Dynamic, screenRow:Dynamic, screenColumn:Dynamic):Dynamic;
	function measureToColumn(lineElement:Dynamic, tokenizedLine:Dynamic, screenColumn:Dynamic):Dynamic;
	function getCharacterWidthCache(scopes:Dynamic, char:Dynamic):Dynamic;
	function setCharacterWidthCache(scopes:Dynamic, char:Dynamic, val:Dynamic):Dynamic;
	function clearCharacterWidthCache():Dynamic;
	function pixelOffsetForScreenPosition(position:Dynamic):Dynamic;
	function screenPositionFromMouseEvent(e:Dynamic):Dynamic;
	function highlightCursorLine():Dynamic;
	function copyPathToClipboard():Dynamic;
	function buildLineHtml(_arg:Dynamic):Dynamic;
	function updateScopeStack(line:Dynamic, scopeStack:Dynamic, desiredScopes:Dynamic):Dynamic;
	function pushScope(line:Dynamic, scopeStack:Dynamic, scope:Dynamic):Dynamic;
	function popScope(line:Dynamic, scopeStack:Dynamic):Dynamic;
	function buildEmptyLineHtml(showIndentGuide:Dynamic, eolInvisibles:Dynamic, htmlEolInvisibles:Dynamic, indentation:Dynamic, editor:Dynamic, mini:Dynamic):Dynamic;
	function replaceSelectedText(replaceFn:String -> String):Dynamic;
	function consolidateSelections(e:Dynamic):Dynamic;
	function logCursorScope():Dynamic;
	function logScreenLines(start:Dynamic, end:Dynamic):Dynamic;
	function logRenderedLines():Dynamic;
}
extern class ScrollView extends View {

}
typedef ISelectListItem = {
	var eventName : String;
	var eventDescription : String;
};
extern class SelectListView extends View {
	static function content():Dynamic;
	var maxItems : Float;
	var scheduleTimeout : Dynamic;
	var inputThrottle : Float;
	var cancelling : Bool;
	var items : Array<Dynamic>;
	var list : JQuery;
	var previouslyFocusedElement : JQuery;
	function initialize():Dynamic;
	function schedulePopulateList():Float;
	function setItems(items:Array<Dynamic>):Dynamic;
	function setError(?message:String):Dynamic;
	function setLoading(?message:String):Dynamic;
	function getFilterQuery():String;
	function populateList():Dynamic;
	function getEmptyMessage(?itemCount:Dynamic, ?filteredItemCount:Dynamic):String;
	function setMaxItems(maxItems:Float):Void;
	function selectPreviousItemView():Dynamic;
	function selectNextItemView():Dynamic;
	function selectItemView(view:Dynamic):Dynamic;
	function scrollToItemView(view:Dynamic):Dynamic;
	function getSelectedItemView():Dynamic;
	function getSelectedItem():Dynamic;
	function confirmSelection():Dynamic;
	function viewForItem(item:Dynamic):JQuery;
	function confirmed(item:Dynamic):Dynamic;
	function getFilterKey():Dynamic;
	function focusFilterEditor():Dynamic;
	function storeFocusedElement():Dynamic;
	function restoreFocus():Dynamic;
	function cancelled():Dynamic;
	function cancel():Dynamic;
}
extern class AtomTopLevel {
	static var $ : Dynamic;
	static var $$ : Dynamic;
	static var $$$ : Dynamic;
	static var BufferedNodeProcess : AtomCore.IBufferedNodeProcessStatic;
	static var BufferedProcess : AtomCore.IBufferedProcessStatic;
	static var Git : AtomCore.IGitStatic;
	static var Point : TextBuffer.IPointStatic;
	static var Range : TextBuffer.IRangeStatic;
	static var WorkspaceView : AtomCore.IWorkspaceViewStatic;
	static var Task : AtomCore.ITaskStatic;
	static var Workspace : AtomCore.IWorkspaceStatic;
}
extern class AtomTopLevel {
	static var $ : Dynamic;
	static var $$ : Dynamic;
	static var $$$ : Dynamic;
	static var BufferedNodeProcess : AtomCore.IBufferedNodeProcessStatic;
	static var BufferedProcess : AtomCore.IBufferedProcessStatic;
	static var Git : AtomCore.IGitStatic;
	static var Point : TextBuffer.IPointStatic;
	static var Range : TextBuffer.IRangeStatic;
	static var WorkspaceView : AtomCore.IWorkspaceViewStatic;
	static var Task : AtomCore.ITaskStatic;
	static var Workspace : AtomCore.IWorkspaceStatic;
}
