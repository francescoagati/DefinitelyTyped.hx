typedef Type = {
	var size : Float;
	var indirection : Float;
	function get(buffer:Buffer, offset:Float):Dynamic;
	function set(buffer:Buffer, offset:Float, value:Dynamic):Void;
	@:optional
	var name : String;
	@:optional
	var alignment : Float;
};
extern class RefTopLevel {
	static var NULL : Buffer;
	static var NULL_POINTER : Buffer;
	static function address(buffer:Buffer):Float;
	static function alloc(type:Type, ?value:Dynamic):Buffer;
	static function alloc(type:String, ?value:Dynamic):Buffer;
	static function allocCString(string:String, ?encoding:String):Buffer;
	static function coerceType(type:Type):Type;
	static function coerceType(type:String):Type;
	static function deref(buffer:Buffer):Dynamic;
	static function derefType(type:Type):Type;
	static function derefType(type:String):Type;
	static var endianness : String;
	static function get(buffer:Buffer, ?offset:Float, ?type:Type):Dynamic;
	static function get(buffer:Buffer, ?offset:Float, ?type:String):Dynamic;
	static function getType(buffer:Buffer):Type;
	static function isNull(buffer:Buffer):Bool;
	static function readCString(buffer:Buffer, ?offset:Float):String;
	static function readInt64BE(buffer:Buffer, ?offset:Float):Dynamic;
	static function readInt64LE(buffer:Buffer, ?offset:Float):Dynamic;
	static function readObject(buffer:Buffer, ?offset:Float):Dynamic;
	static function readPointer(buffer:Buffer, ?offset:Float, ?length:Float):Buffer;
	static function readUInt64BE(buffer:Buffer, ?offset:Float):Dynamic;
	static function readUInt64LE(buffer:Buffer, ?offset:Float):Dynamic;
	static function ref(buffer:Buffer):Buffer;
	static function refType(type:Type):Type;
	static function refType(type:String):Type;
	static function reinterpret(buffer:Buffer, size:Float, ?offset:Float):Buffer;
	static function reinterpretUntilZeros(buffer:Buffer, size:Float, ?offset:Float):Buffer;
	static function set(buffer:Buffer, offset:Float, value:Dynamic, ?type:Type):Void;
	static function set(buffer:Buffer, offset:Float, value:Dynamic, ?type:String):Void;
	static function writeCString(buffer:Buffer, offset:Float, string:String, ?encoding:String):Void;
	static function writeInt64BE(buffer:Buffer, offset:Float, input:Float):Void;
	static function writeInt64BE(buffer:Buffer, offset:Float, input:String):Void;
	static function writeInt64LE(buffer:Buffer, offset:Float, input:Float):Void;
	static function writeInt64LE(buffer:Buffer, offset:Float, input:String):Void;
	static function writeObject(buffer:Buffer, offset:Float, object:Dynamic):Void;
	static function writePointer(buffer:Buffer, offset:Float, pointer:Buffer):Void;
	static function writeUInt64BE(buffer:Buffer, offset:Float, input:Float):Void;
	static function writeUInt64BE(buffer:Buffer, offset:Float, input:String):Void;
	static function _attach(buffer:Buffer, object:Dynamic):Void;
	static function _reinterpret(buffer:Buffer, size:Float, ?offset:Float):Buffer;
	static function _reinterpretUntilZeros(buffer:Buffer, size:Float, ?offset:Float):Buffer;
	static function _writePointer(buffer:Buffer, offset:Float, pointer:Buffer):Void;
	static function _writeObject(buffer:Buffer, offset:Float, object:Dynamic):Void;
	static var types : { var void : Type; var int64 : Type; var ushort : Type; var int : Type; var uint64 : Type; var float : Type; var uint : Type; var long : Type; var double : Type; var int8 : Type; var ulong : Type; var Object : Type; var uint8 : Type; var longlong : Type; var CString : Type; var int16 : Type; var ulonglong : Type; var bool : Type; var uint16 : Type; var char : Type; var byte : Type; var int32 : Type; var uchar : Type; var size_t : Type; var uint32 : Type; var short : Type; };
}
extern class RefTopLevel {
	static var NULL : Buffer;
	static var NULL_POINTER : Buffer;
	static function address(buffer:Buffer):Float;
	static function alloc(type:Type, ?value:Dynamic):Buffer;
	static function alloc(type:String, ?value:Dynamic):Buffer;
	static function allocCString(string:String, ?encoding:String):Buffer;
	static function coerceType(type:Type):Type;
	static function coerceType(type:String):Type;
	static function deref(buffer:Buffer):Dynamic;
	static function derefType(type:Type):Type;
	static function derefType(type:String):Type;
	static var endianness : String;
	static function get(buffer:Buffer, ?offset:Float, ?type:Type):Dynamic;
	static function get(buffer:Buffer, ?offset:Float, ?type:String):Dynamic;
	static function getType(buffer:Buffer):Type;
	static function isNull(buffer:Buffer):Bool;
	static function readCString(buffer:Buffer, ?offset:Float):String;
	static function readInt64BE(buffer:Buffer, ?offset:Float):Dynamic;
	static function readInt64LE(buffer:Buffer, ?offset:Float):Dynamic;
	static function readObject(buffer:Buffer, ?offset:Float):Dynamic;
	static function readPointer(buffer:Buffer, ?offset:Float, ?length:Float):Buffer;
	static function readUInt64BE(buffer:Buffer, ?offset:Float):Dynamic;
	static function readUInt64LE(buffer:Buffer, ?offset:Float):Dynamic;
	static function ref(buffer:Buffer):Buffer;
	static function refType(type:Type):Type;
	static function refType(type:String):Type;
	static function reinterpret(buffer:Buffer, size:Float, ?offset:Float):Buffer;
	static function reinterpretUntilZeros(buffer:Buffer, size:Float, ?offset:Float):Buffer;
	static function set(buffer:Buffer, offset:Float, value:Dynamic, ?type:Type):Void;
	static function set(buffer:Buffer, offset:Float, value:Dynamic, ?type:String):Void;
	static function writeCString(buffer:Buffer, offset:Float, string:String, ?encoding:String):Void;
	static function writeInt64BE(buffer:Buffer, offset:Float, input:Float):Void;
	static function writeInt64BE(buffer:Buffer, offset:Float, input:String):Void;
	static function writeInt64LE(buffer:Buffer, offset:Float, input:Float):Void;
	static function writeInt64LE(buffer:Buffer, offset:Float, input:String):Void;
	static function writeObject(buffer:Buffer, offset:Float, object:Dynamic):Void;
	static function writePointer(buffer:Buffer, offset:Float, pointer:Buffer):Void;
	static function writeUInt64BE(buffer:Buffer, offset:Float, input:Float):Void;
	static function writeUInt64BE(buffer:Buffer, offset:Float, input:String):Void;
	static function _attach(buffer:Buffer, object:Dynamic):Void;
	static function _reinterpret(buffer:Buffer, size:Float, ?offset:Float):Buffer;
	static function _reinterpretUntilZeros(buffer:Buffer, size:Float, ?offset:Float):Buffer;
	static function _writePointer(buffer:Buffer, offset:Float, pointer:Buffer):Void;
	static function _writeObject(buffer:Buffer, offset:Float, object:Dynamic):Void;
	static var types : { var void : Type; var int64 : Type; var ushort : Type; var int : Type; var uint64 : Type; var float : Type; var uint : Type; var long : Type; var double : Type; var int8 : Type; var ulong : Type; var Object : Type; var uint8 : Type; var longlong : Type; var CString : Type; var int16 : Type; var ulonglong : Type; var bool : Type; var uint16 : Type; var char : Type; var byte : Type; var int32 : Type; var uchar : Type; var size_t : Type; var uint32 : Type; var short : Type; };
}
