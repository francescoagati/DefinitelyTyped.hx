extern class GeolocationTopLevel {
	static var ACCURACY_BEST : Float;
	static var ACCURACY_BEST_FOR_NAVIGATION : Float;
	static var ACCURACY_HIGH : Float;
	static var ACCURACY_HUNDRED_METERS : Float;
	static var ACCURACY_KILOMETER : Float;
	static var ACCURACY_LOW : Float;
	static var ACCURACY_NEAREST_TEN_METERS : Float;
	static var ACCURACY_THREE_KILOMETERS : Float;
	static var ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION : String;
	static var ACTIVITYTYPE_FITNESS : String;
	static var ACTIVITYTYPE_OTHER : String;
	static var ACTIVITYTYPE_OTHER_NAVIGATION : String;
	static var AUTHORIZATION_ALWAYS : Float;
	static var AUTHORIZATION_AUTHORIZED : Float;
	static var AUTHORIZATION_DENIED : Float;
	static var AUTHORIZATION_RESTRICTED : Float;
	static var AUTHORIZATION_UNKNOWN : Float;
	static var AUTHORIZATION_WHEN_IN_USE : Float;
	static var ERROR_DENIED : Float;
	static var ERROR_HEADING_FAILURE : Float;
	static var ERROR_LOCATION_UNKNOWN : Float;
	static var ERROR_NETWORK : Float;
	static var ERROR_REGION_MONITORING_DELAYED : Float;
	static var ERROR_REGION_MONITORING_DENIED : Float;
	static var ERROR_REGION_MONITORING_FAILURE : Float;
	static var ERROR_TIMEOUT : Float;
	static var PROVIDER_GPS : String;
	static var PROVIDER_NETWORK : String;
	static var PROVIDER_PASSIVE : String;
	static var accuracy : Float;
	static var activityType : Float;
	static var apiName : String;
	static var bubbleParent : Bool;
	static var distanceFilter : Float;
	static var frequency : Float;
	static var hasCompass : Bool;
	static var headingFilter : Float;
	static var lastGeolocation : String;
	static var locationServicesAuthorization : Float;
	static var locationServicesEnabled : Bool;
	static var pauseLocationUpdateAutomatically : Bool;
	static var preferredProvider : String;
	static var purpose : String;
	static var showCalibration : Bool;
	static var trackSignificantLocationChange : Bool;
	static function addEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function applyProperties(props:Dictionary<Dynamic>):Void;
	static function fireEvent(name:String, event:Dictionary<Dynamic>):Void;
	static function forwardGeocoder(address:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function getAccuracy():Float;
	static function getActivityType():Float;
	static function getApiName():String;
	static function getBubbleParent():Bool;
	static function getCurrentHeading(callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function getCurrentPosition(callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function getDistanceFilter():Float;
	static function getFrequency():Float;
	static function getHasCompass():Bool;
	static function getHeadingFilter():Float;
	static function getLastGeolocation():String;
	static function getLocationServicesAuthorization():Float;
	static function getLocationServicesEnabled():Bool;
	static function getPauseLocationUpdateAutomatically():Bool;
	static function getPreferredProvider():String;
	static function getPurpose():String;
	static function getShowCalibration():Bool;
	static function getTrackSignificantLocationChange():Bool;
	static function removeEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function reverseGeocoder(latitude:Float, longitude:Float, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function setAccuracy(accuracy:Float):Void;
	static function setActivityType(activityType:Float):Void;
	static function setBubbleParent(bubbleParent:Bool):Void;
	static function setDistanceFilter(distanceFilter:Float):Void;
	static function setFrequency(frequency:Float):Void;
	static function setHeadingFilter(headingFilter:Float):Void;
	static function setLocationServicesAuthorization(locationServicesAuthorization:Float):Void;
	static function setPauseLocationUpdateAutomatically(pauseLocationUpdateAutomatically:Bool):Void;
	static function setPreferredProvider(preferredProvider:String):Void;
	static function setPurpose(purpose:String):Void;
	static function setShowCalibration(showCalibration:Bool):Void;
	static function setTrackSignificantLocationChange(trackSignificantLocationChange:Bool):Void;
}
