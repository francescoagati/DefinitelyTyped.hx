typedef Event = {
	>Ti.Proxy,
	var alerts : Array<Ti.Android.Calendar.Alert>;
	var allDay : Bool;
	var begin : Date;
	var description : String;
	var end : Date;
	var extendedProperties : Dictionary<Dynamic>;
	var hasAlarm : Bool;
	var hasExtendedProperties : Bool;
	var id : String;
	var location : String;
	var reminders : Array<Ti.Android.Calendar.Reminder>;
	var status : Float;
	var title : String;
	var visibility : Float;
	function createAlert(data:Dictionary<Ti.Android.Calendar.Alert>):Ti.Android.Calendar.Alert;
	function createReminder(data:Dictionary<Ti.Android.Calendar.Reminder>):Ti.Android.Calendar.Reminder;
	function getAlerts():Array<Ti.Android.Calendar.Alert>;
	function getAllDay():Bool;
	function getBegin():Date;
	function getDescription():String;
	function getEnd():Date;
	function getExtendedProperties():Dictionary<Dynamic>;
	function getExtendedProperty(name:String):String;
	function getHasAlarm():Bool;
	function getHasExtendedProperties():Bool;
	function getId():String;
	function getLocation():String;
	function getReminders():Array<Ti.Android.Calendar.Reminder>;
	function getStatus():Float;
	function getTitle():String;
	function getVisibility():Float;
	function setExtendedProperty(name:String, value:String):Void;
};
typedef Reminder = {
	>Ti.Proxy,
	var id : String;
	var method : Float;
	var minutes : Float;
	function getId():String;
	function getMethod():Float;
	function getMinutes():Float;
};
typedef Calendar = {
	>Ti.Proxy,
	var hidden : Bool;
	var id : String;
	var name : String;
	var selected : Bool;
	function createEvent(properties:Dictionary<Ti.Android.Calendar.Event>):Ti.Android.Calendar.Event;
	function getEventById(id:Float):Ti.Android.Calendar.Event;
	function getEventsBetweenDates(date1:Date, date2:Date):Array<Ti.Android.Calendar.Event>;
	function getEventsInDate(year:Float, month:Float, day:Float):Array<Ti.Android.Calendar.Event>;
	function getEventsInMonth(year:Float, month:Float):Array<Ti.Android.Calendar.Event>;
	function getEventsInYear(year:Float):Array<Ti.Android.Calendar.Event>;
	function getHidden():Bool;
	function getId():String;
	function getName():String;
	function getSelected():Bool;
};
typedef Alert = {
	>Ti.Proxy,
	var alarmTime : Date;
	var begin : Date;
	var end : Date;
	var eventId : Float;
	var id : String;
	var minutes : Float;
	var state : Float;
	function getAlarmTime():Date;
	function getBegin():Date;
	function getEnd():Date;
	function getEventId():Float;
	function getId():String;
	function getMinutes():Float;
	function getState():Float;
};
extern class CalendarTopLevel {
	static var METHOD_ALERT : Float;
	static var METHOD_DEFAULT : Float;
	static var METHOD_EMAIL : Float;
	static var METHOD_SMS : Float;
	static var STATE_DISMISSED : Float;
	static var STATE_FIRED : Float;
	static var STATE_SCHEDULED : Float;
	static var STATUS_CANCELED : Float;
	static var STATUS_CONFIRMED : Float;
	static var STATUS_TENTATIVE : Float;
	static var VISIBILITY_CONFIDENTIAL : Float;
	static var VISIBILITY_DEFAULT : Float;
	static var VISIBILITY_PRIVATE : Float;
	static var VISIBILITY_PUBLIC : Float;
	static var allAlerts : Array<Ti.Android.Calendar.Alert>;
	static var allCalendars : Array<Ti.Android.Calendar.Calendar>;
	static var apiName : String;
	static var bubbleParent : Bool;
	static var selectableCalendars : Array<Ti.Android.Calendar.Calendar>;
	static function addEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function applyProperties(props:Dictionary<Dynamic>):Void;
	static function fireEvent(name:String, event:Dictionary<Dynamic>):Void;
	static function getAllAlerts():Array<Ti.Android.Calendar.Alert>;
	static function getAllCalendars():Array<Ti.Android.Calendar.Calendar>;
	static function getApiName():String;
	static function getBubbleParent():Bool;
	static function getCalendarById(id:Float):Ti.Android.Calendar.Calendar;
	static function getSelectableCalendars():Array<Ti.Android.Calendar.Calendar>;
	static function removeEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function setBubbleParent(bubbleParent:Bool):Void;
	static var AUTHORIZATION_AUTHORIZED : Float;
	static var AUTHORIZATION_DENIED : Float;
	static var AUTHORIZATION_RESTRICTED : Float;
	static var AUTHORIZATION_UNKNOWN : Float;
	static var AVAILABILITY_BUSY : Float;
	static var AVAILABILITY_FREE : Float;
	static var AVAILABILITY_NOTSUPPORTED : Float;
	static var AVAILABILITY_TENTATIVE : Float;
	static var AVAILABILITY_UNAVAILABLE : Float;
	static var METHOD_ALERT : Float;
	static var METHOD_DEFAULT : Float;
	static var METHOD_EMAIL : Float;
	static var METHOD_SMS : Float;
	static var RECURRENCEFREQUENCY_DAILY : Float;
	static var RECURRENCEFREQUENCY_MONTHLY : Float;
	static var RECURRENCEFREQUENCY_WEEKLY : Float;
	static var RECURRENCEFREQUENCY_YEARLY : Float;
	static var SPAN_FUTUREEVENTS : Float;
	static var SPAN_THISEVENT : Float;
	static var STATE_DISMISSED : Float;
	static var STATE_FIRED : Float;
	static var STATE_SCHEDULED : Float;
	static var STATUS_CANCELED : Float;
	static var STATUS_CONFIRMED : Float;
	static var STATUS_NONE : Float;
	static var STATUS_TENTATIVE : Float;
	static var VISIBILITY_CONFIDENTIAL : Float;
	static var VISIBILITY_DEFAULT : Float;
	static var VISIBILITY_PRIVATE : Float;
	static var VISIBILITY_PUBLIC : Float;
	static var allAlerts : Array<Ti.Calendar.Alert>;
	static var allCalendars : Array<Ti.Calendar.Calendar>;
	static var allEditableCalendars : Array<Ti.Calendar.Calendar>;
	static var apiName : String;
	static var bubbleParent : Bool;
	static var defaultCalendar : Ti.Calendar.Calendar;
	static var eventsAuthorization : Float;
	static var selectableCalendars : Array<Ti.Calendar.Calendar>;
	static function addEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function applyProperties(props:Dictionary<Dynamic>):Void;
	static function fireEvent(name:String, event:Dictionary<Dynamic>):Void;
	static function getAllAlerts():Array<Ti.Calendar.Alert>;
	static function getAllCalendars():Array<Ti.Calendar.Calendar>;
	static function getAllEditableCalendars():Array<Ti.Calendar.Calendar>;
	static function getApiName():String;
	static function getBubbleParent():Bool;
	static function getCalendarById(id:String):Ti.Calendar.Calendar;
	static function getDefaultCalendar():Ti.Calendar.Calendar;
	static function getEventsAuthorization():Float;
	static function getSelectableCalendars():Array<Ti.Calendar.Calendar>;
	static function removeEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function requestEventsAuthorization(callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function setBubbleParent(bubbleParent:Bool):Void;
}
typedef MenuItem = {
	>Ti.Proxy,
	var actionView : Ti.UI.View;
	var actionViewExpanded : Bool;
	var checkable : Bool;
	var checked : Bool;
	var enabled : Bool;
	var groupId : Float;
	var icon : Dynamic;
	var itemId : Float;
	var order : Float;
	var showAsAction : Float;
	var title : String;
	var titleCondensed : String;
	var visible : Bool;
	function collapseActionView():Void;
	function expandActionView():Void;
	function getActionView():Ti.UI.View;
	function getGroupId():Float;
	function getItemId():Float;
	function getOrder():Float;
	function getTitle():String;
	function getTitleCondensed():String;
	function isActionViewExpanded():Bool;
	function isCheckable():Bool;
	function isChecked():Bool;
	function isEnabled():Bool;
	function isVisible():Bool;
	function setActionView(actionView:Ti.UI.View):Void;
	function setCheckable(checkable:Bool):Void;
	function setChecked(enabled:Bool):Void;
	function setEnabled(enabled:Bool):Void;
	@:overload(function(icon:String):Void { })
	function setIcon(icon:Float):Void;
	function setShowAsAction(showAsAction:Float):Void;
	function setTitle(title:String):Void;
	function setTitleCondensed(titleCondensed:String):Void;
	function setVisible(visible:Bool):Void;
};
typedef NotificationManager = {
	var DEFAULT_ALL : Float;
	var DEFAULT_LIGHTS : Float;
	var DEFAULT_SOUND : Float;
	var DEFAULT_VIBRATE : Float;
	var FLAG_AUTO_CANCEL : Float;
	var FLAG_INSISTENT : Float;
	var FLAG_NO_CLEAR : Float;
	var FLAG_ONGOING_EVENT : Float;
	var FLAG_ONLY_ALERT_ONCE : Float;
	var FLAG_SHOW_LIGHTS : Float;
	var STREAM_DEFAULT : Float;
	function cancel(id:Float):Void;
	function cancelAll():Void;
	function notify(id:Float, notification:Ti.Android.Notification):Void;
};
typedef R = {
	>Ti.Proxy,
	var anim : Dynamic;
	var array : Dynamic;
	var attr : Dynamic;
	var color : Dynamic;
	var dimen : Dynamic;
	var drawable : Dynamic;
	var id : Dynamic;
	var integer : Dynamic;
	var layout : Dynamic;
	var string : Dynamic;
	var style : Dynamic;
	var styleable : Dynamic;
};
typedef ActionBar = {
	>Ti.Proxy,
	var backgroundImage : String;
	var displayHomeAsUp : Bool;
	var homeButtonEnabled : Bool;
	var icon : String;
	var logo : String;
	var navigationMode : Float;
	var onHomeIconItemSelected : haxe.extern.Rest<Dynamic> -> Dynamic;
	var subtitle : String;
	var title : String;
	function getNavigationMode():Float;
	function getSubtitle():String;
	function getTitle():String;
	function hide():Void;
	function setBackgroundImage(backgroundImage:String):Void;
	function setDisplayHomeAsUp(displayHomeAsUp:Bool):Void;
	function setDisplayShowHomeEnabled(show:Bool):Void;
	function setDisplayShowTitleEnabled(show:Bool):Void;
	function setHomeButtonEnabled(homeButtonEnabled:Bool):Void;
	function setIcon(icon:String):Void;
	function setLogo(logo:String):Void;
	function setNavigationMode(navigationMode:Float):Void;
	function setOnHomeIconItemSelected(onHomeIconItemSelected:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setSubtitle(subtitle:String):Void;
	function setTitle(title:String):Void;
	function show():Void;
};
typedef BroadcastReceiver = {
	>Ti.Proxy,
	var onReceived : haxe.extern.Rest<Dynamic> -> Dynamic;
	var url : String;
	function getOnReceived():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getUrl():String;
	function setOnReceived(onReceived:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setUrl(url:String):Void;
};
typedef Menu = {
	>Ti.Proxy,
	var items : Array<Ti.Android.MenuItem>;
	function add(options:Dynamic):Ti.Android.MenuItem;
	function clear():Void;
	function close():Void;
	@:overload(function(item:Ti.Android.MenuItem):Ti.Android.MenuItem { })
	function findItem(item:Float):Ti.Android.MenuItem;
	function getItem(index:Float):Ti.Android.MenuItem;
	function getItems():Array<Ti.Android.MenuItem>;
	function hasVisibleItems():Bool;
	function removeGroup(groupId:Float):Void;
	function removeItem(itemId:Float):Void;
	function setGroupEnabled(groupId:Float, enabled:Bool):Void;
	function setGroupVisible(groupId:Float, visible:Bool):Void;
	function size():Float;
};
typedef Activity = {
	>Ti.Proxy,
	var actionBar : Ti.Android.ActionBar;
	var intent : Ti.Android.Intent;
	var onCreate : haxe.extern.Rest<Dynamic> -> Dynamic;
	var onCreateOptionsMenu : haxe.extern.Rest<Dynamic> -> Dynamic;
	var onDestroy : haxe.extern.Rest<Dynamic> -> Dynamic;
	var onPause : haxe.extern.Rest<Dynamic> -> Dynamic;
	var onPrepareOptionsMenu : haxe.extern.Rest<Dynamic> -> Dynamic;
	var onRestart : haxe.extern.Rest<Dynamic> -> Dynamic;
	var onResume : haxe.extern.Rest<Dynamic> -> Dynamic;
	var onStart : haxe.extern.Rest<Dynamic> -> Dynamic;
	var onStop : haxe.extern.Rest<Dynamic> -> Dynamic;
	var requestedOrientation : Float;
	function finish():Void;
	function getActionBar():Ti.Android.ActionBar;
	function getIntent():Ti.Android.Intent;
	function getOnCreate():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getOnCreateOptionsMenu():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getOnDestroy():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getOnPause():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getOnPrepareOptionsMenu():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getOnRestart():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getOnResume():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getOnStart():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getOnStop():haxe.extern.Rest<Dynamic> -> Dynamic;
	function getString(resourceId:Float, format:Dynamic):String;
	function invalidateOptionsMenu():Void;
	function openOptionsMenu():Void;
	function sendBroadcast(intent:Ti.Android.Intent):Void;
	function sendBroadcastWithPermission(intent:Ti.Android.Intent, ?receiverPermission:String):Void;
	function setOnCreate(onCreate:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setOnCreateOptionsMenu(onCreateOptionsMenu:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setOnDestroy(onDestroy:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setOnPause(onPause:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setOnPrepareOptionsMenu(onPrepareOptionsMenu:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setOnRestart(onRestart:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setOnResume(onResume:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setOnStart(onStart:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setOnStop(onStop:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	function setRequestedOrientation(orientation:Float):Void;
	function setResult(resultCode:Float, ?intent:Ti.Android.Intent):Void;
	function startActivity(intent:Ti.Android.Intent):Void;
	function startActivityForResult(intent:Ti.Android.Intent, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
};
typedef Service = {
	>Ti.Proxy,
	var intent : Ti.Android.Intent;
	var serviceInstanceId : Float;
	function getIntent():Ti.Android.Intent;
	function getServiceInstanceId():Float;
	function start():Void;
	function stop():Void;
};
typedef RemoteViews = {
	>Ti.Proxy,
	var layoutId : Float;
	var packageName : String;
	function getLayoutId():Float;
	function getPackageName():String;
	function setBoolean(viewId:Float, methodName:String, value:Bool):Void;
	function setChronometer(viewId:Float, base:Date, format:String, started:Bool):Void;
	function setDouble(viewId:Float, methodName:String, value:Float):Void;
	function setImageViewResource(viewId:Float, srcId:Float):Void;
	function setImageViewUri(viewId:Float, uri:String):Void;
	function setInt(viewId:Float, methodName:String, value:Float):Void;
	function setOnClickPendingIntent(viewId:Float, pendingIntent:Ti.Android.PendingIntent):Void;
	function setProgressBar(viewId:Float, max:Float, progress:Float, indeterminate:Bool):Void;
	function setString(viewId:Float, methodName:String, value:String):Void;
	function setTextColor(viewId:Float, color:Float):Void;
	function setTextViewText(viewId:Float, text:String):Void;
	function setUri(viewId:Float, methodName:String, value:String):Void;
	function setViewVisibility(viewId:Float, visibility:Float):Void;
};
typedef PendingIntent = {
	>Ti.Proxy,
	var flags : Float;
	var intent : Ti.Android.Intent;
	var updateCurrentIntent : Bool;
	function getFlags():Float;
	function getIntent():Ti.Android.Intent;
	function getUpdateCurrentIntent():Bool;
};
typedef Calendar = {
	>Ti.Proxy,
	var hidden : Bool;
	var id : String;
	var name : String;
	var selected : Bool;
	function createEvent(properties:Dictionary<Ti.Calendar.Event>):Ti.Calendar.Event;
	function getEventById(id:Float):Ti.Calendar.Event;
	function getEventsBetweenDates(date1:Date, date2:Date):Array<Ti.Calendar.Event>;
	function getEventsInDate(year:Float, month:Float, day:Float):Array<Ti.Calendar.Event>;
	function getEventsInMonth(year:Float, month:Float):Array<Ti.Calendar.Event>;
	function getEventsInYear(year:Float):Array<Ti.Calendar.Event>;
	function getHidden():Bool;
	function getId():String;
	function getName():String;
	function getSelected():Bool;
};
typedef Reminder = {
	>Ti.Proxy,
	var id : String;
	var method : Float;
	var minutes : Float;
	function getId():String;
	function getMethod():Float;
	function getMinutes():Float;
};
typedef Event = {
	>Ti.Proxy,
	var alerts : Array<Ti.Calendar.Alert>;
	var allDay : Bool;
	var availability : Float;
	var begin : Date;
	var description : String;
	var end : Date;
	var extendedProperties : Dictionary<Dynamic>;
	var hasAlarm : Bool;
	var id : String;
	var isDetached : Bool;
	var location : String;
	var notes : String;
	var recurenceRule : Ti.Calendar.RecurrenceRule;
	var recurenceRules : Array<Ti.Calendar.RecurrenceRule>;
	var reminders : Array<Ti.Calendar.Reminder>;
	var status : Float;
	var title : String;
	var visibility : Float;
	function addRecurrenceRule(rule:Ti.Calendar.RecurrenceRule):Void;
	function createAlert(data:Dictionary<Ti.Calendar.Alert>):Ti.Calendar.Alert;
	function createRecurenceRule(data:Dictionary<Ti.Calendar.RecurrenceRule>):Ti.Calendar.RecurrenceRule;
	function createReminder(data:Dictionary<Ti.Calendar.Reminder>):Ti.Calendar.Reminder;
	function getAlerts():Array<Ti.Calendar.Alert>;
	function getAllDay():Bool;
	function getAvailability():Float;
	function getBegin():Date;
	function getDescription():String;
	function getEnd():Date;
	function getExtendedProperties():Dictionary<Dynamic>;
	function getExtendedProperty(name:String):String;
	function getHasAlarm():Bool;
	function getId():String;
	function getIsDetached():Bool;
	function getLocation():String;
	function getNotes():String;
	function getRecurenceRule():Ti.Calendar.RecurrenceRule;
	function getRecurenceRules():Array<Ti.Calendar.RecurrenceRule>;
	function getReminders():Array<Ti.Calendar.Reminder>;
	function getStatus():Float;
	function getTitle():String;
	function getVisibility():Float;
	function refresh():Bool;
	function remove(span:Float):Bool;
	function removeRecurenceRule(rule:Ti.Calendar.RecurrenceRule):Void;
	function save(span:Float):Bool;
	function setAlerts(alerts:Array<Ti.Calendar.Alert>):Void;
	function setAllDay(allDay:Bool):Void;
	function setBegin(begin:Date):Void;
	function setEnd(end:Date):Void;
	function setExtendedProperty(name:String, value:String):Void;
	function setLocation(location:String):Void;
	function setNotes(notes:String):Void;
	function setRecurenceRule(recurenceRule:Ti.Calendar.RecurrenceRule):Void;
	function setRecurenceRules(recurenceRules:Array<Ti.Calendar.RecurrenceRule>):Void;
	function setTitle(title:String):Void;
};
typedef RecurrenceRule = {
	>Ti.Proxy,
	var calendarID : String;
	var daysOfTheMonth : Array<Number>;
	var daysOfTheWeek : DaysOfTheWeekDictionary;
	var daysOfTheYear : Array<Number>;
	var end : RecurrenceEndDictionary;
	var frequency : Float;
	var interval : Float;
	var monthsOfTheYear : Array<Number>;
	var setPositions : Array<Number>;
	var weeksOfTheYear : Array<Number>;
	function getCalendarID():String;
	function getDaysOfTheMonth():Array<Number>;
	function getDaysOfTheWeek():DaysOfTheWeekDictionary;
	function getDaysOfTheYear():Array<Number>;
	function getEnd():RecurrenceEndDictionary;
	function getFrequency():Float;
	function getInterval():Float;
	function getMonthsOfTheYear():Array<Number>;
	function getSetPositions():Array<Number>;
	function getWeeksOfTheYear():Array<Number>;
};
typedef Alert = {
	>Ti.Proxy,
	var absoluteDate : Date;
	var alarmTime : Date;
	var begin : Date;
	var end : Date;
	var eventId : Float;
	var id : String;
	var minutes : Float;
	var relativeOffset : Float;
	var state : Float;
	function getAbsoluteDate():Date;
	function getAlarmTime():Date;
	function getBegin():Date;
	function getEnd():Date;
	function getEventId():Float;
	function getId():String;
	function getMinutes():Float;
	function getRelativeOffset():Float;
	function getState():Float;
	function setAbsoluteDate(absoluteDate:Date):Void;
	function setRelativeOffset(relativeOffset:Float):Void;
};
extern class CalendarTopLevel {
	static var METHOD_ALERT : Float;
	static var METHOD_DEFAULT : Float;
	static var METHOD_EMAIL : Float;
	static var METHOD_SMS : Float;
	static var STATE_DISMISSED : Float;
	static var STATE_FIRED : Float;
	static var STATE_SCHEDULED : Float;
	static var STATUS_CANCELED : Float;
	static var STATUS_CONFIRMED : Float;
	static var STATUS_TENTATIVE : Float;
	static var VISIBILITY_CONFIDENTIAL : Float;
	static var VISIBILITY_DEFAULT : Float;
	static var VISIBILITY_PRIVATE : Float;
	static var VISIBILITY_PUBLIC : Float;
	static var allAlerts : Array<Ti.Android.Calendar.Alert>;
	static var allCalendars : Array<Ti.Android.Calendar.Calendar>;
	static var apiName : String;
	static var bubbleParent : Bool;
	static var selectableCalendars : Array<Ti.Android.Calendar.Calendar>;
	static function addEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function applyProperties(props:Dictionary<Dynamic>):Void;
	static function fireEvent(name:String, event:Dictionary<Dynamic>):Void;
	static function getAllAlerts():Array<Ti.Android.Calendar.Alert>;
	static function getAllCalendars():Array<Ti.Android.Calendar.Calendar>;
	static function getApiName():String;
	static function getBubbleParent():Bool;
	static function getCalendarById(id:Float):Ti.Android.Calendar.Calendar;
	static function getSelectableCalendars():Array<Ti.Android.Calendar.Calendar>;
	static function removeEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function setBubbleParent(bubbleParent:Bool):Void;
	static var AUTHORIZATION_AUTHORIZED : Float;
	static var AUTHORIZATION_DENIED : Float;
	static var AUTHORIZATION_RESTRICTED : Float;
	static var AUTHORIZATION_UNKNOWN : Float;
	static var AVAILABILITY_BUSY : Float;
	static var AVAILABILITY_FREE : Float;
	static var AVAILABILITY_NOTSUPPORTED : Float;
	static var AVAILABILITY_TENTATIVE : Float;
	static var AVAILABILITY_UNAVAILABLE : Float;
	static var METHOD_ALERT : Float;
	static var METHOD_DEFAULT : Float;
	static var METHOD_EMAIL : Float;
	static var METHOD_SMS : Float;
	static var RECURRENCEFREQUENCY_DAILY : Float;
	static var RECURRENCEFREQUENCY_MONTHLY : Float;
	static var RECURRENCEFREQUENCY_WEEKLY : Float;
	static var RECURRENCEFREQUENCY_YEARLY : Float;
	static var SPAN_FUTUREEVENTS : Float;
	static var SPAN_THISEVENT : Float;
	static var STATE_DISMISSED : Float;
	static var STATE_FIRED : Float;
	static var STATE_SCHEDULED : Float;
	static var STATUS_CANCELED : Float;
	static var STATUS_CONFIRMED : Float;
	static var STATUS_NONE : Float;
	static var STATUS_TENTATIVE : Float;
	static var VISIBILITY_CONFIDENTIAL : Float;
	static var VISIBILITY_DEFAULT : Float;
	static var VISIBILITY_PRIVATE : Float;
	static var VISIBILITY_PUBLIC : Float;
	static var allAlerts : Array<Ti.Calendar.Alert>;
	static var allCalendars : Array<Ti.Calendar.Calendar>;
	static var allEditableCalendars : Array<Ti.Calendar.Calendar>;
	static var apiName : String;
	static var bubbleParent : Bool;
	static var defaultCalendar : Ti.Calendar.Calendar;
	static var eventsAuthorization : Float;
	static var selectableCalendars : Array<Ti.Calendar.Calendar>;
	static function addEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function applyProperties(props:Dictionary<Dynamic>):Void;
	static function fireEvent(name:String, event:Dictionary<Dynamic>):Void;
	static function getAllAlerts():Array<Ti.Calendar.Alert>;
	static function getAllCalendars():Array<Ti.Calendar.Calendar>;
	static function getAllEditableCalendars():Array<Ti.Calendar.Calendar>;
	static function getApiName():String;
	static function getBubbleParent():Bool;
	static function getCalendarById(id:String):Ti.Calendar.Calendar;
	static function getDefaultCalendar():Ti.Calendar.Calendar;
	static function getEventsAuthorization():Float;
	static function getSelectableCalendars():Array<Ti.Calendar.Calendar>;
	static function removeEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function requestEventsAuthorization(callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function setBubbleParent(bubbleParent:Bool):Void;
}
