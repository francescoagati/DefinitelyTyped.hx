typedef TCPSocket = {
	>Ti.Proxy,
	var hostName : String;
	var isValid : Bool;
	var mode : Float;
	var port : Float;
	var stripTerminator : Bool;
	function close():Void;
	function connect():Void;
	function getHostName():String;
	function getIsValid():Bool;
	function getMode():Float;
	function getPort():Float;
	function getStripTerminator():Bool;
	function listen():Void;
	function setHostName(hostName:String):Void;
	function setIsValid(isValid:Bool):Void;
	function setMode(mode:Float):Void;
	function setPort(port:Float):Void;
	function setStripTerminator(stripTerminator:Bool):Void;
	@:overload(function(data:String, sendTo:Float):Void { })
	function write(data:Dynamic, sendTo:Float):Void;
};
extern class NetworkTopLevel {
	static var INADDR_ANY : String;
	static var NETWORK_LAN : Float;
	static var NETWORK_MOBILE : Float;
	static var NETWORK_NONE : Float;
	static var NETWORK_UNKNOWN : Float;
	static var NETWORK_WIFI : Float;
	static var NOTIFICATION_TYPE_ALERT : Float;
	static var NOTIFICATION_TYPE_BADGE : Float;
	static var NOTIFICATION_TYPE_NEWSSTAND : Float;
	static var NOTIFICATION_TYPE_SOUND : Float;
	static var PROGRESS_UNKNOWN : Float;
	static var READ_MODE : Float;
	static var READ_WRITE_MODE : Float;
	static var SOCKET_CLOSED : Float;
	static var SOCKET_CONNECTED : Float;
	static var SOCKET_ERROR : Float;
	static var SOCKET_INITIALIZED : Float;
	static var SOCKET_LISTENING : Float;
	static var TLS_VERSION_1_0 : Float;
	static var TLS_VERSION_1_1 : Float;
	static var TLS_VERSION_1_2 : Float;
	static var WRITE_MODE : Float;
	static var allHTTPCookies : Array<Ti.Network.Cookie>;
	static var apiName : String;
	static var bubbleParent : Bool;
	static var httpURLFormatter : haxe.extern.Rest<Dynamic> -> Dynamic;
	static var networkType : Float;
	static var networkTypeName : String;
	static var online : Bool;
	static var remoteDeviceUUID : String;
	static var remoteNotificationTypes : Array<Number>;
	static var remoteNotificationsEnabled : Bool;
	static function addConnectivityListener(callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function addEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function addHTTPCookie(cookie:Ti.Network.Cookie):Void;
	static function addSystemCookie(cookie:Ti.Network.Cookie):Void;
	static function applyProperties(props:Dictionary<Dynamic>):Void;
	static function createBonjourBrowser(serviceType:String, domain:String, ?parameters:Dictionary<Ti.Network.BonjourBrowser>):Ti.Network.BonjourBrowser;
	static function createBonjourService(name:String, type:String, domain:String, ?parameters:Dictionary<Ti.Network.BonjourService>):Ti.Network.BonjourService;
	static function createCookie(?parameters:Dictionary<Ti.Network.Cookie>):Ti.Network.Cookie;
	static function createHTTPClient(?parameters:Dictionary<Ti.Network.HTTPClient>):Ti.Network.HTTPClient;
	static function createTCPSocket(hostName:String, port:Float, mode:Float, parameters:Dictionary<Ti.Network.TCPSocket>):Ti.Network.TCPSocket;
	static function decodeURIComponent(value:String):String;
	static function encodeURIComponent(value:String):String;
	static function fireEvent(name:String, event:Dictionary<Dynamic>):Void;
	static function getAllHTTPCookies():Array<Ti.Network.Cookie>;
	static function getApiName():String;
	static function getBubbleParent():Bool;
	static function getHTTPCookies(domain:String, path:String, name:String):Array<Ti.Network.Cookie>;
	static function getHTTPCookiesForDomain(domain:String):Array<Ti.Network.Cookie>;
	static function getHttpURLFormatter():haxe.extern.Rest<Dynamic> -> Dynamic;
	static function getNetworkType():Float;
	static function getNetworkTypeName():String;
	static function getOnline():Bool;
	static function getRemoteDeviceUUID():String;
	static function getRemoteNotificationTypes():Array<Number>;
	static function getRemoteNotificationsEnabled():Bool;
	static function getSystemCookies(domain:String, path:String, name:String):Array<Ti.Network.Cookie>;
	static function registerForPushNotifications(config:PushNotificationConfig):Void;
	static function removeAllHTTPCookies():Void;
	static function removeAllSystemCookies():Void;
	static function removeConnectivityListener(callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function removeEventListener(name:String, callback:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function removeHTTPCookie(domain:String, path:String, name:String):Void;
	static function removeHTTPCookiesForDomain(domain:String):Void;
	static function removeSystemCookie(domain:String, path:String, name:String):Void;
	static function setBubbleParent(bubbleParent:Bool):Void;
	static function setHttpURLFormatter(httpURLFormatter:haxe.extern.Rest<Dynamic> -> Dynamic):Void;
	static function unregisterForPushNotifications():Void;
}
