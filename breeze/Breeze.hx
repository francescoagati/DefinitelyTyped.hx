typedef Entity = {
	var entityAspect : EntityAspect;
	var entityType : EntityType;
};
typedef ComplexObject = {
	var complexAspect : ComplexAspect;
	var complexType : ComplexType;
};
typedef IProperty = {
	var name : String;
	var parentType : IStructuralType;
	var validators : Array<Validator>;
	var isDataProperty : Bool;
	var isNavigationProperty : Bool;
};
typedef IStructuralType = {
	var complexProperties : Array<DataProperty>;
	var dataProperties : Array<DataProperty>;
	var name : String;
	var namespace : String;
	var shortName : String;
	var unmappedProperties : Array<DataProperty>;
	var validators : Array<Validator>;
};
extern class AutoGeneratedKeyType {
	static var Identity : AutoGeneratedKeyType;
	static var KeyGenerator : AutoGeneratedKeyType;
	static var None : AutoGeneratedKeyType;
}
extern class ComplexAspect {
	var complexObject : ComplexObject;
	function getEntityAspect():EntityAspect;
	var parent : Dynamic;
	var parentProperty : DataProperty;
	function getPropertyPath(propName:String):String;
	var originalValues : Dynamic;
}
extern class ComplexType {
	var complexProperties : Array<DataProperty>;
	var dataProperties : Array<DataProperty>;
	var name : String;
	var namespace : String;
	var shortName : String;
	var unmappedProperties : Array<DataProperty>;
	var validators : Array<Validator>;
	function addProperty(dataProperty:DataProperty):ComplexType;
	function getProperties():Array<DataProperty>;
}
extern class DataProperty {
	var complexTypeName : String;
	var concurrencyMode : String;
	var dataType : DataTypeSymbol;
	var defaultValue : Dynamic;
	var isComplexProperty : Bool;
	var isDataProperty : Bool;
	var isInherited : Bool;
	var isNavigationProperty : Bool;
	var isNullable : Bool;
	var isPartOfKey : Bool;
	var isUnmapped : Bool;
	var maxLength : Float;
	var name : String;
	var nameOnServer : String;
	var parentType : IStructuralType;
	var relatedNavigationProperty : NavigationProperty;
	var validators : Array<Validator>;
	function new(config:DataPropertyOptions):Void;
}
typedef DataPropertyOptions = {
	@:optional
	var complexTypeName : String;
	@:optional
	var concurrencyMode : String;
	@:optional
	var custom : Dynamic;
	@:optional
	var dataType : DataTypeSymbol;
	@:optional
	var defaultValue : Dynamic;
	@:optional
	var displayName : String;
	@:optional
	var isNullable : Bool;
	@:optional
	var isPartOfKey : Bool;
	@:optional
	var isScalar : Bool;
	@:optional
	var isUnmapped : Bool;
	@:optional
	var maxLength : Float;
	@:optional
	var name : String;
	@:optional
	var nameOnServer : String;
	@:optional
	var validators : Array<Validator>;
};
extern class DataService {
	var adapterInstance : DataServiceAdapter;
	var adapterName : String;
	var hasServerMetadata : Bool;
	var serviceName : String;
	var uriBuilderName : String;
	var jsonResultsAdapter : JsonResultsAdapter;
	var useJsonp : Bool;
	function new(config:DataServiceOptions):Void;
	function using(config:DataServiceOptions):DataService;
}
typedef DataServiceOptions = {
	@:optional
	var serviceName : String;
	@:optional
	var adapterName : String;
	@:optional
	var uriBuilderName : String;
	@:optional
	var hasServerMetadata : Bool;
	@:optional
	var jsonResultsAdapter : JsonResultsAdapter;
	@:optional
	var useJsonp : Bool;
};
extern class DataServiceAdapter {
	function checkForRecomposition(interfaceInitializedArgs:{ var interfaceName : String; var isDefault : Bool; }):Void;
	function initialize():Void;
	function fetchMetadata(metadataStore:MetadataStore, dataService:DataService):breeze.promises.IPromise<Dynamic>;
	function executeQuery(mappingContext:{ var getUrl : Void -> String; var query : EntityQuery; var dataService : DataService; }):breeze.promises.IPromise<Dynamic>;
	function saveChanges(saveContext:{ var resourceName : String; var dataService : DataService; }, saveBundle:Dynamic):breeze.promises.IPromise<SaveResult>;
	var JsonResultsAdapter : JsonResultsAdapter;
}
extern class JsonResultsAdapter {
	var name : String;
	var extractResults : { } -> { };
	var visitNode : { } -> QueryContext -> NodeContext -> { @:optional
	var entityType : EntityType; @:optional
	var nodeId : Dynamic; @:optional
	var nodeRefId : Dynamic; @:optional
	var ignore : Bool; };
	function new(config:{ var name : String; @:optional
	var extractResults : { } -> { }; var visitNode : { } -> QueryContext -> NodeContext -> { @:optional
	var entityType : EntityType; @:optional
	var nodeId : Dynamic; @:optional
	var nodeRefId : Dynamic; @:optional
	var ignore : Bool; }; }):Void;
}
typedef QueryContext = {
	var url : String;
	var query : Dynamic;
	var entityManager : EntityManager;
	var dataService : DataService;
	var queryOptions : QueryOptions;
};
typedef NodeContext = {
	var nodeType : String;
};
extern class DataTypeSymbol extends breeze.core.EnumSymbol {
	var defaultValue : Dynamic;
	var isNumeric : Bool;
	var isDate : Bool;
}
typedef DataType = {
	>breeze.core.IEnum,
	var Binary : DataTypeSymbol;
	var Boolean : DataTypeSymbol;
	var Byte : DataTypeSymbol;
	var DateTime : DataTypeSymbol;
	var DateTimeOffset : DataTypeSymbol;
	var Decimal : DataTypeSymbol;
	var Double : DataTypeSymbol;
	var Guid : DataTypeSymbol;
	var Int16 : DataTypeSymbol;
	var Int32 : DataTypeSymbol;
	var Int64 : DataTypeSymbol;
	var Single : DataTypeSymbol;
	var String : DataTypeSymbol;
	var Time : DataTypeSymbol;
	var Undefined : DataTypeSymbol;
	function toDataType(typeName:String):DataTypeSymbol;
	function parseDateFromServer(date:Dynamic):Date;
	var defaultValue : Dynamic;
	var isNumeric : Bool;
};
extern class EntityActionSymbol extends breeze.core.EnumSymbol {

}
typedef EntityAction = {
	>breeze.core.IEnum,
	var AcceptChanges : EntityActionSymbol;
	var Attach : EntityActionSymbol;
	var AttachOnImport : EntityActionSymbol;
	var AttachOnQuery : EntityActionSymbol;
	var Clear : EntityActionSymbol;
	var Detach : EntityActionSymbol;
	var EntityStateChange : EntityActionSymbol;
	var MergeOnImport : EntityActionSymbol;
	var MergeOnSave : EntityActionSymbol;
	var MergeOnQuery : EntityActionSymbol;
	var PropertyChange : EntityActionSymbol;
	var RejectChanges : EntityActionSymbol;
};
extern class EntityAspect {
	var entity : Entity;
	var entityManager : EntityManager;
	var entityState : EntityStateSymbol;
	var isBeingSaved : Bool;
	var originalValues : Dynamic;
	var extraMetadata : Dynamic;
	var propertyChanged : PropertyChangedEvent;
	var validationErrorsChanged : ValidationErrorsChangedEvent;
	function acceptChanges():Void;
	function addValidationError(validationError:ValidationError):Void;
	function clearValidationErrors():Void;
	function getKey(?forceRefresh:Bool):EntityKey;
	@:overload(function(property:String):Array<ValidationError> { })
	@:overload(function(property:IProperty):Array<ValidationError> { })
	function getValidationErrors():Array<ValidationError>;
	var hasValidationErrors : Bool;
	@:overload(function(navigationProperty:NavigationProperty):Bool { })
	function isNavigationPropertyLoaded(navigationProperty:String):Bool;
	@:overload(function(navigationProperty:NavigationProperty, ?callback:haxe.Constraints.Function, ?errorCallback:haxe.Constraints.Function):breeze.promises.IPromise<QueryResult> { })
	function loadNavigationProperty(navigationProperty:String, ?callback:haxe.Constraints.Function, ?errorCallback:haxe.Constraints.Function):breeze.promises.IPromise<QueryResult>;
	function rejectChanges():Void;
	@:overload(function(validator:Validator, property:DataProperty):Void { })
	@:overload(function(validator:Validator, property:NavigationProperty):Void { })
	@:overload(function(validationError:ValidationError):Void { })
	function removeValidationError(validator:Validator):Void;
	function setAdded():Void;
	function setDeleted():Void;
	function setDetached():Void;
	function setModified():Void;
	function setUnchanged():Void;
	function setEntityState(entityState:EntityStateSymbol):Void;
	function validateEntity():Bool;
	@:overload(function(property:DataProperty, ?context:Dynamic):Bool { })
	@:overload(function(property:NavigationProperty, ?context:Dynamic):Bool { })
	function validateProperty(property:String, ?context:Dynamic):Bool;
}
extern class PropertyChangedEventArgs {
	var entity : Entity;
	var property : IProperty;
	var propertyName : String;
	var oldValue : Dynamic;
	var newValue : Dynamic;
	var parent : Dynamic;
}
extern class PropertyChangedEvent extends breeze.core.Event {
	function subscribe(?callback:PropertyChangedEventArgs -> Void):Float;
}
extern class ValidationErrorsChangedEventArgs {
	var entity : Entity;
	var added : Array<ValidationError>;
	var removed : Array<ValidationError>;
}
extern class ValidationErrorsChangedEvent extends breeze.core.Event {
	function subscribe(?callback:ValidationErrorsChangedEventArgs -> Void):Float;
}
extern class EntityKey {
	@:overload(function(entityType:EntityType, keyValues:Array<Dynamic>):Void { })
	function new(entityType:EntityType, keyValue:Dynamic):Void;
	@:overload(function(k1:EntityKey, k2:EntityKey):Bool { })
	function equals(entityKey:EntityKey):Bool;
	var entityType : EntityType;
	var values : Array<Dynamic>;
}
typedef EntityByKeyResult = {
	var entity : Entity;
	var entityKey : EntityKey;
	var fromCache : Bool;
};
typedef ExportEntitiesOptions = {
	var asString : Bool;
	var includeMetadata : Bool;
};
extern class EntityManager {
	var dataService : DataService;
	var keyGeneratorCtor : haxe.Constraints.Function;
	var metadataStore : MetadataStore;
	var queryOptions : QueryOptions;
	var saveOptions : SaveOptions;
	var serviceName : String;
	var validationOptions : ValidationOptions;
	var entityChanged : EntityChangedEvent;
	var hasChangesChanged : HasChangesChangedEvent;
	var validationErrorsChanged : ValidationErrorsChangedEvent;
	@:overload(function(?config:String):Void { })
	function new(?config:EntityManagerOptions):Void;
	function addEntity(entity:Entity):Entity;
	function attachEntity(entity:Entity, ?entityState:EntityStateSymbol, ?mergeStrategy:MergeStrategySymbol):Entity;
	function clear():Void;
	function createEmptyCopy():EntityManager;
	@:overload(function(entityType:EntityType, ?config:{ }, ?entityState:EntityStateSymbol, ?mergeStrategy:MergeStrategySymbol):Entity { })
	function createEntity(typeName:String, ?config:{ }, ?entityState:EntityStateSymbol, ?mergeStrategy:MergeStrategySymbol):Entity;
	function detachEntity(entity:Entity):Bool;
	@:overload(function(query:EntityQuery, ?callback:ExecuteQuerySuccessCallback, ?errorCallback:ExecuteQueryErrorCallback):breeze.promises.IPromise<QueryResult> { })
	function executeQuery(query:String, ?callback:ExecuteQuerySuccessCallback, ?errorCallback:ExecuteQueryErrorCallback):breeze.promises.IPromise<QueryResult>;
	function executeQueryLocally(query:EntityQuery):Array<Entity>;
	@:overload(function(?entities:Array<Entity>, ?options:ExportEntitiesOptions):Dynamic { })
	function exportEntities(?entities:Array<Entity>, ?includeMetadata:Bool):String;
	@:overload(function(typeName:String, keyValues:Array<Dynamic>, ?checkLocalCacheFirst:Bool):breeze.promises.IPromise<EntityByKeyResult> { })
	@:overload(function(entityKey:EntityKey):breeze.promises.IPromise<EntityByKeyResult> { })
	function fetchEntityByKey(typeName:String, keyValue:Dynamic, ?checkLocalCacheFirst:Bool):breeze.promises.IPromise<EntityByKeyResult>;
	function fetchMetadata(?callback:Dynamic -> Void, ?errorCallback:breeze.core.ErrorCallback):breeze.promises.IPromise<Dynamic>;
	function generateTempKeyValue(entity:Entity):Dynamic;
	@:overload(function(entityTypeName:String):Array<Entity> { })
	@:overload(function(entityTypeNames:Array<String>):Array<Entity> { })
	@:overload(function(entityType:EntityType):Array<Entity> { })
	@:overload(function(entityTypes:Array<EntityType>):Array<Entity> { })
	function getChanges():Array<Entity>;
	@:overload(function(?entityTypeNames:Array<String>, ?entityState:EntityStateSymbol):Array<Entity> { })
	@:overload(function(?entityTypeName:String, ?entityStates:Array<EntityStateSymbol>):Array<Entity> { })
	@:overload(function(?entityTypeNames:Array<String>, ?entityStates:Array<EntityStateSymbol>):Array<Entity> { })
	@:overload(function(entityType:EntityType, ?entityState:EntityStateSymbol):Array<Entity> { })
	@:overload(function(?entityTypes:Array<EntityType>, ?entityState:EntityStateSymbol):Array<Entity> { })
	@:overload(function(?entityType:EntityType, ?entityStates:Array<EntityStateSymbol>):Array<Entity> { })
	@:overload(function(?entityTypes:Array<EntityType>, ?entityStates:Array<EntityStateSymbol>):Array<Entity> { })
	function getEntities(entityTypeName:String, ?entityState:EntityStateSymbol):Array<Entity>;
	@:overload(function(typeName:String, keyValues:Array<Dynamic>):Entity { })
	@:overload(function(entityKey:EntityKey):Entity { })
	function getEntityByKey(typeName:String, keyValue:Dynamic):Entity;
	@:overload(function(entityTypeName:String):Bool { })
	@:overload(function(entityTypeNames:Array<String>):Bool { })
	@:overload(function(entityType:EntityType):Bool { })
	@:overload(function(entityTypes:Array<EntityType>):Bool { })
	function hasChanges():Bool;
	@:overload(function(exportedData:Dynamic, ?config:{ @:optional
	var mergeStrategy : MergeStrategySymbol; @:optional
	var metadataVersionFn : Dynamic -> Void; }):EntityManager { })
	@:overload(function(exportedString:String, ?config:{ @:optional
	var mergeStrategy : MergeStrategySymbol; @:optional
	var metadataVersionFn : Dynamic -> Void; }):{ var entities : Array<Entity>; var tempKeyMapping : { }; } { })
	@:overload(function(exportedData:Dynamic, ?config:{ @:optional
	var mergeStrategy : MergeStrategySymbol; @:optional
	var metadataVersionFn : Dynamic -> Void; }):{ var entities : Array<Entity>; var tempKeyMapping : { }; } { })
	static function importEntities(exportedString:String, ?config:{ @:optional
	var mergeStrategy : MergeStrategySymbol; @:optional
	var metadataVersionFn : Dynamic -> Void; }):EntityManager;
	function rejectChanges():Array<Entity>;
	function saveChanges(?entities:Array<Entity>, ?saveOptions:SaveOptions, ?callback:SaveChangesSuccessCallback, ?errorCallback:SaveChangesErrorCallback):breeze.promises.IPromise<SaveResult>;
	function setProperties(config:EntityManagerProperties):Void;
}
typedef EntityManagerOptions = {
	@:optional
	var serviceName : String;
	@:optional
	var dataService : DataService;
	@:optional
	var metadataStore : MetadataStore;
	@:optional
	var queryOptions : QueryOptions;
	@:optional
	var saveOptions : SaveOptions;
	@:optional
	var validationOptions : ValidationOptions;
	@:optional
	var keyGeneratorCtor : haxe.Constraints.Function;
};
typedef EntityManagerProperties = {
	@:optional
	var serviceName : String;
	@:optional
	var dataService : DataService;
	@:optional
	var queryOptions : QueryOptions;
	@:optional
	var saveOptions : SaveOptions;
	@:optional
	var validationOptions : ValidationOptions;
	@:optional
	var keyGeneratorCtor : haxe.Constraints.Function;
};
typedef ExecuteQuerySuccessCallback = { };
typedef ExecuteQueryErrorCallback = { };
typedef SaveChangesSuccessCallback = { };
typedef EntityError = {
	var entity : Entity;
	var errorMessage : String;
	var errorName : String;
	var isServerError : Bool;
	var propertyName : String;
};
typedef SaveChangesErrorCallback = { };
extern class EntityChangedEventArgs {
	var entity : Entity;
	var entityAction : EntityActionSymbol;
	var args : Dynamic;
}
extern class EntityChangedEvent extends breeze.core.Event {
	function subscribe(?callback:EntityChangedEventArgs -> Void):Float;
}
extern class HasChangesChangedEventArgs {
	var entityManager : EntityManager;
	var hasChanges : Bool;
}
extern class HasChangesChangedEvent extends breeze.core.Event {
	function subscribe(?callback:HasChangesChangedEventArgs -> Void):Float;
}
extern class EntityQuery {
	var entityManager : EntityManager;
	var orderByClause : OrderByClause;
	var parameters : Dynamic;
	var queryOptions : QueryOptions;
	var resourceName : String;
	var resultEntityType : EntityType;
	var skipCount : Float;
	var takeCount : Float;
	var wherePredicate : Predicate;
	@:overload(function(tree:Dynamic):Void { })
	function new(?resourceName:String):Void;
	function execute(?callback:ExecuteQuerySuccessCallback, ?errorCallback:ExecuteQueryErrorCallback):breeze.promises.IPromise<QueryResult>;
	function executeLocally():Array<Entity>;
	@:overload(function(propertyPaths:String):EntityQuery { })
	function expand(propertyPaths:Array<String>):EntityQuery;
	@:overload(function(resourceName:String):EntityQuery { })
	static function from(resourceName:String):EntityQuery;
	@:overload(function(entities:Array<Entity>):EntityQuery { })
	static function fromEntities(entity:Entity):EntityQuery;
	static function fromEntityKey(entityKey:EntityKey):EntityQuery;
	static function fromEntityNavigation(entity:Entity, navigationProperty:NavigationProperty):EntityQuery;
	function inlineCount(?enabled:Bool):EntityQuery;
	function noTracking(?enabled:Bool):EntityQuery;
	@:overload(function(propertyPaths:Array<String>, ?isDescending:Bool):EntityQuery { })
	function orderBy(propertyPaths:String, ?isDescending:Bool):EntityQuery;
	@:overload(function(propertyPaths:Array<String>):EntityQuery { })
	function orderByDesc(propertyPaths:String):EntityQuery;
	@:overload(function(propertyPaths:Array<String>):EntityQuery { })
	function select(propertyPaths:String):EntityQuery;
	function skip(count:Float):EntityQuery;
	function take(count:Float):EntityQuery;
	function top(count:Float):EntityQuery;
	@:overload(function(type:EntityType):EntityQuery { })
	function toType(typeName:String):EntityQuery;
	@:overload(function(obj:DataService):EntityQuery { })
	@:overload(function(obj:JsonResultsAdapter):EntityQuery { })
	@:overload(function(obj:QueryOptions):EntityQuery { })
	@:overload(function(obj:MergeStrategySymbol):EntityQuery { })
	@:overload(function(obj:FetchStrategySymbol):EntityQuery { })
	function using(obj:EntityManager):EntityQuery;
	@:overload(function(property:String, operator:String, value:Dynamic):EntityQuery { })
	@:overload(function(property:String, operator:FilterQueryOpSymbol, value:Dynamic):EntityQuery { })
	@:overload(function(property:String, filterop:FilterQueryOpSymbol, property2:String, filterop2:FilterQueryOpSymbol, value:Dynamic):EntityQuery { })
	@:overload(function(property:String, filterop:String, property2:String, filterop2:String, value:Dynamic):EntityQuery { })
	@:overload(function(predicate:FilterQueryOpSymbol):EntityQuery { })
	function where(predicate:Predicate):EntityQuery;
	function withParameters(params:Dynamic):EntityQuery;
	function toJSON():String;
}
typedef OrderByClause = { };
extern class EntityStateSymbol extends breeze.core.EnumSymbol {
	function isAdded():Bool;
	function isAddedModifiedOrDeleted():Bool;
	function isDeleted():Bool;
	function isDetached():Bool;
	function isModified():Bool;
	function isUnchanged():Bool;
	function isUnchangedOrModified():Bool;
}
typedef EntityState = {
	>breeze.core.IEnum,
	var Added : EntityStateSymbol;
	var Deleted : EntityStateSymbol;
	var Detached : EntityStateSymbol;
	var Modified : EntityStateSymbol;
	var Unchanged : EntityStateSymbol;
};
extern class EntityType {
	var autoGeneratedKeyType : AutoGeneratedKeyType;
	var baseEntityType : EntityType;
	var complexProperties : Array<DataProperty>;
	var concurrencyProperties : Array<DataProperty>;
	var dataProperties : Array<DataProperty>;
	var defaultResourceName : String;
	var foreignKeyProperties : Array<DataProperty>;
	var isAbstract : Bool;
	var keyProperties : Array<DataProperty>;
	var metadataStore : MetadataStore;
	var name : String;
	var namespace : String;
	var navigationProperties : Array<NavigationProperty>;
	var shortName : String;
	var unmappedProperties : Array<DataProperty>;
	var validators : Array<Validator>;
	@:overload(function(config:EntityTypeOptions):Void { })
	function new(config:MetadataStore):Void;
	function addProperty(property:IProperty):Void;
	function addValidator(validator:Validator, ?property:IProperty):Void;
	function createEntity(?initialValues:Dynamic):Entity;
	function getCtor():haxe.Constraints.Function;
	function getDataProperty(propertyName:String):DataProperty;
	function getNavigationProperty(propertyName:String):NavigationProperty;
	function getProperties():Array<IProperty>;
	function getProperty(propertyPath:String, ?throwIfNotFound:Bool):IProperty;
	function getPropertyNames():Array<String>;
	function getSelfAndSubtypes():Array<EntityType>;
	function isSubtypeOf(entityType:EntityType):Bool;
	function setProperties(config:EntityTypeProperties):Void;
	function toString():String;
}
typedef EntityTypeOptions = {
	@:optional
	var shortName : String;
	@:optional
	var namespace : String;
	@:optional
	var autoGeneratedKeyType : AutoGeneratedKeyType;
	@:optional
	var defaultResourceName : String;
	@:optional
	var dataProperties : Array<DataProperty>;
	@:optional
	var navigationProperties : Array<NavigationProperty>;
};
typedef EntityTypeProperties = {
	@:optional
	var autoGeneratedKeyType : AutoGeneratedKeyType;
	@:optional
	var defaultResourceName : String;
	@:optional
	var serializerFn : DataProperty -> Dynamic -> Dynamic;
};
extern class FetchStrategySymbol extends breeze.core.EnumSymbol {
	var foo : Dynamic;
}
typedef FetchStrategy = {
	>breeze.core.IEnum,
	var FromLocalCache : FetchStrategySymbol;
	var FromServer : FetchStrategySymbol;
};
extern class FilterQueryOpSymbol extends breeze.core.EnumSymbol {

}
typedef FilterQueryOp = {
	>breeze.core.IEnum,
	var Contains : FilterQueryOpSymbol;
	var EndsWith : FilterQueryOpSymbol;
	var Equals : FilterQueryOpSymbol;
	var GreaterThan : FilterQueryOpSymbol;
	var GreaterThanOrEqual : FilterQueryOpSymbol;
	var IsTypeOf : FilterQueryOpSymbol;
	var LessThan : FilterQueryOpSymbol;
	var LessThanOrEqual : FilterQueryOpSymbol;
	var NotEquals : FilterQueryOpSymbol;
	var StartsWith : FilterQueryOpSymbol;
	var Any : FilterQueryOpSymbol;
	var All : FilterQueryOpSymbol;
};
extern class LocalQueryComparisonOptions {
	static var caseInsensitiveSQL : LocalQueryComparisonOptions;
	static var defaultInstance : LocalQueryComparisonOptions;
	function new(config:{ @:optional
	var name : String; @:optional
	var isCaseSensitive : Bool; @:optional
	var usesSql92CompliantStringComparison : Bool; }):Void;
	function setAsDefault():Void;
}
extern class MergeStrategySymbol extends breeze.core.EnumSymbol {

}
typedef MergeStrategy = {
	>breeze.core.IEnum,
	var OverwriteChanges : MergeStrategySymbol;
	var PreserveChanges : MergeStrategySymbol;
	var SkipMerge : MergeStrategySymbol;
	var Disallowed : MergeStrategySymbol;
};
extern class MetadataStore {
	@:overload(function(?config:MetadataStoreOptions):Void { })
	function new():Void;
	var namingConvention : NamingConvention;
	function addDataService(dataService:DataService, ?shouldOverwrite:Bool):Void;
	function addEntityType(structuralType:IStructuralType):Void;
	function exportMetadata():String;
	@:overload(function(dataService:DataService, ?callback:Dynamic -> Void, ?errorCallback:breeze.core.ErrorCallback):breeze.promises.IPromise<Dynamic> { })
	function fetchMetadata(dataService:String, ?callback:Dynamic -> Void, ?errorCallback:breeze.core.ErrorCallback):breeze.promises.IPromise<Dynamic>;
	function getDataService(serviceName:String):DataService;
	function getEntityType(entityTypeName:String, ?okIfNotFound:Bool):IStructuralType;
	function getEntityTypes():Array<IStructuralType>;
	function hasMetadataFor(serviceName:String):Bool;
	@:overload(function(exportedString:String, ?allowMerge:Bool):MetadataStore { })
	static function importMetadata(exportedString:String):MetadataStore;
	function isEmpty():Bool;
	function registerEntityTypeCtor(entityTypeName:String, entityCtor:haxe.Constraints.Function, ?initializationFn:Entity -> Void, ?noTrackingFn:Entity -> Entity):Void;
	function trackUnmappedType(entityCtor:haxe.Constraints.Function, ?interceptor:haxe.Constraints.Function):Void;
	@:overload(function(resourceName:String, entityTypeName:String):Void { })
	function setEntityTypeForResourceName(resourceName:String, entityType:EntityType):Void;
	function getEntityTypeNameForResourceName(resourceName:String):String;
	function setProperties(config:{ @:optional
	var name : String; @:optional
	var serializerFn : haxe.Constraints.Function; }):Void;
}
typedef MetadataStoreOptions = {
	@:optional
	var namingConvention : NamingConvention;
	@:optional
	var localQueryComparisonOptions : LocalQueryComparisonOptions;
};
extern class NamingConvention {
	static var camelCase : NamingConvention;
	static var defaultInstance : NamingConvention;
	static var none : NamingConvention;
	function new(config:NamingConventionOptions):Void;
	@:overload(function(clientPropertyName:String, property:IProperty):String { })
	function clientPropertyNameToServer(clientPropertyName:String):String;
	@:overload(function(serverPropertyName:String, property:IProperty):String { })
	function serverPropertyNameToClient(serverPropertyName:String):String;
	function setAsDefault():NamingConvention;
}
typedef NamingConventionOptions = {
	@:optional
	var serverPropertyNameToClient : String -> String;
	@:optional
	var clientPropertyNameToServer : String -> String;
};
extern class NavigationProperty {
	var associationName : String;
	var entityType : EntityType;
	var foreignKeyNames : Array<String>;
	var inverse : NavigationProperty;
	var isDataProperty : Bool;
	var isNavigationProperty : Bool;
	var isScalar : Bool;
	var name : String;
	var parentType : IStructuralType;
	var relatedDataProperties : Array<DataProperty>;
	var validators : Array<Validator>;
	function new(config:NavigationPropertyOptions):Void;
}
typedef NavigationPropertyOptions = {
	@:optional
	var name : String;
	@:optional
	var nameOnServer : String;
	var entityTypeName : String;
	@:optional
	var isScalar : Bool;
	@:optional
	var associationName : String;
	@:optional
	var foreignKeyNames : Array<String>;
	@:optional
	var foreignKeyNamesOnServer : Array<String>;
	@:optional
	var validators : Array<Validator>;
};
extern class Predicate {
	@:overload(function(property:String, operator:FilterQueryOpSymbol, value:Dynamic):Void { })
	@:overload(function(property:String, operator:String, value:{ var value : Dynamic; @:optional
	var isLiteral : Bool; @:optional
	var dataType : breeze.DataType; }):Void { })
	@:overload(function(property:String, operator:FilterQueryOpSymbol, value:{ var value : Dynamic; @:optional
	var isLiteral : Bool; @:optional
	var dataType : breeze.DataType; }):Void { })
	@:overload(function(property:String, filterop:FilterQueryOpSymbol, property2:String, filterop2:FilterQueryOpSymbol, value:Dynamic):Void { })
	@:overload(function(property:String, filterop:String, property2:String, filterop2:String, value:Dynamic):Void { })
	@:overload(function(tree:Dynamic):Void { })
	function new(property:String, operator:String, value:Dynamic):Void;
	var and : PredicateMethod;
	static var create : PredicateMethod;
	static function isPredicate(o:Dynamic):Bool;
	@:overload(function():Predicate { })
	static function not(predicate:Predicate):Predicate;
	static var or : PredicateMethod;
	function toFunction():haxe.Constraints.Function;
	function toString():String;
	function validate(entityType:EntityType):Void;
	function toJSON():String;
}
typedef PredicateMethod = { };
extern class QueryOptions {
	static var defaultInstance : QueryOptions;
	var fetchStrategy : FetchStrategySymbol;
	var mergeStrategy : MergeStrategySymbol;
	var includeDeleted : Bool;
	function new(?config:QueryOptionsConfiguration):Void;
	function setAsDefault():Void;
	@:overload(function(config:MergeStrategySymbol):QueryOptions { })
	@:overload(function(config:FetchStrategySymbol):QueryOptions { })
	function using(config:QueryOptionsConfiguration):QueryOptions;
}
typedef QueryOptionsConfiguration = {
	@:optional
	var fetchStrategy : FetchStrategySymbol;
	@:optional
	var mergeStrategy : MergeStrategySymbol;
};
typedef HttpResponse = {
	var config : Dynamic;
	var data : Array<Entity>;
	@:optional
	var error : Dynamic;
	@:optional
	var saveContext : Dynamic;
	var status : Float;
	function getHeaders(headerName:String):String;
};
typedef QueryResult = {
	var results : Array<Entity>;
	var query : EntityQuery;
	var httpResponse : HttpResponse;
	@:optional
	var entityManager : EntityManager;
	@:optional
	var inlineCount : Float;
	@:optional
	var retrievedEntities : Array<Entity>;
};
extern class SaveOptions {
	var allowConcurrentSaves : Bool;
	var resourceName : String;
	var dataService : DataService;
	var tag : Dynamic;
	static var defaultInstance : SaveOptions;
	function new(?config:{ @:optional
	var allowConcurrentSaves : Bool; }):Void;
	function setAsDefault():SaveOptions;
	function using(config:SaveOptionsConfiguration):SaveOptions;
}
typedef SaveOptionsConfiguration = {
	@:optional
	var allowConcurrentSaves : Bool;
	@:optional
	var resourceName : String;
	@:optional
	var dataService : DataService;
	@:optional
	var tag : Dynamic;
};
typedef SaveResult = {
	var entities : Array<Entity>;
	var keyMappings : Dynamic;
	var XHR : XMLHttpRequest;
};
extern class ValidationError {
	var key : String;
	var context : Dynamic;
	var errorMessage : String;
	var property : IProperty;
	var propertyName : String;
	var validator : Validator;
	var getKey : Validator -> String -> String;
	function new(validator:Validator, context:Dynamic, errorMessage:String, key:String):Void;
}
extern class ValidationOptions {
	static var defaultInstance : ValidationOptions;
	var validateOnAttach : Bool;
	var validateOnPropertyChange : Bool;
	var validateOnQuery : Bool;
	var validateOnSave : Bool;
	function new(?config:ValidationOptionsConfiguration):Void;
	function setAsDefault():ValidationOptions;
	function using(config:ValidationOptionsConfiguration):ValidationOptions;
}
typedef ValidationOptionsConfiguration = {
	@:optional
	var validateOnAttach : Bool;
	@:optional
	var validateOnSave : Bool;
	@:optional
	var validateOnQuery : Bool;
	@:optional
	var validateOnPropertyChange : Bool;
};
extern class Validator {
	static var messageTemplates : Dynamic;
	var context : Dynamic;
	var name : String;
	function new(name:String, validatorFn:ValidatorFunction, ?context:Dynamic):Void;
	static function bool():Validator;
	static function byte(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function date():Validator;
	static function duration():Validator;
	static function number(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function double(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function single(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function guid():Validator;
	static function int16(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function int32(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function int64(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function integer(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function maxLength(context:{ var maxLength : Float; @:optional
	var messageTemplate : String; }):Validator;
	static function required(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function string():Validator;
	static function stringLength(context:{ var maxLength : Float; var minLength : Float; @:optional
	var messageTemplate : String; }):Validator;
	static function creditCard(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function regularExpression(context:{ var expression : js.RegExp; @:optional
	var messageTemplate : String; }):Validator;
	static function emailAddress(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function phone(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function url(?context:{ @:optional
	var messageTemplate : String; }):Validator;
	static function none():Validator;
	static function fromJSON(json:String):Validator;
	static function register(validator:Validator):Void;
	static function registerFactory(fn:Void -> Validator, name:String):Void;
	static function makeRegExpValidator(validatorName:String, expression:js.RegExp, defaultMessage:String, ?context:Dynamic):Validator;
	function validate(value:Dynamic, ?context:Dynamic):ValidationError;
	function getMessage():String;
}
typedef ValidatorFunction = { };
typedef ValidatorFunctionContext = {
	var value : Dynamic;
	var validatorName : String;
	var displayName : String;
	var messageTemplate : String;
	@:optional
	var message : String;
};
extern class BreezeTopLevel {
	static var DataType : DataType;
	static var EntityAction : EntityAction;
	static var EntityState : EntityState;
	static var FetchStrategy : FetchStrategy;
	static var FilterQueryOp : FilterQueryOp;
	static var MergeStrategy : MergeStrategy;
	static var metadataVersion : String;
	static var remoteAccess_odata : String;
	static var remoteAccess_webApi : String;
	static var version : String;
}
extern class BreezeTopLevel {
	static var DataType : DataType;
	static var EntityAction : EntityAction;
	static var EntityState : EntityState;
	static var FetchStrategy : FetchStrategy;
	static var FilterQueryOp : FilterQueryOp;
	static var MergeStrategy : MergeStrategy;
	static var metadataVersion : String;
	static var remoteAccess_odata : String;
	static var remoteAccess_webApi : String;
	static var version : String;
}
