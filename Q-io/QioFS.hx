typedef Stats = {
	var node : NodeStats;
	var size : Float;
};
typedef NodeStats = {
	function isFile():Bool;
	function isDirectory():Bool;
	function isBlockDevice():Bool;
	function isCharacterDevice():Bool;
	function isSymbolicLink():Bool;
	function isFIFO():Bool;
	function isSocket():Bool;
	var node : NodeStats;
	var dev : Float;
	var ino : Float;
	var mode : Float;
	var nlink : Float;
	var uid : Float;
	var gid : Float;
	var rdev : Float;
	var size : Float;
	var blksize : Float;
	var blocks : Float;
	var atime : Date;
	var mtime : Date;
	var ctime : Date;
};
extern class QioFSTopLevel {
	static function open(path:String, ?options:Dynamic):Q.Promise<Dynamic>;
	static function read(path:String, ?options:Dynamic):Q.Promise<Dynamic>;
	static function write(path:String, content:Buffer, ?options:Dynamic):Q.Promise<Void>;
	static function write(path:String, content:String, ?options:Dynamic):Q.Promise<Void>;
	static function append(path:String, content:Buffer, ?options:Dynamic):Q.Promise<Void>;
	static function append(path:String, content:String, ?options:Dynamic):Q.Promise<Void>;
	static function copy(source:String, target:String):Q.Promise<Void>;
	static function copyTree(source:String, target:String):Q.Promise<Void>;
	static function list(path:String):Q.Promise<Array<String>>;
	static function listTree(path:String, ?guard:String -> Dynamic -> Bool):Q.Promise<Array<String>>;
	static function listDirectoryTree(path:String):Q.Promise<Array<String>>;
	static function makeDirectory(path:String, ?mode:String):Q.Promise<Void>;
	static function makeDirectory(path:String, ?mode:Float):Q.Promise<Void>;
	static function makeTree(path:String, ?mode:String):Q.Promise<Void>;
	static function makeTree(path:String, ?mode:Float):Q.Promise<Void>;
	static function remove(path:String):Q.Promise<Void>;
	static function removeTree(path:String):Q.Promise<Void>;
	static function rename(source:String, target:String):Q.Promise<Void>;
	static function move(source:String, target:String):Q.Promise<Void>;
	static function link(source:String, target:Dynamic):Q.Promise<Void>;
	static function symbolicCopy(source:String, target:String, type:String):Q.Promise<Void>;
	static function symbolicLink(target:String, link:String, type:String):Q.Promise<Void>;
	static function chown(path:String, uid:Float, gid:Float):Q.Promise<Void>;
	static function chmod(path:String, ?mode:String):Q.Promise<Void>;
	static function chmod(path:String, ?mode:Float):Q.Promise<Void>;
	static function stat(path:String):Q.Promise<Stats>;
	static function statLink(path:String):Q.Promise<Stats>;
	static function statFd(fd:Float):Q.Promise<Stats>;
	static function exists(path:String):Q.Promise<Bool>;
	static function isFile(path:String):Q.Promise<Bool>;
	static function isDirectory(path:String):Q.Promise<Bool>;
	static function isSymbolicLink(path:String):Q.Promise<Bool>;
	static function lastModified(path:String):Q.Promise<Date>;
	static function lastAccessed(path:String):Q.Promise<Date>;
	static function split(path:String):Array<String>;
	static function join(paths:haxe.extern.Rest<String>):String;
	static function join(paths:Array<String>):String;
	static function resolve(path:haxe.extern.Rest<String>):String;
	static function resolve(paths:Array<String>):String;
	static function normal(path:haxe.extern.Rest<String>):String;
	static function normal(paths:Array<String>):String;
	static function absolute(path:String):String;
	static function canonical(path:String):Q.Promise<String>;
	static function readLink(path:String):Q.Promise<String>;
	static function contains(parent:String, child:String):Bool;
	static function relative(source:String, target:String):Q.Promise<String>;
	static function relativeFromFile(source:String, target:String):String;
	static function relativeFromDirectory(source:String, target:String):String;
	static function isAbsolute(path:String):Bool;
	static function isRelative(path:String):Bool;
	static function isRoot(path:String):Bool;
	static function root(path:String):String;
	static function directory(path:String):String;
	static function base(path:String, extension:String):String;
	static function extension(path:String):String;
	static function reroot(path:String):Dynamic;
	static function toObject(path:String):{ };
}
