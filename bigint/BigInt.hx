typedef BigInt = {
	>Array<Float>,
};
typedef IRandom = { };
extern class BigIntTopLevel {
	static function setRandom(random:IRandom):Void;
	static function add(x:BigInt, y:BigInt):BigInt;
	static function addInt(x:BigInt, n:Float):BigInt;
	static function bigInt2str(x:BigInt, base:Float):String;
	static function bigInt2str(x:BigInt, base:String):String;
	static function bitSize(x:BigInt):Float;
	static function dup(x:BigInt):BigInt;
	static function equals(x:BigInt, y:BigInt):Bool;
	static function equalsInt(x:BigInt, y:Float):Bool;
	static function expand(value:BigInt, n:Float):BigInt;
	static function findPrimes(n:Float):Array<Float>;
	static function GCD(x:BigInt, y:BigInt):BigInt;
	static function greater(x:BigInt, y:BigInt):Bool;
	static function greaterShift(x:BigInt, y:BigInt, shift:Float):Bool;
	static function int2bigInt(t:Float, ?n:Float, ?m:Float):BigInt;
	static function inverseMod(x:BigInt, n:BigInt):BigInt;
	static function inverseModInt(x:Float, n:Float):BigInt;
	static function isZero(x:BigInt):Bool;
	static function millerRabin(x:BigInt, b:BigInt):Bool;
	static function millerRabinInt(x:Float, b:Float):Bool;
	static function mod(x:BigInt, n:BigInt):BigInt;
	static function modInt(x:BigInt, n:Float):Float;
	static function mult(x:BigInt, y:BigInt):BigInt;
	static function multMod(x:BigInt, y:BigInt, n:BigInt):BigInt;
	static function negative(x:BigInt):Bool;
	static function powMod(x:BigInt, y:BigInt, n:BigInt):BigInt;
	static function randBigInt(n:Float, s:Float):BigInt;
	static function randTruePrime(k:Float):BigInt;
	static function randProbPrime(k:Float):BigInt;
	static function str2bigInt(s:String, b:Float, ?n:Float, ?m:Float):BigInt;
	static function str2bigInt(s:String, b:String, ?n:Float, ?m:Float):BigInt;
	static function sub(x:BigInt, y:BigInt):BigInt;
	static function trim(x:BigInt, k:Float):BigInt;
	static function addInt_(x:BigInt, n:Float):Void;
	static function add_(x:BigInt, y:BigInt):Void;
	static function copy_(x:BigInt, y:BigInt):Void;
	static function copyInt_(x:BigInt, n:Float):Void;
	static function GCD_(x:BigInt, y:BigInt):Void;
	static function inverseMod_(x:BigInt, n:BigInt):Bool;
	static function mod_(x:BigInt, n:BigInt):Void;
	static function mult_(x:BigInt, y:BigInt):Void;
	static function multMod_(x:BigInt, y:BigInt, n:BigInt):Void;
	static function powMod_(x:BigInt, y:BigInt, n:BigInt):Void;
	static function randBigInt_(b:BigInt, n:Float, s:Float):Void;
	static function randTruePrime_(ans:BigInt, k:Float):Void;
	static function sub_(x:BigInt, y:BigInt):Void;
	static function addShift_(x:BigInt, y:BigInt, ys:Float):Void;
	static function carry_(x:BigInt):Void;
	static function divide_(x:BigInt, y:BigInt, q:BigInt, r:BigInt):Void;
	static function divInt_(x:BigInt, n:Float):Float;
	static function eGCD_(x:BigInt, y:BigInt, d:BigInt, a:BigInt, b:BigInt):Void;
	static function halve_(x:BigInt):Void;
	static function leftShift_(x:BigInt, n:Float):Void;
	static function linComb_(x:BigInt, y:BigInt, a:Float, b:Float):Void;
	static function linCombShift_(x:BigInt, y:BigInt, b:Float, ys:Float):Void;
	static function mont_(x:BigInt, y:BigInt, n:BigInt, np:Float):Void;
	static function multInt_(x:BigInt, n:Float):Void;
	static function rightShift_(x:BigInt, n:Float):Void;
	static function squareMod_(x:BigInt, n:BigInt):Void;
	static function subShift_(x:BigInt, y:BigInt, ys:Float):Void;
}
