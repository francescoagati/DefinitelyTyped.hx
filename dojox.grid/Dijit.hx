extern class _Widget extends dojox.grid.cells._base {
	function new(inCell:Dynamic):Void;
	var alwaysEditing : Bool;
	var classes : String;
	var defaultValue : String;
	var draggable : Bool;
	var editable : Bool;
	var formatter : Dynamic;
	var getWidgetPropsCallOrig : Dynamic;
	var hidden : Bool;
	var noresize : Bool;
	var styles : String;
	var value : Dynamic;
	function apply(inRowIndex:Float):Void;
	function applyEdit(inValue:Dynamic, inRowIndex:Dynamic):Void;
	function attachWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function cancel(inRowIndex:Float):Void;
	function cancelEdit(inRowIndex:Dynamic):Void;
	function cancelFormatNode():Void;
	function canResize():Dynamic;
	function createWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Dynamic;
	function dispatchEvent(m:Dynamic, e:Dynamic):Dynamic;
	function focus(inRowIndex:Dynamic, inNode:Dynamic):Void;
	function format(inRowIndex:Float, inItem:Dynamic):Dynamic;
	function formatEditing(inDatum:Dynamic, inRowIndex:Dynamic):String;
	function formatNode(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Dynamic;
	function getEditNode(inRowIndex:Dynamic):Float;
	function getHeaderNode():Dynamic;
	function getNode(inRowIndex:Float):Dynamic;
	function getValue(inRowIndex:Dynamic):Dynamic;
	function getWidgetProps(inDatum:Dynamic):Dynamic;
	function isFlex():Dynamic;
	function markupFactory(node:Dynamic, cell:Dynamic):Void;
	function needFormatNode(inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function registerOnBlur(inNode:Dynamic, inRowIndex:Dynamic):Void;
	function restore(inRowIndex:Float):Void;
	function save(inRowIndex:Float):Void;
	function setValue(inRowIndex:Dynamic, inValue:Dynamic):Void;
	function sizeWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function widgetClass():Void;
}
extern class CheckBox extends dojox.grid.cells._base {
	function new(inCell:Dynamic):Void;
	var alwaysEditing : Bool;
	var classes : String;
	var defaultValue : String;
	var draggable : Bool;
	var editable : Bool;
	var formatter : Dynamic;
	var hidden : Bool;
	var noresize : Bool;
	var styles : String;
	var value : Dynamic;
	function apply(inRowIndex:Float):Void;
	function applyEdit(inValue:Dynamic, inRowIndex:Dynamic):Void;
	function attachWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function cancel(inRowIndex:Float):Void;
	function cancelEdit(inRowIndex:Dynamic):Void;
	function cancelFormatNode():Void;
	function canResize():Dynamic;
	function createWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Dynamic;
	function dispatchEvent(m:Dynamic, e:Dynamic):Dynamic;
	function focus(inRowIndex:Dynamic, inNode:Dynamic):Void;
	function format(inRowIndex:Float, inItem:Dynamic):Dynamic;
	function formatEditing(inDatum:Dynamic, inRowIndex:Dynamic):String;
	function formatNode(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Dynamic;
	function getEditNode(inRowIndex:Dynamic):Float;
	function getHeaderNode():Dynamic;
	function getNode(inRowIndex:Float):Dynamic;
	function getValue():Dynamic;
	function getWidgetProps(inDatum:Dynamic):Dynamic;
	function isFlex():Dynamic;
	function markupFactory(node:Dynamic, cell:Dynamic):Void;
	function needFormatNode(inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function registerOnBlur(inNode:Dynamic, inRowIndex:Dynamic):Void;
	function restore(inRowIndex:Float):Void;
	function save(inRowIndex:Float):Void;
	function setValue(inRowIndex:Dynamic, inValue:Dynamic):Void;
	function sizeWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function widgetClass():Void;
}
extern class Editor extends dojox.grid.cells._base {
	function new(inCell:Dynamic):Void;
	var alwaysEditing : Bool;
	var classes : String;
	var defaultValue : String;
	var draggable : Bool;
	var editable : Bool;
	var formatter : Dynamic;
	var hidden : Bool;
	var noresize : Bool;
	var styles : String;
	var value : Dynamic;
	function apply(inRowIndex:Float):Void;
	function applyEdit(inValue:Dynamic, inRowIndex:Dynamic):Void;
	function attachWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function cancel(inRowIndex:Float):Void;
	function cancelEdit(inRowIndex:Dynamic):Void;
	function cancelFormatNode():Void;
	function canResize():Dynamic;
	function createWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Dynamic;
	function dispatchEvent(m:Dynamic, e:Dynamic):Dynamic;
	function focus(inRowIndex:Dynamic, inNode:Dynamic):Void;
	function format(inRowIndex:Float, inItem:Dynamic):Dynamic;
	function formatEditing(inDatum:Dynamic, inRowIndex:Dynamic):String;
	function formatNode(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function getEditNode(inRowIndex:Dynamic):Float;
	function getHeaderNode():Dynamic;
	function getNode(inRowIndex:Float):Dynamic;
	function getValue(inRowIndex:Dynamic):Dynamic;
	function getWidgetProps(inDatum:Dynamic):Dynamic;
	function isFlex():Dynamic;
	function markupFactory(node:Dynamic, cell:Dynamic):Void;
	function needFormatNode(inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function populateEditor():Void;
	function registerOnBlur(inNode:Dynamic, inRowIndex:Dynamic):Void;
	function restore(inRowIndex:Float):Void;
	function save(inRowIndex:Float):Void;
	function setValue(inRowIndex:Dynamic, inValue:Dynamic):Void;
	function sizeWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function widgetClass():Void;
}
extern class DateTextBox extends dojox.grid.cells._base {
	function new(inCell:Dynamic):Void;
	var alwaysEditing : Bool;
	var classes : String;
	var defaultValue : String;
	var draggable : Bool;
	var editable : Bool;
	var formatter : Dynamic;
	var hidden : Bool;
	var noresize : Bool;
	var styles : String;
	var value : Dynamic;
	function apply(inRowIndex:Float):Void;
	function applyEdit(inValue:Dynamic, inRowIndex:Dynamic):Void;
	function attachWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function cancel(inRowIndex:Float):Void;
	function cancelEdit(inRowIndex:Dynamic):Void;
	function cancelFormatNode():Void;
	function canResize():Dynamic;
	function createWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Dynamic;
	function dispatchEvent(m:Dynamic, e:Dynamic):Dynamic;
	function focus(inRowIndex:Dynamic, inNode:Dynamic):Void;
	function format(inRowIndex:Float, inItem:Dynamic):Dynamic;
	function formatEditing(inDatum:Dynamic, inRowIndex:Dynamic):String;
	function formatNode(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Dynamic;
	function getEditNode(inRowIndex:Dynamic):Float;
	function getHeaderNode():Dynamic;
	function getNode(inRowIndex:Float):Dynamic;
	function getValue(inRowIndex:Dynamic):Dynamic;
	function getWidgetProps(inDatum:Dynamic):Dynamic;
	function isFlex():Dynamic;
	function markupFactory(node:Dynamic, cell:Dynamic):Void;
	function needFormatNode(inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function registerOnBlur(inNode:Dynamic, inRowIndex:Dynamic):Void;
	function restore(inRowIndex:Float):Void;
	function save(inRowIndex:Float):Void;
	function setValue(inRowIndex:Dynamic, inValue:Dynamic):Void;
	function sizeWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function widgetClass():Void;
}
extern class ComboBox extends dojox.grid.cells._base {
	function new(inCell:Dynamic):Void;
	var alwaysEditing : Bool;
	var classes : String;
	var defaultValue : String;
	var draggable : Bool;
	var editable : Bool;
	var formatter : Dynamic;
	var getWidgetPropsCallOrig : Dynamic;
	var hidden : Bool;
	var noresize : Bool;
	var styles : String;
	var value : Dynamic;
	function apply(inRowIndex:Float):Void;
	function applyEdit(inValue:Dynamic, inRowIndex:Dynamic):Void;
	function attachWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function cancel(inRowIndex:Float):Void;
	function cancelEdit(inRowIndex:Dynamic):Void;
	function cancelFormatNode():Void;
	function canResize():Dynamic;
	function createWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Dynamic;
	function dispatchEvent(m:Dynamic, e:Dynamic):Dynamic;
	function focus(inRowIndex:Dynamic, inNode:Dynamic):Void;
	function format(inRowIndex:Float, inItem:Dynamic):Dynamic;
	function formatEditing(inDatum:Dynamic, inRowIndex:Dynamic):String;
	function formatNode(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Dynamic;
	function getEditNode(inRowIndex:Dynamic):Float;
	function getHeaderNode():Dynamic;
	function getNode(inRowIndex:Float):Dynamic;
	function getValue():Dynamic;
	function getWidgetProps(inDatum:Dynamic):Dynamic;
	function isFlex():Dynamic;
	function markupFactory(node:Dynamic, cell:Dynamic):Void;
	function needFormatNode(inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function registerOnBlur(inNode:Dynamic, inRowIndex:Dynamic):Void;
	function restore(inRowIndex:Float):Void;
	function save(inRowIndex:Float):Void;
	function setValue(inRowIndex:Dynamic, inValue:Dynamic):Void;
	function sizeWidget(inNode:Dynamic, inDatum:Dynamic, inRowIndex:Dynamic):Void;
	function widgetClass():Void;
}
typedef Tree = {
	function formatAggregate(inItem:Dynamic, level:Dynamic, inRowIndexes:Dynamic):Dynamic;
	function formatAtLevel(inRowIndexes:Dynamic, inItem:Dynamic, level:Dynamic, summaryRow:Dynamic, toggleClass:Dynamic, cellClasses:Dynamic):String;
	function formatIndexes(inRowIndexes:Dynamic, inItem:Dynamic):Dynamic;
	function getOpenState(itemId:Dynamic):Dynamic;
};
