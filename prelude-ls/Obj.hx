extern class ObjTopLevel {
	static function empty<A>(object:Dynamic):Bool;
	static function each<A>(f:A -> Void):{ } -> { };
	static function each<A>(f:A -> Void, object:{ }):{ };
	static function each<A>(f:A -> Void):{ } -> { };
	static function each<A>(f:A -> Void, object:{ }):{ };
	static function map<A, B>(f:A -> B):{ } -> { };
	static function map<A, B>(f:A -> B, object:{ }):{ };
	static function map<A, B>(f:A -> B):{ } -> { };
	static function map<A, B>(f:A -> B, object:{ }):{ };
	static function compact<A>(object:{ }):{ };
	static function compact<A>(object:{ }):{ };
	static function filter<A>(f:A -> Bool):{ } -> { };
	static function filter<A>(f:A -> Bool, object:{ }):{ };
	static function filter<A>(f:A -> Bool):{ } -> { };
	static function filter<A>(f:A -> Bool, object:{ }):{ };
	static function reject<A>(f:A -> Bool):{ } -> { };
	static function reject<A>(f:A -> Bool, object:{ }):{ };
	static function reject<A>(f:A -> Bool):{ } -> { };
	static function reject<A>(f:A -> Bool, object:{ }):{ };
	static function partition<A>(f:A -> Bool):{ } -> Array<Dynamic>;
	static function partition<A>(f:A -> Bool, object:{ }):Array<Dynamic>;
	static function partition<A>(f:A -> Bool):{ } -> Array<Dynamic>;
	static function partition<A>(f:A -> Bool, object:{ }):Array<Dynamic>;
	static function find<A>(f:A -> Bool):{ } -> A;
	static function find<A>(f:A -> Bool, object:{ }):A;
	static function find<A>(f:A -> Bool):{ } -> A;
	static function find<A>(f:A -> Bool, object:{ }):A;
	static function split(separator:String):String -> Array<String>;
	static function split(separator:String, str:String):Array<String>;
	static function join(separator:String):Array<String> -> String;
	static function join(separator:String, xs:Array<String>):String;
	static function lines(str:String):Array<String>;
	static function unlines(xs:Array<String>):String;
	static function words(str:String):Array<String>;
	static function unwords(xs:Array<String>):String;
	static function chars(str:String):Array<String>;
	static function unchars(xs:Array<String>):String;
	static function repeat(n:Float):String -> String;
	static function repeat(n:Float, str:String):String;
	static function capitalize(str:String):String;
	static function camelize(str:String):String;
	static function dasherize(str:String):String;
	static function empty(str:String):Bool;
	static function reverse(str:String):String;
	static function slice(x:Float):Float -> String -> String;
	static function slice(x:Float, y:Float):String -> String;
	static function slice(x:Float, y:Float, str:String):String;
	static function take(n:Float):String -> String;
	static function take(n:Float, str:String):String;
	static function drop(n:Float):String -> String;
	static function drop(n:Float, str:String):String;
	static function splitAt(n:Float):String -> Array<Dynamic>;
	static function splitAt(n:Float, str:String):Array<Dynamic>;
	static function takeWhile(f:String -> Bool):String -> String;
	static function takeWhile(f:String -> Bool, str:String):String;
	static function dropWhile(f:String -> Bool):String -> String;
	static function dropWhile(f:String -> Bool, str:String):String;
	static function span(f:String -> Bool):String -> Array<Dynamic>;
	static function span(f:String -> Bool, str:String):Array<Dynamic>;
	static function breakStr(f:String -> Bool):String -> Array<Dynamic>;
	static function breakStr(f:String -> Bool, str:String):Array<Dynamic>;
}
