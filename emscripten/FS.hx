typedef Lookup = {
	var path : String;
	var node : FSNode;
};
typedef FSStream = { };
typedef FSNode = { };
typedef ErrnoError = { };
extern class FSTopLevel {
	static var ignorePermissions : Bool;
	static var trackingDelegate : Dynamic;
	static var tracking : Dynamic;
	static var genericErrors : Dynamic;
	static function lookupPath(path:String, opts:Dynamic):Lookup;
	static function getPath(node:FSNode):String;
	static function isFile(mode:Float):Bool;
	static function isDir(mode:Float):Bool;
	static function isLink(mode:Float):Bool;
	static function isChrdev(mode:Float):Bool;
	static function isBlkdev(mode:Float):Bool;
	static function isFIFO(mode:Float):Bool;
	static function isSocket(mode:Float):Bool;
	static function major(dev:Float):Float;
	static function minor(dev:Float):Float;
	static function makedev(ma:Float, mi:Float):Float;
	static function registerDevice(dev:Float, ops:Dynamic):Void;
	static function syncfs(populate:Bool, callback:Dynamic -> Dynamic):Void;
	static function syncfs(callback:Dynamic -> Dynamic, ?populate:Bool):Void;
	static function mount(type:Emscripten.FileSystemType, opts:Dynamic, mountpoint:String):Dynamic;
	static function unmount(mountpoint:String):Void;
	static function mkdir(path:String, ?mode:Float):Dynamic;
	static function mkdev(path:String, ?mode:Float, ?dev:Float):Dynamic;
	static function symlink(oldpath:String, newpath:String):Dynamic;
	static function rename(old_path:String, new_path:String):Void;
	static function rmdir(path:String):Void;
	static function readdir(path:String):Dynamic;
	static function unlink(path:String):Void;
	static function readlink(path:String):String;
	static function stat(path:String, ?dontFollow:Bool):Dynamic;
	static function lstat(path:String):Dynamic;
	static function chmod(path:String, mode:Float, ?dontFollow:Bool):Void;
	static function lchmod(path:String, mode:Float):Void;
	static function fchmod(fd:Float, mode:Float):Void;
	static function chown(path:String, uid:Float, gid:Float, ?dontFollow:Bool):Void;
	static function lchown(path:String, uid:Float, gid:Float):Void;
	static function fchown(fd:Float, uid:Float, gid:Float):Void;
	static function truncate(path:String, len:Float):Void;
	static function ftruncate(fd:Float, len:Float):Void;
	static function utime(path:String, atime:Float, mtime:Float):Void;
	static function open(path:String, flags:String, ?mode:Float, ?fd_start:Float, ?fd_end:Float):FSStream;
	static function close(stream:FSStream):Void;
	static function llseek(stream:FSStream, offset:Float, whence:Float):Dynamic;
	static function read(stream:FSStream, buffer:ArrayBufferView, offset:Float, length:Float, ?position:Float):Float;
	static function write(stream:FSStream, buffer:ArrayBufferView, offset:Float, length:Float, ?position:Float, ?canOwn:Bool):Float;
	static function allocate(stream:FSStream, offset:Float, length:Float):Void;
	static function mmap(stream:FSStream, buffer:ArrayBufferView, offset:Float, length:Float, position:Float, prot:Float, flags:Float):Dynamic;
	static function ioctl(stream:FSStream, cmd:Dynamic, arg:Dynamic):Dynamic;
	static function readFile(path:String, ?opts:{ var encoding : String; var flags : String; }):Dynamic;
	static function writeFile(path:String, data:ArrayBufferView, ?opts:{ var encoding : String; var flags : String; }):Void;
	static function writeFile(path:String, data:String, ?opts:{ var encoding : String; var flags : String; }):Void;
	static function cwd():String;
	static function chdir(path:String):Void;
	static function init(input:Void -> Float, output:Float -> Dynamic, error:Float -> Dynamic):Void;
	static function createLazyFile(parent:String, name:String, url:String, canRead:Bool, canWrite:Bool):FSNode;
	static function createLazyFile(parent:FSNode, name:String, url:String, canRead:Bool, canWrite:Bool):FSNode;
	static function createPreloadedFile(parent:String, name:String, url:String, canRead:Bool, canWrite:Bool, ?onload:Void -> Void, ?onerror:Void -> Void, ?dontCreateFile:Bool, ?canOwn:Bool):Void;
	static function createPreloadedFile(parent:FSNode, name:String, url:String, canRead:Bool, canWrite:Bool, ?onload:Void -> Void, ?onerror:Void -> Void, ?dontCreateFile:Bool, ?canOwn:Bool):Void;
	static var MEMFS : Emscripten.FileSystemType;
	static var NODEFS : Emscripten.FileSystemType;
	static var IDBFS : Emscripten.FileSystemType;
}
typedef Math = {
	function imul(a:Float, b:Float):Float;
};
