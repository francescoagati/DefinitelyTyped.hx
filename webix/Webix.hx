typedef PromisedData = {
	function then(handler:Dynamic -> Dynamic):PromisedData;
};
typedef _ajax = {
	function bind(master:Dynamic):webix._ajax;
	function del(url:String, ?params:Dynamic, ?callback:WebixCallback):PromisedData;
	function get(url:String, ?params:Dynamic, ?callback:WebixCallback):PromisedData;
	function getXHR():Dynamic;
	function headers(values:Dynamic):webix._ajax;
	function post(url:String, ?params:Dynamic, ?callback:WebixCallback):PromisedData;
	function put(url:String, ?params:Dynamic, ?callback:WebixCallback):PromisedData;
	function response(type:String):Void;
	function stringify():Void;
	function sync():webix._ajax;
	var master : Dynamic;
};
typedef Clipbuffer = {
	function destructor():Void;
	function focus():Void;
	function init():Void;
	function set(text:String):Void;
};
typedef Color = {
	function hexToDec(hex:String):Float;
	function hsvToRgb(h:Float, s:Float, v:Float):Array<Dynamic>;
	function rgbToHsv(r:Float, g:Float, b:Float):Array<Dynamic>;
	function toHex(number:Float, ?length:Float):String;
	function toRgb(rgb:String):Array<Dynamic>;
};
typedef Csv = {
	function parse(text:String, ?delimiter:Dynamic):Array<Dynamic>;
	function stringify(data:Array<Dynamic>, ?delimiter:Dynamic):String;
	var delimiter : Dynamic;
	var escape : Bool;
};
typedef Editors = {
	var $popup : Dynamic;
	var checkbox : String;
	var color : String;
	var combo : String;
	var date : String;
	var inline-checkbox : Dynamic;
	var inline-text : Dynamic;
	var multiselect : String;
	var password : String;
	var popup : String;
	var richselect : String;
	var select : String;
	var text : String;
};
typedef Env = {
	var cssPrefix : String;
	var isFF : Bool;
	var isIE : Bool;
	var isSafari : Bool;
	var isWebKit : Bool;
	var jsPrefix : String;
	var mouse : Dynamic;
	var strict : Bool;
	var svg : Bool;
	var transform : Bool;
	var transition : Bool;
	var transitionDuration : String;
	var transitionEnd : String;
	var translate : String;
};
typedef History = {
	function push(view:String, url:String, value:Dynamic):Void;
	function track(view:String, url:String):Void;
};
typedef Html = {
	function addCss(node:HTMLElement, name:String):Void;
	function addMeta(name:String, value:String):Void;
	function addStyle(css:String):Void;
	function allowSelect():Void;
	function create(name:String, attrs:Dynamic, ?html:String):HTMLElement;
	function createCss(data:Dynamic):String;
	function denySelect():Void;
	function getValue(node:HTMLElement):String;
	function index(node:HTMLElement):Float;
	function insertBefore(node:HTMLElement, before:HTMLElement, ?rescue:HTMLElement):Void;
	function locate(ev:haxe.extern.EitherType<Event, HTMLElement>, name:String):String;
	function offset(node:HTMLElement):Dynamic;
	function pos(ev:Event):Dynamic;
	function posRelative(ev:Event):Dynamic;
	function preventEvent(ev:Event):Bool;
	function remove(node:haxe.extern.EitherType<HTMLElement, Array<HTMLElement>>):Void;
	function removeCss(node:HTMLElement, name:String):Void;
	function stopEvent(ev:Event):Bool;
};
typedef I18n = {
	function dateFormatDate(date:String):Dynamic;
	function dateFormatStr(date:Dynamic):String;
	function fullDateFormatDate(date:String):Dynamic;
	function fullDateFormatStr(date:Date):String;
	function intFormat(num:Float):String;
	function longDateFormatDate(date:String):Dynamic;
	function longDateFormatStr(date:Dynamic):String;
	function numberFormat(number:Float):String;
	function parseFormatDate(date:String):Dynamic;
	function parseFormatStr(date:Dynamic):String;
	function parseTimeFormatDate(date:String):Void;
	function parseTimeFormatStr(date:Dynamic):Void;
	function priceFormat(number:Float):String;
	function setLocale(name:String):Void;
	function timeFormatDate(time:String):Dynamic;
	function timeFormatStr(date:Dynamic):String;
	var calendar : Dynamic;
	var controls : Dynamic;
	var dateFormat : String;
	var decimalDelimiter : String;
	var decimalSize : Float;
	var fileSize : Array<Dynamic>;
	var fullDateFormat : String;
	var groupDelimiter : String;
	var groupSize : Float;
	var locales : Dynamic;
	var longDateFormat : String;
	var parseFormat : String;
	var parseTimeFormat : String;
	var price : String;
	var priceSettings : Dynamic;
	var timeFormat : String;
};
typedef Locale = {
	var pager : Dynamic;
};
typedef Markup = {
	function init(node:String, target:String):webix.ui.Baseview;
	function parse(data:Dynamic, datatype:String):Void;
	var attribute : Dynamic;
	var dataTag : Dynamic;
	var namespace : Dynamic;
};
typedef Promise = {
	function all(promise:PromisedData, ?morepromises:PromisedData):Void;
	function defer():PromisedData;
	function fcall():PromisedData;
	function nfcall():PromisedData;
};
typedef Rules = {
	function isEmail():Void;
	function isNotEmpty():Void;
	function isNumber():Void;
};
typedef Cookie = {
	function clear():Void;
	function get(name:String):Dynamic;
	function put(name:String, value:Dynamic):Void;
	function remove(name:String):Void;
};
typedef Local = {
	function clear():Void;
	function get(name:String):Dynamic;
	function put(name:String, value:Dynamic):Void;
	function remove(name:String):Void;
};
typedef Session = {
	function clear():Void;
	function get(name:String):Dynamic;
	function put(name:String, value:Dynamic):Void;
	function remove(name:String):Void;
};
typedef Storage = {
	var cookie : webix.Cookie;
	var local : webix.Local;
	var session : webix.Session;
};
typedef ActiveContent = { };
typedef AtomDataLoader = {
	function load(url:String, ?type:String, ?callback:WebixCallback):PromisedData;
	function parse(data:Dynamic, type:String):Void;
};
typedef AtomRender = {
	function render(id:String, data:Dynamic, type:String):Void;
	function sync(source:Dynamic, filter:WebixCallback, silent:Bool):Void;
};
typedef AutoTooltip = { };
typedef BaseBind = {
	function bind(target:Dynamic, ?rule:WebixCallback, ?format:String):Void;
	function unbind():Void;
};
typedef BindSource = {
	function addBind(source:Dynamic, rule:String, format:String):Void;
	function getBindData(key:String, update:Bool):Void;
	function removeBind(source:Dynamic):Void;
	function saveBatch(func:WebixCallback):Void;
	function setBindData(data:Dynamic, key:String):Void;
};
typedef Canvas = {
	function clearCanvas():Void;
	function getCanvas(context:String):Dynamic;
	function hideCanvas():Void;
	function renderText(x:Float, y:Float, text:String, css:String, w:Float):Void;
	function renderTextAt(valign:String, align:String, x:Float, y:Float, t:String, c:String, w:Float):Void;
	function showCanvas():Void;
	function toggleCanvas():Void;
};
typedef CollectionBind = {
	function getCursor():Float;
	function refreshCursor():Void;
	function setCursor(cursor:String):Void;
};
typedef ContextHelper = {
	function attachTo(view:Dynamic):Void;
	function getContext():Dynamic;
};
typedef CopyPaste = { };
typedef CustomScroll = {
	function enable(html_node:haxe.extern.EitherType<HTMLElement, webix.ui.Baseview>):Void;
	function init():Void;
	var scrollStep : Float;
};
typedef DataCollection = {
	function add(obj:Dynamic, ?index:Float):String;
	function addBind(source:Dynamic, rule:String, format:String):Void;
	function attachEvent(type:String, functor:WebixCallback, ?id:String):String;
	function bind(target:Dynamic, ?rule:WebixCallback, ?format:String):Void;
	function blockEvent():Void;
	function callEvent(name:String, params:Array<Dynamic>):Bool;
	function clearAll():Void;
	function clearValidation():Void;
	function count():Float;
	function define(property:String, value:Dynamic):Void;
	function destructor():Void;
	function detachEvent(id:String):Void;
	function exists(id:String):Bool;
	function filter(text:haxe.extern.EitherType<String, haxe.extern.EitherType<WebixTemplate, WebixCallback>>, value:String, preserve:Bool):Void;
	function getBindData(key:String, update:Bool):Void;
	function getCursor():Float;
	function getFirstId():String;
	function getIdByIndex(index:Float):String;
	function getIndexById(id:String):Float;
	function getItem(id:String):Dynamic;
	function getLastId():String;
	function getNextId(id:String, step:Float):String;
	function getPrevId(id:String, step:Float):String;
	function hasEvent(name:String):Bool;
	function isVisible():Bool;
	function load(url:String, ?type:String, ?callback:WebixCallback):PromisedData;
	function loadNext(count:Float, start:Float, callback:WebixCallback, url:String, now:Bool):Void;
	function mapEvent(map:Dynamic):Void;
	function parse(data:Dynamic, type:String):Void;
	function refresh(?id:String):Void;
	function refreshCursor():Void;
	function remove(id:String):Void;
	function removeBind(source:Dynamic):Void;
	function saveBatch(func:WebixCallback):Void;
	function serialize():Dynamic;
	function setBindData(data:Dynamic, key:String):Void;
	function setCursor(cursor:String):Void;
	function sort(by:String, ?dir:String, ?as:String):Void;
	function sync(source:Dynamic, filter:WebixCallback, silent:Bool):Void;
	function unbind():Void;
	function unblockEvent():Void;
	function updateItem(id:String, data:Dynamic):Void;
	function validate(?id:String):Bool;
	var config : { };
	var name : String;
};
typedef DataCollectionFactory = {
	function new():DataCollection;
};
typedef DataDriver = {
	var csv : Dynamic;
	var html : Dynamic;
	var htmltable : Dynamic;
	var jsarray : Dynamic;
	var json : Dynamic;
	var xml : Dynamic;
};
typedef DataLoader = {
	function add(obj:Dynamic, ?index:Float):String;
	function clearAll():Void;
	function count():Float;
	function exists(id:String):Bool;
	function filter(text:haxe.extern.EitherType<String, haxe.extern.EitherType<WebixTemplate, WebixCallback>>, value:String, preserve:Bool):Void;
	function getFirstId():String;
	function getIdByIndex(index:Float):String;
	function getIndexById(id:String):Float;
	function getItem(id:String):Dynamic;
	function getLastId():String;
	function getNextId(id:String, step:Float):String;
	function getPrevId(id:String, step:Float):String;
	function load(url:String, ?type:String, ?callback:WebixCallback):PromisedData;
	function loadNext(count:Float, start:Float, callback:WebixCallback, url:String, now:Bool):Void;
	function parse(data:Dynamic, type:String):Void;
	function refresh(?id:String):Void;
	function remove(id:String):Void;
	function serialize():Dynamic;
	function sort(by:String, ?dir:String, ?as:String):Void;
	function sync(source:Dynamic, filter:WebixCallback, silent:Bool):Void;
	function updateItem(id:String, data:Dynamic):Void;
};
typedef DataMarks = {
	function addCss(id:haxe.extern.EitherType<String, Float>, css:String, ?silent:Bool):Void;
	function clearCss(css:String, ?silent:Bool):Void;
	function hasCss(id:String, css:String):Bool;
	function removeCss(id:haxe.extern.EitherType<String, Float>, css:String, ?silent:Bool):Void;
};
typedef DataMove = {
	function copy(sid:String, tindex:Float, ?tobj:Dynamic, ?details:Dynamic):Void;
	function move(sid:String, tindex:Float, ?tobj:Dynamic, ?details:Dynamic):String;
	function moveBottom(id:String):Void;
	function moveDown(id:String, step:Float):Void;
	function moveTop(id:String):Void;
	function moveUp(id:String, step:Float):Void;
};
typedef DataProcessor = {
	function attachEvent(type:String, functor:WebixCallback, ?id:String):String;
	function attachProgress(start:WebixCallback, end:WebixCallback, error:WebixCallback):Void;
	function blockEvent():Void;
	function callEvent(name:String, params:Array<Dynamic>):Bool;
	function clearValidation():Void;
	function define(property:String, value:Dynamic):Void;
	function detachEvent(id:String):Void;
	function escape(value:String):String;
	function getItemState(itemId:String):Dynamic;
	function getState():haxe.extern.EitherType<String, Bool>;
	function hasEvent(name:String):Bool;
	function ignore(code:WebixCallback, master:Dynamic):Void;
	function mapEvent(map:Dynamic):Void;
	function off():Void;
	function on():Void;
	function processResult(data:Dynamic):Void;
	function reset():Void;
	function save(id:String, operation:String):Void;
	function send():Void;
	function setItemState(itemId:String, state:Bool):Void;
	function unblockEvent():Void;
	function validate():Bool;
	var config : { };
	var name : String;
};
typedef DataRecord = {
	function attachEvent(type:String, functor:WebixCallback, ?id:String):String;
	function bind(target:Dynamic, ?rule:WebixCallback, ?format:String):Void;
	function blockEvent():Void;
	function callEvent(name:String, params:Array<Dynamic>):Bool;
	function define(property:String, value:Dynamic):Void;
	function detachEvent(id:String):Void;
	function getValues():Dynamic;
	function hasEvent(name:String):Bool;
	function isVisible():Bool;
	function load(url:String, ?type:String, ?callback:WebixCallback):PromisedData;
	function mapEvent(map:Dynamic):Void;
	function parse(data:Dynamic, type:String):Void;
	function refresh(?id:String):Void;
	function setValues(values:Dynamic, ?update:Bool):Void;
	function unbind():Void;
	function unblockEvent():Void;
	var config : { };
	var name : String;
};
typedef DataState = {
	function getState():Dynamic;
	function setState(state:Dynamic):Void;
};
typedef DataStore = {
	function add(obj:Dynamic, ?index:Float):String;
	function addMark(id:String, name:String, ?css:Bool, ?value:Dynamic):Dynamic;
	function attachEvent(type:String, functor:WebixCallback, ?id:String):String;
	function blockEvent():Void;
	function callEvent(name:String, params:Array<Dynamic>):Bool;
	function changeId(old:String, newid:String):Void;
	function clearAll():Void;
	function clearMark(name:String):Void;
	function count():Float;
	function destructor():Void;
	function detachEvent(id:String):Void;
	function each(method:WebixCallback, ?master:Dynamic, ?all:Bool):Void;
	function exists(id:String):Bool;
	function filter(text:haxe.extern.EitherType<String, haxe.extern.EitherType<WebixTemplate, WebixCallback>>, value:String, preserve:Bool):Void;
	function getFirstId():String;
	function getIdByIndex(index:Float):String;
	function getIndexById(id:String):Float;
	function getIndexRange(from:String, to:String):Array<Dynamic>;
	function getItem(id:String):Dynamic;
	function getLastId():String;
	function getMark(id:String, mark_name:String):Dynamic;
	function getNextId(id:String, step:Float):String;
	function getPrevId(id:String, step:Float):String;
	function getRange(from:String, to:String):Array<Dynamic>;
	function hasEvent(name:String):Bool;
	function id(item:Dynamic):String;
	function importData(source:webix.ui.Baseview):Void;
	function mapEvent(map:Dynamic):Void;
	function move(sid:String, tindex:Float, ?tobj:Dynamic, ?details:Dynamic):String;
	function provideApi(target:Dynamic, eventable:Bool):Void;
	function refresh(?id:String):Void;
	function remove(id:String):Void;
	function removeMark(id:String, name:String, css:Bool):Void;
	function scheme(config:Dynamic):Void;
	function serialize():Dynamic;
	function setDriver(type:String):Void;
	function silent(code:WebixCallback):Void;
	function sort(by:String, ?dir:String, ?as:String):Void;
	function sync(source:Dynamic, filter:WebixCallback, silent:Bool):Void;
	function unblockEvent():Void;
	function unsync():Void;
	function updateItem(id:String, data:Dynamic):Void;
	var driver : Dynamic;
	var name : String;
	var order : Array<Dynamic>;
	var pull : Dynamic;
};
typedef DataValue = {
	function attachEvent(type:String, functor:WebixCallback, ?id:String):String;
	function bind(target:Dynamic, ?rule:WebixCallback, ?format:String):Void;
	function blockEvent():Void;
	function callEvent(name:String, params:Array<Dynamic>):Bool;
	function detachEvent(id:String):Void;
	function getValue():String;
	function hasEvent(name:String):Bool;
	function isVisible():Bool;
	function mapEvent(map:Dynamic):Void;
	function refresh():Void;
	function setValue(value:String):Void;
	function unbind():Void;
	function unblockEvent():Void;
	var name : String;
};
typedef Date = {
	function add(date:Dynamic, inc:Float, mode:String):Dynamic;
	function copy(date:Dynamic):Dynamic;
	function datePart(date:Dynamic):Dynamic;
	function dateToStr(format:String, utc:Bool):WebixCallback;
	function dayStart(date:Dynamic):Dynamic;
	function equal(datea:Dynamic, dateb:Dynamic):Bool;
	function getISOWeek(date:Dynamic):Float;
	function getUTCISOWeek(data:Dynamic):Float;
	function isHoliday(date:Dynamic):Bool;
	function monthStart(date:Dynamic):Dynamic;
	function strToDate(format:String, utc:Bool):WebixCallback;
	function timePart(date:Dynamic):Float;
	function toFixed(num:Float):Float;
	function weekStart(date:Dynamic):Dynamic;
	function yearStart(date:Dynamic):Dynamic;
	var startOnMonday : Bool;
};
typedef Destruction = {
	function destructor():Void;
};
typedef DragControl = {
	function addDrag(node:haxe.extern.EitherType<String, HTMLElement>, ctrl:Dynamic):Void;
	function addDrop(node:haxe.extern.EitherType<String, HTMLElement>, ctrl:Dynamic, master_mode:Bool):Void;
	function createDrag(event:Event):Void;
	function destroyDrag():Void;
	function getContext():Dynamic;
	function getMaster(target:Dynamic):Dynamic;
	function getNode():HTMLElement;
	function sendSignal(signal:String):Void;
	function $drag(s:Dynamic, e:Event):HTMLElement;
	function $dragIn(s:Dynamic, t:Dynamic, e:Event):Void;
	function $dragOut(s:Dynamic, t:Dynamic, n:Dynamic, e:Event):Void;
	var $dragPos : WebixCallback;
	function $drop(s:Dynamic, t:Dynamic, d:Dynamic, e:Event):Void;
	var left : Float;
	var top : Float;
};
typedef DragItem = {
	function $drag(source:HTMLElement, ev:Event):String;
	var $dragHTML : WebixCallback;
	function $dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	function $dragMark(context:Dynamic, ev:Event):Bool;
	function $dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):Void;
	function $drop(source:HTMLElement, target:HTMLElement, ev:Dynamic):Void;
	var $dropAllow : WebixCallback;
};
typedef DragOrder = {
	function $drag(source:HTMLElement, ev:Event):String;
	function $dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	var $dragPos : WebixCallback;
	function $drop(source:HTMLElement, target:HTMLElement, ev:Dynamic):Void;
};
typedef EditAbility = {
	function edit(id:Dynamic):Void;
	function editCancel():Void;
	function editNext():Bool;
	function editStop():Void;
	function focusEditor():Void;
	function getEditState():Dynamic;
	function getEditor(?id:String):Dynamic;
	function getEditorValue():String;
	function validateEditor(?id:String):Bool;
};
typedef EventSystem = {
	function attachEvent(type:String, functor:WebixCallback, ?id:String):String;
	function blockEvent():Void;
	function callEvent(name:String, params:Array<Dynamic>):Bool;
	function detachEvent(id:String):Void;
	function hasEvent(name:String):Bool;
	function mapEvent(map:Dynamic):Void;
	function unblockEvent():Void;
};
typedef Group = {
	function group(config:Dynamic, mode:Bool):Void;
	function ungroup(mode:Bool):Void;
};
typedef GroupMethods = {
	function any(property:String, data:Dynamic):Void;
	function count(property:String, data:Dynamic):Void;
	function max(property:String, data:Dynamic):Void;
	function min(property:String, data:Dynamic):Void;
	function string(property:String, data:Dynamic):Void;
	function sum(property:String, data:Dynamic):Void;
};
typedef GroupStore = {
	function group(stats:Dynamic):Void;
	function ungroup():Void;
};
typedef HtmlMap = {
	function addPoly(id:String, points:Array<Dynamic>):Void;
	function addRect(id:String, points:Array<Dynamic>, ?userdata:String):Void;
	function addSector(id:String, aplha0:Float, aplha1:Float, x:Float, y:Float, R:Float, ky:Float):Void;
	function render(html:HTMLElement):Void;
};
typedef IdSpace = {
	function innerId(id:String):String;
	function ui(view:Dynamic):webix.ui.Baseview;
	var $$ : Dynamic;
};
typedef KeysNavigation = {
	function moveSelection(direction:String):Void;
};
typedef MapCollection = { };
typedef Modality = { };
typedef MouseEvents = {
	var on_click : WebixCallback;
	var on_context : { };
	var on_dblclick : WebixCallback;
	var on_mouse_move : WebixCallback;
};
typedef Movable = { };
typedef NavigationButtons = { };
typedef Number = {
	function format(value:Float, config:Dynamic):String;
	function numToStr(config:Dynamic):WebixCallback;
};
typedef OverlayBox = {
	function hideOverlay():Void;
	function showOverlay():Void;
};
typedef PagingAbility = {
	function getPage():Float;
	function getPager():Dynamic;
	function setPage(page:Float):Void;
};
typedef PowerArray = {
	function each(functor:WebixCallback, master:Dynamic):Void;
	function filter(functor:WebixCallback, master:Dynamic):Array<Dynamic>;
	function find(data:Dynamic):Float;
	function insertAt(data:Dynamic, pos:Float):Void;
	function map(functor:WebixCallback, master:Dynamic):Array<Dynamic>;
	function remove(value:Dynamic):Void;
	function removeAt(pos:Float, len:Float):Void;
};
typedef ProgressBar = {
	function hideProgress():Void;
	function showProgress(?config:Dynamic):Void;
};
typedef RecordBind = { };
typedef RenderStack = {
	function customize(obj:Dynamic):Void;
	function getItemNode(id:String):Void;
	function locate(e:Event):String;
	function render(id:String, data:Dynamic, type:String):Void;
	function showItem(id:String):Void;
	var type : { };
	var types : { };
};
typedef Scrollable = {
	function getScrollState():Dynamic;
	function scrollTo(x:Float, y:Float):Void;
};
typedef SelectionModel = {
	function getSelectedId(as_array:Bool):haxe.extern.EitherType<String, Array<Dynamic>>;
	function getSelectedItem(?as_array:Bool):Dynamic;
	function isSelected(id:String):Bool;
	function select(id:haxe.extern.EitherType<String, Array<Dynamic>>, preserve:Bool):Void;
	function selectAll(?from:String, ?to:String):Void;
	function unselect(?id:String):Void;
	function unselectAll():Void;
};
typedef Settings = {
	function define(property:String, value:Dynamic):Void;
	var config : { };
	var name : String;
};
typedef SingleRender = {
	function customize(obj:Dynamic):Void;
	function render(id:String, data:Dynamic, type:String):Void;
	function sync(source:Dynamic, filter:WebixCallback, silent:Bool):Void;
	var type : { };
};
typedef TablePaste = { };
typedef Touch = {
	function disable():Void;
	function enable():Void;
	function limit(mode:Bool):Void;
	function scrollTo(node:HTMLElement, x:Float, y:Float, speed:String):Void;
	var config : Dynamic;
};
typedef TreeAPI = {
	function close(id:String):Void;
	function closeAll():Void;
	function getOpenItems():Array<Dynamic>;
	function getState():Dynamic;
	function isBranchOpen(id:String):Bool;
	function open(id:String):Void;
	function openAll():Void;
	function setState(state:Dynamic):Void;
};
typedef TreeClick = {
	function webix_tree_checkbox(obj:Dynamic, common:{ }):String;
	function webix_tree_close(obj:Dynamic, common:{ }):String;
	function webix_tree_open(obj:Dynamic, common:{ }):String;
};
typedef TreeCollection = {
	function add(obj:Dynamic, ?index:Float):String;
	function addBind(source:Dynamic, rule:String, format:String):Void;
	function attachEvent(type:String, functor:WebixCallback, ?id:String):String;
	function bind(target:Dynamic, ?rule:WebixCallback, ?format:String):Void;
	function blockEvent():Void;
	function callEvent(name:String, params:Array<Dynamic>):Bool;
	function clearAll():Void;
	function clearValidation():Void;
	function count():Float;
	function define(property:String, value:Dynamic):Void;
	function destructor():Void;
	function detachEvent(id:String):Void;
	function exists(id:String):Bool;
	function filter(text:haxe.extern.EitherType<String, haxe.extern.EitherType<WebixTemplate, WebixCallback>>, value:String, preserve:Bool):Void;
	function getBindData(key:String, update:Bool):Void;
	function getBranchIndex(id:String, ?parent:String):Float;
	function getCursor():Float;
	function getFirstChildId(id:String):String;
	function getFirstId():String;
	function getIdByIndex(index:Float):String;
	function getIndexById(id:String):Float;
	function getItem(id:String):Dynamic;
	function getLastId():String;
	function getNextId(id:String, step:Float):String;
	function getNextSiblingId(id:Dynamic):String;
	function getParentId(id:String):String;
	function getPrevId(id:String, step:Float):String;
	function getPrevSiblingId(id:Dynamic):String;
	function hasEvent(name:String):Bool;
	function isBranch(id:String):Bool;
	function isVisible():Bool;
	function load(url:String, ?type:String, ?callback:WebixCallback):PromisedData;
	function loadBranch(id:String, callback:WebixCallback, url:String):Void;
	function loadNext(count:Float, start:Float, callback:WebixCallback, url:String, now:Bool):Void;
	function mapEvent(map:Dynamic):Void;
	function parse(data:Dynamic, type:String):Void;
	function refresh(?id:String):Void;
	function refreshCursor():Void;
	function remove(id:String):Void;
	function removeBind(source:Dynamic):Void;
	function saveBatch(func:WebixCallback):Void;
	function serialize():Dynamic;
	function setBindData(data:Dynamic, key:String):Void;
	function setCursor(cursor:String):Void;
	function sort(by:String, ?dir:String, ?as:String):Void;
	function sync(source:Dynamic, filter:WebixCallback, silent:Bool):Void;
	function unbind():Void;
	function unblockEvent():Void;
	function updateItem(id:String, data:Dynamic):Void;
	function validate(?id:String):Bool;
	var config : { };
	var name : String;
};
typedef TreeDataLoader = {
	function loadBranch(id:String, callback:WebixCallback, url:String):Void;
};
typedef TreeDataMove = {
	function copy(sid:String, tindex:Float, ?tobj:webix.ui.Baseview, ?details:Dynamic):String;
	function move(sid:String, tindex:Float, ?tobj:webix.ui.Baseview, ?details:Dynamic):String;
	var $dropAllow : WebixCallback;
};
typedef TreeRenderStack = {
	@:overload(function(id:String):HTMLElement { })
	function getItemNode(id:String):Void;
};
typedef TreeStateCheckbox = {
	function checkAll(?id:String):Void;
	function checkItem(id:String):Void;
	function getChecked():Array<Dynamic>;
	function isChecked(id:String):Bool;
	function uncheckAll(?id:String):Void;
	function uncheckItem(id:String):Void;
};
typedef TreeStore = {
	function add(obj:Dynamic, index:Float, pid:String):String;
	function changeId(old:String, newid:String):Void;
	function clearAll():Void;
	function count():Float;
	function each(code:WebixCallback, master:Dynamic, all:Bool, pid:String):Void;
	function eachChild(pid:String, code:WebixCallback, ?master:Dynamic, ?all:Bool):Void;
	function eachOpen(code:WebixCallback, ?master:Dynamic, ?pid:String):Void;
	function eachSubItem(pid:String, code:WebixCallback):Void;
	function getBranch(id:String):Array<Dynamic>;
	function getBranchIndex(id:String, ?parent:String):Float;
	function getFirstChildId(id:String):String;
	function getNextSiblingId(id:Dynamic):String;
	function getParentId(id:String):String;
	function getPrevSiblingId(id:Dynamic):String;
	function getTopRange():Array<Dynamic>;
	function isBranch(id:String):Bool;
	function provideApi(target:Dynamic, eventable:Bool):Void;
	function remove(id:String):Void;
	function serialize():Dynamic;
	var name : String;
};
typedef TreeTableClick = { };
typedef TreeTablePaste = {
	function insert(data:Array<Dynamic>):Void;
};
typedef TreeType = {
	function checkbox(obj:Dynamic, common:Dynamic):String;
	function folder(obj:Dynamic, common:Dynamic):String;
	function icon(obj:Dynamic, common:Dynamic):String;
	function space(obj:Dynamic, common:Dynamic):String;
};
typedef UIExtension = { };
typedef UIManager = {
	function addHotKey(key:String, handler:WebixCallback, ?obj:Dynamic):Void;
	function canFocus(id:String):Bool;
	function destructor():Void;
	function getFocus():webix.ui.Baseview;
	function getNext(view:Dynamic):Dynamic;
	function getPrev(view:Dynamic):Dynamic;
	function getState(id:String, childs:Bool):Dynamic;
	function getTop(id:String):Dynamic;
	function hasFocus(id:String):Bool;
	function removeHotKey(key:String, ?handler:WebixCallback, ?obj:Dynamic):Void;
	function setFocus(id:String):Void;
	function setState(state:Dynamic):Void;
};
typedef UploadDriver = {
	var flash : Dynamic;
	var html5 : Dynamic;
};
typedef ValidateCollection = {
	function clearValidation():Void;
	function validate(?id:String):Bool;
};
typedef ValidateData = {
	function clearValidation():Void;
	function validate():Bool;
};
typedef ValueBind = { };
typedef Values = {
	function clear():Void;
	function focus(item:String):Void;
	function getCleanValues():Dynamic;
	function getDirtyValues():Dynamic;
	function getValues(?details:Dynamic):Array<Dynamic>;
	function isDirty():Bool;
	function setDirty(?mark:Bool):Void;
	function setValues(values:Dynamic, ?update:Bool):Void;
};
typedef VirtualRenderStack = {
	function getItemNode(id:String):Void;
	function render(id:String, data:Dynamic, type:String):Void;
	function showItem(id:String):Void;
};
extern class WebixTopLevel {
	static function ajax():webix._ajax;
	static function $$(id:haxe.extern.EitherType<String, haxe.extern.EitherType<Event, HTMLElement>>):webix.ui.View;
	static function alert(text:String, callback:WebixCallback):HTMLElement;
	static function animate(html_element:HTMLElement, animation:Dynamic):Void;
	static function attachEvent(type:String, functor:WebixCallback, ?id:String):String;
	static function bind(code:WebixCallback, master:Dynamic):WebixCallback;
	static function blockEvent():Void;
	static function callEvent(name:String, params:Array<Dynamic>):Bool;
	static function clone(source:Dynamic):Dynamic;
	static function confirm(text:String, callback:WebixCallback):HTMLElement;
	static function copy(source:Dynamic):Dynamic;
	static function delay(code:WebixCallback, ?owner:Dynamic, ?params:Array<Dynamic>, ?delay:Float):Float;
	static function detachEvent(id:String):Void;
	static function dp(name:String):Dynamic;
	static function editStop():Void;
	static function event(node:HTMLElement, event:String, handler:WebixCallback, ?master:Dynamic):String;
	static function eventRemove(id:String):Void;
	static function exec(code:String):Void;
	static function extend(target:Dynamic, source:Dynamic, overwrite:Bool):Dynamic;
	static function hasEvent(name:String):Bool;
	static function isArray(check:Dynamic):Bool;
	static function isDate(check:Dynamic):Bool;
	static function isUndefined(check:Dynamic):Bool;
	static function jsonp(url:String, ?params:Dynamic, ?callback:WebixCallback, ?master:Dynamic):Void;
	static function mapEvent(map:Dynamic):Void;
	static function message(text:String):Void;
	static function modalbox(text:String, callback:WebixCallback):HTMLElement;
	static function once(code:WebixCallback):Void;
	static function proto(target:Dynamic, ?mixin1:Dynamic, ?mixinN:Dynamic):Dynamic;
	static function protoUI(target:Dynamic, view:Dynamic, ?mixin1:Dynamic, ?mixinN:Dynamic):Dynamic;
	static function proxy(type:String, source:String):Dynamic;
	static function ready(code:WebixCallback):Void;
	static function remote():Void;
	static function require(url:String):Void;
	static function send(url:String, values:Dynamic, method:String, target:String):Void;
	static function single(source:WebixCallback):WebixCallback;
	static function template(template:String):WebixCallback;
	static function toArray(array:Array<Dynamic>):Array<Dynamic>;
	static function toFunctor(name:String):WebixCallback;
	static function toNode(id:String):HTMLElement;
	static function type(config:Dynamic):Void;
	static function ui(config:Dynamic, ?parent:Dynamic, ?replacement:Dynamic):webix.ui.Baseview;
	static function uid():String;
	static function unblockEvent():Void;
	static function wrap(target:WebixCallback, source:WebixCallback):WebixCallback;
	static var codebase : String;
	static var name : String;
	static var version : String;
	static var clipbuffer : webix.Clipbuffer;
	static var color : webix.Color;
	static var csv : webix.Csv;
	static var editors : webix.Editors;
	static var env : webix.Env;
	static var history : webix.History;
	static var html : webix.Html;
	static var i18n : webix.I18n;
	static var locale : webix.Locale;
	static var markup : webix.Markup;
	static var promise : webix.Promise;
	static var rules : webix.Rules;
	static var storage : webix.Storage;
	static var ActiveContent : ActiveContent;
	static var AtomDataLoader : AtomDataLoader;
	static var AtomRender : AtomRender;
	static var AutoTooltip : AutoTooltip;
	static var BaseBind : BaseBind;
	static var BindSource : BindSource;
	static var Canvas : Canvas;
	static var CollectionBind : CollectionBind;
	static var ContextHelper : ContextHelper;
	static var CopyPaste : CopyPaste;
	static var CustomScroll : CustomScroll;
	static var DataCollection : DataCollectionFactory;
	static var DataDriver : DataDriver;
	static var DataLoader : DataLoader;
	static var DataMarks : DataMarks;
	static var DataMove : DataMove;
	static var DataProcessor : DataProcessor;
	static var DataRecord : DataRecord;
	static var DataState : DataState;
	static var DataStore : DataStore;
	static var DataValue : DataValue;
	static var Date : Date;
	static var Destruction : Destruction;
	static var DragControl : DragControl;
	static var DragItem : DragItem;
	static var DragOrder : DragOrder;
	static var EditAbility : EditAbility;
	static var EventSystem : EventSystem;
	static var Group : Group;
	static var GroupMethods : GroupMethods;
	static var GroupStore : GroupStore;
	static var HtmlMap : HtmlMap;
	static var IdSpace : IdSpace;
	static var KeysNavigation : KeysNavigation;
	static var MapCollection : MapCollection;
	static var Modality : Modality;
	static var MouseEvents : MouseEvents;
	static var Movable : Movable;
	static var NavigationButtons : NavigationButtons;
	static var Number : Number;
	static var OverlayBox : OverlayBox;
	static var PagingAbility : PagingAbility;
	static var PowerArray : PowerArray;
	static var ProgressBar : ProgressBar;
	static var RecordBind : RecordBind;
	static var RenderStack : RenderStack;
	static var Scrollable : Scrollable;
	static var SelectionModel : SelectionModel;
	static var Settings : Settings;
	static var SingleRender : SingleRender;
	static var TablePaste : TablePaste;
	static var Touch : Touch;
	static var TreeAPI : TreeAPI;
	static var TreeClick : TreeClick;
	static var TreeCollection : TreeCollection;
	static var TreeDataLoader : TreeDataLoader;
	static var TreeDataMove : TreeDataMove;
	static var TreeRenderStack : TreeRenderStack;
	static var TreeStateCheckbox : TreeStateCheckbox;
	static var TreeStore : TreeStore;
	static var TreeTableClick : TreeTableClick;
	static var TreeTablePaste : TreeTablePaste;
	static var TreeType : TreeType;
	static var UIExtension : UIExtension;
	static var UIManager : UIManager;
	static var UploadDriver : UploadDriver;
	static var ValidateCollection : ValidateCollection;
	static var ValidateData : ValidateData;
	static var ValueBind : ValueBind;
	static var Values : Values;
	static var VirtualRenderStack : VirtualRenderStack;
}
extern class WebixTopLevel {
	static function ajax():webix._ajax;
	static function $$(id:haxe.extern.EitherType<String, haxe.extern.EitherType<Event, HTMLElement>>):webix.ui.View;
	static function alert(text:String, callback:WebixCallback):HTMLElement;
	static function animate(html_element:HTMLElement, animation:Dynamic):Void;
	static function attachEvent(type:String, functor:WebixCallback, ?id:String):String;
	static function bind(code:WebixCallback, master:Dynamic):WebixCallback;
	static function blockEvent():Void;
	static function callEvent(name:String, params:Array<Dynamic>):Bool;
	static function clone(source:Dynamic):Dynamic;
	static function confirm(text:String, callback:WebixCallback):HTMLElement;
	static function copy(source:Dynamic):Dynamic;
	static function delay(code:WebixCallback, ?owner:Dynamic, ?params:Array<Dynamic>, ?delay:Float):Float;
	static function detachEvent(id:String):Void;
	static function dp(name:String):Dynamic;
	static function editStop():Void;
	static function event(node:HTMLElement, event:String, handler:WebixCallback, ?master:Dynamic):String;
	static function eventRemove(id:String):Void;
	static function exec(code:String):Void;
	static function extend(target:Dynamic, source:Dynamic, overwrite:Bool):Dynamic;
	static function hasEvent(name:String):Bool;
	static function isArray(check:Dynamic):Bool;
	static function isDate(check:Dynamic):Bool;
	static function isUndefined(check:Dynamic):Bool;
	static function jsonp(url:String, ?params:Dynamic, ?callback:WebixCallback, ?master:Dynamic):Void;
	static function mapEvent(map:Dynamic):Void;
	static function message(text:String):Void;
	static function modalbox(text:String, callback:WebixCallback):HTMLElement;
	static function once(code:WebixCallback):Void;
	static function proto(target:Dynamic, ?mixin1:Dynamic, ?mixinN:Dynamic):Dynamic;
	static function protoUI(target:Dynamic, view:Dynamic, ?mixin1:Dynamic, ?mixinN:Dynamic):Dynamic;
	static function proxy(type:String, source:String):Dynamic;
	static function ready(code:WebixCallback):Void;
	static function remote():Void;
	static function require(url:String):Void;
	static function send(url:String, values:Dynamic, method:String, target:String):Void;
	static function single(source:WebixCallback):WebixCallback;
	static function template(template:String):WebixCallback;
	static function toArray(array:Array<Dynamic>):Array<Dynamic>;
	static function toFunctor(name:String):WebixCallback;
	static function toNode(id:String):HTMLElement;
	static function type(config:Dynamic):Void;
	static function ui(config:Dynamic, ?parent:Dynamic, ?replacement:Dynamic):webix.ui.Baseview;
	static function uid():String;
	static function unblockEvent():Void;
	static function wrap(target:WebixCallback, source:WebixCallback):WebixCallback;
	static var codebase : String;
	static var name : String;
	static var version : String;
	static var clipbuffer : webix.Clipbuffer;
	static var color : webix.Color;
	static var csv : webix.Csv;
	static var editors : webix.Editors;
	static var env : webix.Env;
	static var history : webix.History;
	static var html : webix.Html;
	static var i18n : webix.I18n;
	static var locale : webix.Locale;
	static var markup : webix.Markup;
	static var promise : webix.Promise;
	static var rules : webix.Rules;
	static var storage : webix.Storage;
	static var ActiveContent : ActiveContent;
	static var AtomDataLoader : AtomDataLoader;
	static var AtomRender : AtomRender;
	static var AutoTooltip : AutoTooltip;
	static var BaseBind : BaseBind;
	static var BindSource : BindSource;
	static var Canvas : Canvas;
	static var CollectionBind : CollectionBind;
	static var ContextHelper : ContextHelper;
	static var CopyPaste : CopyPaste;
	static var CustomScroll : CustomScroll;
	static var DataCollection : DataCollectionFactory;
	static var DataDriver : DataDriver;
	static var DataLoader : DataLoader;
	static var DataMarks : DataMarks;
	static var DataMove : DataMove;
	static var DataProcessor : DataProcessor;
	static var DataRecord : DataRecord;
	static var DataState : DataState;
	static var DataStore : DataStore;
	static var DataValue : DataValue;
	static var Date : Date;
	static var Destruction : Destruction;
	static var DragControl : DragControl;
	static var DragItem : DragItem;
	static var DragOrder : DragOrder;
	static var EditAbility : EditAbility;
	static var EventSystem : EventSystem;
	static var Group : Group;
	static var GroupMethods : GroupMethods;
	static var GroupStore : GroupStore;
	static var HtmlMap : HtmlMap;
	static var IdSpace : IdSpace;
	static var KeysNavigation : KeysNavigation;
	static var MapCollection : MapCollection;
	static var Modality : Modality;
	static var MouseEvents : MouseEvents;
	static var Movable : Movable;
	static var NavigationButtons : NavigationButtons;
	static var Number : Number;
	static var OverlayBox : OverlayBox;
	static var PagingAbility : PagingAbility;
	static var PowerArray : PowerArray;
	static var ProgressBar : ProgressBar;
	static var RecordBind : RecordBind;
	static var RenderStack : RenderStack;
	static var Scrollable : Scrollable;
	static var SelectionModel : SelectionModel;
	static var Settings : Settings;
	static var SingleRender : SingleRender;
	static var TablePaste : TablePaste;
	static var Touch : Touch;
	static var TreeAPI : TreeAPI;
	static var TreeClick : TreeClick;
	static var TreeCollection : TreeCollection;
	static var TreeDataLoader : TreeDataLoader;
	static var TreeDataMove : TreeDataMove;
	static var TreeRenderStack : TreeRenderStack;
	static var TreeStateCheckbox : TreeStateCheckbox;
	static var TreeStore : TreeStore;
	static var TreeTableClick : TreeTableClick;
	static var TreeTablePaste : TreeTablePaste;
	static var TreeType : TreeType;
	static var UIExtension : UIExtension;
	static var UIManager : UIManager;
	static var UploadDriver : UploadDriver;
	static var ValidateCollection : ValidateCollection;
	static var ValidateData : ValidateData;
	static var ValueBind : ValueBind;
	static var Values : Values;
	static var VirtualRenderStack : VirtualRenderStack;
}
